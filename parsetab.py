
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightNOTleftANDORleftEQNEQLSSGTRLEQGEQleftPLUSMINUSleftMULTIPLYDIVIDEleftEXPAND BREAK CLOSECURL CLOSEPAR COMMA COMMENT DIVIDE ELSE EOL EQ EQUALS EXP FLOAT FNAME FOR GEQ GTR IF INPUT INT LEQ LSS MAIN MINUS MULTIPLY NAME NEQ NEWLINE NOT OPENCURL OPENPAR OR OUTPUT PERCENTFLOAT PERCENTINT PLUS QUOTEMARK RETURN STRING THEN TO TYPEFLOAT TYPEINT TYPESTRING WHILE\n    begin : function\n    \n    function : function funcname OPENCURL code RETURN expression EOL CLOSECURL \n             | empty\n    \n    funcname : datatype FNAME OPENPAR parameters CLOSEPAR \n    \n    parameters : vardeclare COMMA parameters\n                | vardeclare\n                | empty\n    \n    code : code vardeclare EOL \n        | code varassign EOL\n        | code io EOL\n        | code expression EOL\n        | code while \n        | code if\n        | empty\n    \n    io : inputoutput OPENPAR iodata CLOSEPAR\n    io : inputoutput error \n    inputoutput : INPUT\n                | OUTPUT\n    \n    iodata : QUOTEMARK percenttype QUOTEMARK COMMA AND NAME\n    \n    percenttype : PERCENTFLOAT\n                | PERCENTINT\n    \n    datatype : TYPEFLOAT\n             | TYPEINT\n    \n    bool : expression boolop expression\n         | bool boolop bool\n         | expression boolop bool\n         | bool boolop expression\n    \n    boolop : EQ\n           | NEQ\n           | LSS\n           | GTR\n           | LEQ\n           | GEQ\n           | AND\n           | OR\n    \n    if : IF OPENPAR bool CLOSEPAR block else\n       | IF OPENPAR bool CLOSEPAR block \n    \n    else : ELSE block\n    \n    while : WHILE OPENPAR bool CLOSEPAR block\n\n    \n    block : OPENCURL while CLOSECURL\n        |   OPENCURL if CLOSECURL\n        |   OPENCURL bcode CLOSECURL\n    \n    bcode : bcode io EOL\n        | bcode expression EOL\n        | bcode BREAK EOL\n        | empty\n    \n    expression :  expression EXP expression\n               |  expression  MULTIPLY expression\n               |  expression DIVIDE expression\n               |  expression PLUS expression\n               |  expression MINUS expression\n               |  OPENPAR expression CLOSEPAR\n    \n    vardeclare : datatype NAME\n    \n    varassign : NAME EQUALS expression\n               | NAME EQUALS NAME\n    \n    expression : FNAME OPENPAR varname CLOSEPAR \n    \n    varname : NAME COMMA varname\n            | NAME\n            | empty\n    \n    expression  : INT\n                | FLOAT\n                | NAME\n    \n    empty : \n    '
    
_lr_action_items = {'TYPEFLOAT':([0,2,3,8,10,11,12,18,19,36,42,43,44,54,73,94,100,106,109,110,111,115,],[-63,6,-3,-63,6,-14,6,-12,-13,-11,-8,-9,-10,6,-2,-39,-37,-36,-40,-41,-42,-38,]),'TYPEINT':([0,2,3,8,10,11,12,18,19,36,42,43,44,54,73,94,100,106,109,110,111,115,],[-63,7,-3,-63,7,-14,7,-12,-13,-11,-8,-9,-10,7,-2,-39,-37,-36,-40,-41,-42,-38,]),'$end':([0,1,2,3,73,],[-63,0,-1,-3,-2,]),'OPENCURL':([4,53,80,91,107,],[8,-4,95,95,95,]),'FNAME':([5,6,7,8,10,11,13,18,19,23,36,37,38,39,40,41,42,43,44,46,51,52,81,82,83,84,85,86,87,88,89,90,94,95,100,104,105,106,109,110,111,115,117,118,119,],[9,-22,-23,-63,24,-14,24,-12,-13,24,-11,24,24,24,24,24,-8,-9,-10,24,24,24,24,-28,-29,-30,-31,-32,-33,-34,-35,24,-39,-63,-37,24,-46,-36,-40,-41,-42,-38,-43,-44,-45,]),'NAME':([6,7,8,10,11,13,18,19,20,23,36,37,38,39,40,41,42,43,44,46,50,51,52,79,81,82,83,84,85,86,87,88,89,90,94,95,100,104,105,106,108,109,110,111,115,117,118,119,],[-22,-23,-63,21,-14,35,-12,-13,45,35,-11,35,35,35,35,35,-8,-9,-10,61,67,35,35,67,35,-28,-29,-30,-31,-32,-33,-34,-35,35,-39,-63,-37,35,-46,-36,116,-40,-41,-42,-38,-43,-44,-45,]),'RETURN':([8,10,11,18,19,36,42,43,44,94,100,106,109,110,111,115,],[-63,13,-14,-12,-13,-11,-8,-9,-10,-39,-37,-36,-40,-41,-42,-38,]),'OPENPAR':([8,9,10,11,13,18,19,22,23,24,27,28,29,30,36,37,38,39,40,41,42,43,44,46,51,52,81,82,83,84,85,86,87,88,89,90,94,95,100,104,105,106,109,110,111,115,117,118,119,],[-63,12,23,-14,23,-12,-13,47,23,50,51,52,-17,-18,-11,23,23,23,23,23,-8,-9,-10,23,23,23,23,-28,-29,-30,-31,-32,-33,-34,-35,23,-39,-63,-37,23,-46,-36,-40,-41,-42,-38,-43,-44,-45,]),'INT':([8,10,11,13,18,19,23,36,37,38,39,40,41,42,43,44,46,51,52,81,82,83,84,85,86,87,88,89,90,94,95,100,104,105,106,109,110,111,115,117,118,119,],[-63,25,-14,25,-12,-13,25,-11,25,25,25,25,25,-8,-9,-10,25,25,25,25,-28,-29,-30,-31,-32,-33,-34,-35,25,-39,-63,-37,25,-46,-36,-40,-41,-42,-38,-43,-44,-45,]),'FLOAT':([8,10,11,13,18,19,23,36,37,38,39,40,41,42,43,44,46,51,52,81,82,83,84,85,86,87,88,89,90,94,95,100,104,105,106,109,110,111,115,117,118,119,],[-63,26,-14,26,-12,-13,26,-11,26,26,26,26,26,-8,-9,-10,26,26,26,26,-28,-29,-30,-31,-32,-33,-34,-35,26,-39,-63,-37,26,-46,-36,-40,-41,-42,-38,-43,-44,-45,]),'WHILE':([8,10,11,18,19,36,42,43,44,94,95,100,106,109,110,111,115,],[-63,27,-14,-12,-13,-11,-8,-9,-10,-39,27,-37,-36,-40,-41,-42,-38,]),'IF':([8,10,11,18,19,36,42,43,44,94,95,100,106,109,110,111,115,],[-63,28,-14,-12,-13,-11,-8,-9,-10,-39,28,-37,-36,-40,-41,-42,-38,]),'INPUT':([8,10,11,18,19,36,42,43,44,94,95,100,104,105,106,109,110,111,115,117,118,119,],[-63,29,-14,-12,-13,-11,-8,-9,-10,-39,-63,-37,29,-46,-36,-40,-41,-42,-38,-43,-44,-45,]),'OUTPUT':([8,10,11,18,19,36,42,43,44,94,95,100,104,105,106,109,110,111,115,117,118,119,],[-63,30,-14,-12,-13,-11,-8,-9,-10,-39,-63,-37,30,-46,-36,-40,-41,-42,-38,-43,-44,-45,]),'CLOSEPAR':([12,25,26,31,32,33,35,45,49,50,54,56,57,58,59,60,63,65,66,67,68,69,71,72,78,79,93,96,97,98,99,116,],[-63,-60,-61,53,-6,-7,-62,-53,65,-63,-63,-47,-48,-49,-50,-51,74,-52,78,-58,-59,80,91,-5,-56,-63,-57,-25,-27,-24,-26,-19,]),'EOL':([14,15,16,17,21,25,26,34,35,45,48,56,57,58,59,60,61,62,65,74,78,112,113,114,],[36,42,43,44,-62,-60,-61,55,-62,-53,-16,-47,-48,-49,-50,-51,-55,-54,-52,-15,-56,117,118,119,]),'EXP':([14,21,25,26,34,35,49,56,57,58,59,60,61,62,65,70,78,97,98,113,],[37,-62,-60,-61,37,-62,37,-47,37,37,37,37,-62,37,-52,37,-56,37,37,37,]),'MULTIPLY':([14,21,25,26,34,35,49,56,57,58,59,60,61,62,65,70,78,97,98,113,],[38,-62,-60,-61,38,-62,38,-47,-48,-49,38,38,-62,38,-52,38,-56,38,38,38,]),'DIVIDE':([14,21,25,26,34,35,49,56,57,58,59,60,61,62,65,70,78,97,98,113,],[39,-62,-60,-61,39,-62,39,-47,-48,-49,39,39,-62,39,-52,39,-56,39,39,39,]),'PLUS':([14,21,25,26,34,35,49,56,57,58,59,60,61,62,65,70,78,97,98,113,],[40,-62,-60,-61,40,-62,40,-47,-48,-49,-50,-51,-62,40,-52,40,-56,40,40,40,]),'MINUS':([14,21,25,26,34,35,49,56,57,58,59,60,61,62,65,70,78,97,98,113,],[41,-62,-60,-61,41,-62,41,-47,-48,-49,-50,-51,-62,41,-52,41,-56,41,41,41,]),'EQUALS':([21,],[46,]),'error':([22,29,30,],[48,-17,-18,]),'EQ':([25,26,35,56,57,58,59,60,65,69,70,71,78,96,97,98,99,],[-60,-61,-62,-47,-48,-49,-50,-51,-52,82,82,82,-56,82,82,82,82,]),'NEQ':([25,26,35,56,57,58,59,60,65,69,70,71,78,96,97,98,99,],[-60,-61,-62,-47,-48,-49,-50,-51,-52,83,83,83,-56,83,83,83,83,]),'LSS':([25,26,35,56,57,58,59,60,65,69,70,71,78,96,97,98,99,],[-60,-61,-62,-47,-48,-49,-50,-51,-52,84,84,84,-56,84,84,84,84,]),'GTR':([25,26,35,56,57,58,59,60,65,69,70,71,78,96,97,98,99,],[-60,-61,-62,-47,-48,-49,-50,-51,-52,85,85,85,-56,85,85,85,85,]),'LEQ':([25,26,35,56,57,58,59,60,65,69,70,71,78,96,97,98,99,],[-60,-61,-62,-47,-48,-49,-50,-51,-52,86,86,86,-56,86,86,86,86,]),'GEQ':([25,26,35,56,57,58,59,60,65,69,70,71,78,96,97,98,99,],[-60,-61,-62,-47,-48,-49,-50,-51,-52,87,87,87,-56,87,87,87,87,]),'AND':([25,26,35,56,57,58,59,60,65,69,70,71,78,96,97,98,99,101,],[-60,-61,-62,-47,-48,-49,-50,-51,-52,88,88,88,-56,88,88,88,88,108,]),'OR':([25,26,35,56,57,58,59,60,65,69,70,71,78,96,97,98,99,],[-60,-61,-62,-47,-48,-49,-50,-51,-52,89,89,89,-56,89,89,89,89,]),'COMMA':([32,45,67,92,],[54,-53,79,101,]),'QUOTEMARK':([47,75,76,77,],[64,92,-20,-21,]),'CLOSECURL':([55,94,95,100,102,103,104,105,106,109,110,111,115,117,118,119,],[73,-39,-63,-37,109,110,111,-46,-36,-40,-41,-42,-38,-43,-44,-45,]),'PERCENTFLOAT':([64,],[76,]),'PERCENTINT':([64,],[77,]),'BREAK':([95,104,105,117,118,119,],[-63,114,-46,-43,-44,-45,]),'ELSE':([100,109,110,111,],[107,-40,-41,-42,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'begin':([0,],[1,]),'function':([0,],[2,]),'empty':([0,8,12,50,54,79,95,],[3,11,33,68,33,68,105,]),'funcname':([2,],[4,]),'datatype':([2,10,12,54,],[5,20,20,20,]),'code':([8,],[10,]),'expression':([10,13,23,37,38,39,40,41,46,51,52,81,90,104,],[14,34,49,56,57,58,59,60,62,70,70,97,98,113,]),'vardeclare':([10,12,54,],[15,32,32,]),'varassign':([10,],[16,]),'io':([10,104,],[17,112,]),'while':([10,95,],[18,102,]),'if':([10,95,],[19,103,]),'inputoutput':([10,104,],[22,22,]),'parameters':([12,54,],[31,72,]),'iodata':([47,],[63,]),'varname':([50,79,],[66,93,]),'bool':([51,52,81,90,],[69,71,96,99,]),'percenttype':([64,],[75,]),'boolop':([69,70,71,96,97,98,99,],[81,90,81,81,90,90,81,]),'block':([80,91,107,],[94,100,115,]),'bcode':([95,],[104,]),'else':([100,],[106,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> begin","S'",1,None,None,None),
  ('begin -> function','begin',1,'p_begin','parse2.py',169),
  ('function -> function funcname OPENCURL code RETURN expression EOL CLOSECURL','function',8,'p_function','parse2.py',175),
  ('function -> empty','function',1,'p_function','parse2.py',176),
  ('funcname -> datatype FNAME OPENPAR parameters CLOSEPAR','funcname',5,'p_funcname','parse2.py',186),
  ('parameters -> vardeclare COMMA parameters','parameters',3,'p_parameters','parse2.py',192),
  ('parameters -> vardeclare','parameters',1,'p_parameters','parse2.py',193),
  ('parameters -> empty','parameters',1,'p_parameters','parse2.py',194),
  ('code -> code vardeclare EOL','code',3,'p_code','parse2.py',203),
  ('code -> code varassign EOL','code',3,'p_code','parse2.py',204),
  ('code -> code io EOL','code',3,'p_code','parse2.py',205),
  ('code -> code expression EOL','code',3,'p_code','parse2.py',206),
  ('code -> code while','code',2,'p_code','parse2.py',207),
  ('code -> code if','code',2,'p_code','parse2.py',208),
  ('code -> empty','code',1,'p_code','parse2.py',209),
  ('io -> inputoutput OPENPAR iodata CLOSEPAR','io',4,'p_io','parse2.py',216),
  ('io -> inputoutput error','io',2,'p_io_error','parse2.py',220),
  ('inputoutput -> INPUT','inputoutput',1,'p_inputoutput','parse2.py',224),
  ('inputoutput -> OUTPUT','inputoutput',1,'p_inputoutput','parse2.py',225),
  ('iodata -> QUOTEMARK percenttype QUOTEMARK COMMA AND NAME','iodata',6,'p_iodata','parse2.py',230),
  ('percenttype -> PERCENTFLOAT','percenttype',1,'p_percenttype','parse2.py',235),
  ('percenttype -> PERCENTINT','percenttype',1,'p_percenttype','parse2.py',236),
  ('datatype -> TYPEFLOAT','datatype',1,'p_datatype','parse2.py',241),
  ('datatype -> TYPEINT','datatype',1,'p_datatype','parse2.py',242),
  ('bool -> expression boolop expression','bool',3,'p_bool','parse2.py',248),
  ('bool -> bool boolop bool','bool',3,'p_bool','parse2.py',249),
  ('bool -> expression boolop bool','bool',3,'p_bool','parse2.py',250),
  ('bool -> bool boolop expression','bool',3,'p_bool','parse2.py',251),
  ('boolop -> EQ','boolop',1,'p_boolop','parse2.py',257),
  ('boolop -> NEQ','boolop',1,'p_boolop','parse2.py',258),
  ('boolop -> LSS','boolop',1,'p_boolop','parse2.py',259),
  ('boolop -> GTR','boolop',1,'p_boolop','parse2.py',260),
  ('boolop -> LEQ','boolop',1,'p_boolop','parse2.py',261),
  ('boolop -> GEQ','boolop',1,'p_boolop','parse2.py',262),
  ('boolop -> AND','boolop',1,'p_boolop','parse2.py',263),
  ('boolop -> OR','boolop',1,'p_boolop','parse2.py',264),
  ('if -> IF OPENPAR bool CLOSEPAR block else','if',6,'p_if','parse2.py',269),
  ('if -> IF OPENPAR bool CLOSEPAR block','if',5,'p_if','parse2.py',270),
  ('else -> ELSE block','else',2,'p_else','parse2.py',279),
  ('while -> WHILE OPENPAR bool CLOSEPAR block','while',5,'p_while','parse2.py',285),
  ('block -> OPENCURL while CLOSECURL','block',3,'p_block','parse2.py',292),
  ('block -> OPENCURL if CLOSECURL','block',3,'p_block','parse2.py',293),
  ('block -> OPENCURL bcode CLOSECURL','block',3,'p_block','parse2.py',294),
  ('bcode -> bcode io EOL','bcode',3,'p_bcode','parse2.py',300),
  ('bcode -> bcode expression EOL','bcode',3,'p_bcode','parse2.py',301),
  ('bcode -> bcode BREAK EOL','bcode',3,'p_bcode','parse2.py',302),
  ('bcode -> empty','bcode',1,'p_bcode','parse2.py',303),
  ('expression -> expression EXP expression','expression',3,'p_expression_math','parse2.py',311),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_math','parse2.py',312),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_math','parse2.py',313),
  ('expression -> expression PLUS expression','expression',3,'p_expression_math','parse2.py',314),
  ('expression -> expression MINUS expression','expression',3,'p_expression_math','parse2.py',315),
  ('expression -> OPENPAR expression CLOSEPAR','expression',3,'p_expression_math','parse2.py',316),
  ('vardeclare -> datatype NAME','vardeclare',2,'p_vardeclare','parse2.py',332),
  ('varassign -> NAME EQUALS expression','varassign',3,'p_varassign','parse2.py',340),
  ('varassign -> NAME EQUALS NAME','varassign',3,'p_varassign','parse2.py',341),
  ('expression -> FNAME OPENPAR varname CLOSEPAR','expression',4,'p_expression_function','parse2.py',353),
  ('varname -> NAME COMMA varname','varname',3,'p_varname','parse2.py',359),
  ('varname -> NAME','varname',1,'p_varname','parse2.py',360),
  ('varname -> empty','varname',1,'p_varname','parse2.py',361),
  ('expression -> INT','expression',1,'p_expression_int_float','parse2.py',378),
  ('expression -> FLOAT','expression',1,'p_expression_int_float','parse2.py',379),
  ('expression -> NAME','expression',1,'p_expression_int_float','parse2.py',380),
  ('empty -> <empty>','empty',0,'p_empty','parse2.py',386),
]
