
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDEleftEXPAND CLOSEPAR COMMA COMMENT DIVIDE EOL EQUALS EXP FLOAT FUNCNAME INPUT INT MINUS MULTIPLY NAME OPENPAR OUTPUT PERCENTFLOAT PERCENTINT PLUS QUOTEMARK RETURN TYPEFLOAT TYPEINT\n    code : vardeclare EOL \n        | io EOL\n        | expression EOL\n        | empty\n    \n    io : inputoutput OPENPAR iodata CLOSEPAR\n    io : inputoutput error \n    inputoutput : INPUT\n                | OUTPUT\n    \n    iodata : QUOTEMARK percenttype QUOTEMARK COMMA AND NAME\n    \n    percenttype : PERCENTFLOAT\n                | PERCENTINT\n    \n    datatype : TYPEFLOAT\n            | TYPEINT\n    \n    expression : expression EXP expression\n                | expression  MULTIPLY expression\n                | expression DIVIDE expression\n                | expression PLUS expression\n                | expression MINUS expression\n    \n    expression : OPENPAR expression CLOSEPAR\n    \n    vardeclare : datatype NAME\n    \n    expression : NAME EQUALS expression\n    \n    expression  :   INT\n                | FLOAT\n    \n    empty : \n    '
    
_lr_action_items = {'OPENPAR':([0,8,9,14,15,19,20,21,22,23,25,],[9,26,9,-7,-8,9,9,9,9,9,9,]),'NAME':([0,6,9,12,13,19,20,21,22,23,25,44,],[7,24,7,-12,-13,7,7,7,7,7,7,45,]),'INT':([0,9,19,20,21,22,23,25,],[10,10,10,10,10,10,10,10,]),'FLOAT':([0,9,19,20,21,22,23,25,],[11,11,11,11,11,11,11,11,]),'$end':([0,1,5,16,17,18,],[-24,0,-4,-1,-2,-3,]),'TYPEFLOAT':([0,],[12,]),'TYPEINT':([0,],[13,]),'INPUT':([0,],[14,]),'OUTPUT':([0,],[15,]),'EOL':([2,3,4,10,11,24,27,29,30,31,32,33,34,37,38,],[16,17,18,-22,-23,-20,-6,-14,-15,-16,-17,-18,-21,-19,-5,]),'EXP':([4,10,11,28,29,30,31,32,33,34,37,],[19,-22,-23,19,-14,19,19,19,19,19,-19,]),'MULTIPLY':([4,10,11,28,29,30,31,32,33,34,37,],[20,-22,-23,20,-14,-15,-16,20,20,20,-19,]),'DIVIDE':([4,10,11,28,29,30,31,32,33,34,37,],[21,-22,-23,21,-14,-15,-16,21,21,21,-19,]),'PLUS':([4,10,11,28,29,30,31,32,33,34,37,],[22,-22,-23,22,-14,-15,-16,-17,-18,22,-19,]),'MINUS':([4,10,11,28,29,30,31,32,33,34,37,],[23,-22,-23,23,-14,-15,-16,-17,-18,23,-19,]),'EQUALS':([7,],[25,]),'error':([8,14,15,],[27,-7,-8,]),'CLOSEPAR':([10,11,28,29,30,31,32,33,34,35,37,45,],[-22,-23,37,-14,-15,-16,-17,-18,-21,38,-19,-9,]),'QUOTEMARK':([26,39,40,41,],[36,42,-10,-11,]),'PERCENTFLOAT':([36,],[40,]),'PERCENTINT':([36,],[41,]),'COMMA':([42,],[43,]),'AND':([43,],[44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'code':([0,],[1,]),'vardeclare':([0,],[2,]),'io':([0,],[3,]),'expression':([0,9,19,20,21,22,23,25,],[4,28,29,30,31,32,33,34,]),'empty':([0,],[5,]),'datatype':([0,],[6,]),'inputoutput':([0,],[8,]),'iodata':([26,],[35,]),'percenttype':([36,],[39,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> vardeclare EOL','code',2,'p_code','parse.py',94),
  ('code -> io EOL','code',2,'p_code','parse.py',95),
  ('code -> expression EOL','code',2,'p_code','parse.py',96),
  ('code -> empty','code',1,'p_code','parse.py',97),
  ('io -> inputoutput OPENPAR iodata CLOSEPAR','io',4,'p_io','parse.py',104),
  ('io -> inputoutput error','io',2,'p_io_error','parse.py',108),
  ('inputoutput -> INPUT','inputoutput',1,'p_inputoutput','parse.py',112),
  ('inputoutput -> OUTPUT','inputoutput',1,'p_inputoutput','parse.py',113),
  ('iodata -> QUOTEMARK percenttype QUOTEMARK COMMA AND NAME','iodata',6,'p_iodata','parse.py',118),
  ('percenttype -> PERCENTFLOAT','percenttype',1,'p_percenttype','parse.py',123),
  ('percenttype -> PERCENTINT','percenttype',1,'p_percenttype','parse.py',124),
  ('datatype -> TYPEFLOAT','datatype',1,'p_datatype','parse.py',129),
  ('datatype -> TYPEINT','datatype',1,'p_datatype','parse.py',130),
  ('expression -> expression EXP expression','expression',3,'p_expression_math','parse.py',135),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_math','parse.py',136),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_math','parse.py',137),
  ('expression -> expression PLUS expression','expression',3,'p_expression_math','parse.py',138),
  ('expression -> expression MINUS expression','expression',3,'p_expression_math','parse.py',139),
  ('expression -> OPENPAR expression CLOSEPAR','expression',3,'p_expression_par','parse.py',144),
  ('vardeclare -> datatype NAME','vardeclare',2,'p_vardeclare','parse.py',149),
  ('expression -> NAME EQUALS expression','expression',3,'p_expression_var_assign','parse.py',157),
  ('expression -> INT','expression',1,'p_expression_int_float','parse.py',172),
  ('expression -> FLOAT','expression',1,'p_expression_int_float','parse.py',173),
  ('empty -> <empty>','empty',0,'p_empty','parse.py',179),
]
