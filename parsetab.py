
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightNOTleftANDORleftEQNEQLSSGTRLEQGEQleftPLUSMINUSleftMULTIPLYDIVIDEleftMODULOleftEXPAMP AND BREAK CLOSECURL CLOSEPAR COMMA COMMENT DIVIDE ELSE EOL EQ EQUALS EXP FLOAT FNAME GEQ GTR IF INPUT INT LEQ LSS MINUS MODULO MULTIPLY NAME NEQ NEWLINE NOT OPENCURL OPENPAR OR OUTPUT PERCENTFLOAT PERCENTINT PLUS QUOTEMARK RETURN TYPEFLOAT TYPEINT WHILE\n    begin : function\n    \n    function : function funcname OPENCURL code return EOL CLOSECURL\n             | empty\n    \n    function : function funcname error\n             | function funcname OPENCURL code error\n             | function funcname OPENCURL code return error\n             | function funcname OPENCURL code return EOL error\n    \n    funcname : datatype FNAME OPENPAR parameters CLOSEPAR \n    \n    funcname : datatype error \n             | datatype FNAME error \n             | datatype FNAME parameters error\n    \n    \n    parameters : vardeclare COMMA parameters\n                | vardeclare\n                | empty\n    \n    code : code vardeclare EOL \n        | code varassign EOL\n        | code io EOL\n        | code expression EOL\n        | code while \n        | code if\n        | code return EOL\n        | empty\n    \n    code : code vardeclare error \n        | code varassign error\n        | code io error\n        | code expression error\n    \n    return : RETURN expression\n    \n    return : RETURN error\n    \n    io : INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA AMP NAME CLOSEPAR\n        | OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA NAME CLOSEPAR\n    \n    io : INPUT error\n       | OUTPUT error\n       | INPUT OPENPAR error\n       | OUTPUT OPENPAR error\n       | INPUT OPENPAR QUOTEMARK error\n       | OUTPUT OPENPAR QUOTEMARK error\n       | INPUT OPENPAR QUOTEMARK percenttype error\n       | OUTPUT OPENPAR QUOTEMARK percenttype error\n       | INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK error\n       | OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK error\n       | INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA error\n       | OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA error  \n    \n    percenttype : PERCENTFLOAT\n                | PERCENTINT\n    \n    datatype : TYPEFLOAT\n             | TYPEINT\n    \n    bool : expression boolop expression\n         | bool boolop bool\n         | expression boolop bool\n         | bool boolop expression\n         | NOT bool\n         | OPENPAR bool CLOSEPAR\n    \n    bool : expression error\n         | bool error\n         | expression boolop error\n         | bool boolop error\n         | NOT error\n    \n    boolop : EQ\n           | NEQ\n           | LSS\n           | GTR\n           | LEQ\n           | GEQ\n           | AND\n           | OR\n    \n    if : IF OPENPAR bool CLOSEPAR block else\n       | IF OPENPAR bool CLOSEPAR block \n    \n    if : IF error\n    \n    else : ELSE block\n    \n    while : WHILE OPENPAR bool CLOSEPAR block\n\n    \n    while : WHILE error\n    \n    block : OPENCURL bcode CLOSECURL\n    \n    block : error\n    \n    bcode : bcode io EOL\n        | bcode varassign EOL\n        | bcode while\n        | bcode if\n        | bcode expression EOL\n        | bcode BREAK EOL\n        | bcode return EOL\n        | empty\n    \n    bcode : bcode BREAK error \n          | bcode varassign error\n          | bcode io error\n          | bcode expression error\n          | bcode return error\n    \n    expression :  expression oper expression\n               |  OPENPAR expression CLOSEPAR\n    \n    expression : expression oper error\n    \n    expression  : INT\n                | FLOAT\n                | NAME\n    \n    expression : FNAME OPENPAR varname CLOSEPAR \n    \n    expression : FNAME error\n               | FNAME OPENPAR varname error\n    \n    oper :  EXP\n        | MODULO\n         |  MULTIPLY\n         |  DIVIDE\n         |  PLUS\n         |  MINUS\n         |  EQUALS \n    \n    vardeclare : datatype NAME\n    \n    vardeclare : datatype error\n    \n    varassign : NAME EQUALS expression\n    \n    varassign : NAME EQUALS error\n    \n    varname : NAME COMMA varname\n            | NAME\n            | empty\n    \n    varname : error\n    \n    empty : \n    '
    
_lr_action_items = {'TYPEFLOAT':([0,2,3,8,9,10,12,13,15,21,26,27,42,43,44,45,46,47,48,49,50,51,52,73,75,78,79,131,133,141,149,155,163,],[-111,6,-3,-111,-4,6,6,-22,6,-5,-19,-20,6,-21,-6,-15,-23,-16,-24,-17,-25,-18,-26,-71,-68,-2,-7,-70,-73,-67,-66,-72,-69,]),'TYPEINT':([0,2,3,8,9,10,12,13,15,21,26,27,42,43,44,45,46,47,48,49,50,51,52,73,75,78,79,131,133,141,149,155,163,],[-111,7,-3,-111,-4,7,7,-22,7,-5,-19,-20,7,-21,-6,-15,-23,-16,-24,-17,-25,-18,-26,-71,-68,-2,-7,-70,-73,-67,-66,-72,-69,]),'$end':([0,1,2,3,9,21,44,78,79,],[-111,0,-1,-3,-4,-5,-6,-2,-7,]),'OPENCURL':([4,11,17,41,76,109,124,150,],[8,-9,-10,-11,-8,132,132,132,]),'error':([4,5,6,7,8,10,11,12,13,14,16,17,18,19,20,22,23,24,25,26,27,28,29,30,32,33,34,35,36,37,38,39,41,42,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,73,75,76,77,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,134,135,136,137,138,139,141,142,143,144,145,148,149,150,152,154,155,156,157,160,161,162,163,165,176,],[9,11,-45,-46,-111,17,-9,21,-22,39,41,-10,-13,-14,44,46,48,50,52,-19,-20,62,-92,66,69,-90,-91,71,73,75,-103,-104,-11,-111,79,-15,-23,-16,-24,-17,-25,-18,-26,81,-96,-97,-98,-99,-100,-101,-102,-27,-28,-92,83,85,-31,88,-32,90,-94,-71,-68,-8,-12,-87,-89,-105,-106,99,-33,-88,103,-34,105,-110,-108,-109,111,121,123,111,126,-35,-43,-44,128,-36,-93,-95,90,111,121,133,136,-54,-58,-59,-60,-61,-62,-63,-64,-65,139,-53,-51,-57,133,143,-37,145,-38,-107,-52,-70,-73,111,121,-56,121,111,-55,-67,152,-39,154,-40,121,-66,133,-41,-42,-72,167,169,171,173,175,-69,-30,-29,]),'FNAME':([5,6,7,8,12,13,26,27,28,31,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,64,72,73,74,75,93,96,110,112,113,114,115,116,117,118,119,120,131,132,133,140,141,146,147,149,155,158,159,163,166,167,168,169,170,171,172,173,174,175,],[10,-45,-46,-111,35,-22,-19,-20,35,35,-21,-15,-23,-16,-24,-17,-25,-18,-26,35,-96,-97,-98,-99,-100,-101,-102,35,35,-71,35,-68,35,35,35,-58,-59,-60,-61,-62,-63,-64,-65,35,-70,-111,-73,35,-67,35,-81,-66,-72,-76,-77,-69,-74,-84,-75,-83,-78,-85,-79,-82,-80,-86,]),'NAME':([6,7,8,12,13,14,26,27,28,31,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,64,70,72,73,74,75,93,96,106,110,112,113,114,115,116,117,118,119,120,131,132,133,140,141,144,146,147,149,151,155,158,159,163,166,167,168,169,170,171,172,173,174,175,],[-45,-46,-111,29,-22,38,-19,-20,63,63,-21,-15,-23,-16,-24,-17,-25,-18,-26,63,-96,-97,-98,-99,-100,-101,-102,63,91,63,-71,63,-68,63,63,91,63,-58,-59,-60,-61,-62,-63,-64,-65,63,-70,-111,-73,63,-67,153,29,-81,-66,164,-72,-76,-77,-69,-74,-84,-75,-83,-78,-85,-79,-82,-80,-86,]),'RETURN':([8,12,13,26,27,43,45,46,47,48,49,50,51,52,73,75,131,132,133,141,146,147,149,155,158,159,163,166,167,168,169,170,171,172,173,174,175,],[-111,28,-22,-19,-20,-21,-15,-23,-16,-24,-17,-25,-18,-26,-71,-68,-70,-111,-73,-67,28,-81,-66,-72,-76,-77,-69,-74,-84,-75,-83,-78,-85,-79,-82,-80,-86,]),'INPUT':([8,12,13,26,27,43,45,46,47,48,49,50,51,52,73,75,131,132,133,141,146,147,149,155,158,159,163,166,167,168,169,170,171,172,173,174,175,],[-111,30,-22,-19,-20,-21,-15,-23,-16,-24,-17,-25,-18,-26,-71,-68,-70,-111,-73,-67,30,-81,-66,-72,-76,-77,-69,-74,-84,-75,-83,-78,-85,-79,-82,-80,-86,]),'OUTPUT':([8,12,13,26,27,43,45,46,47,48,49,50,51,52,73,75,131,132,133,141,146,147,149,155,158,159,163,166,167,168,169,170,171,172,173,174,175,],[-111,32,-22,-19,-20,-21,-15,-23,-16,-24,-17,-25,-18,-26,-71,-68,-70,-111,-73,-67,32,-81,-66,-72,-76,-77,-69,-74,-84,-75,-83,-78,-85,-79,-82,-80,-86,]),'OPENPAR':([8,10,12,13,26,27,28,30,31,32,35,36,37,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,64,72,73,74,75,93,96,110,112,113,114,115,116,117,118,119,120,131,132,133,140,141,146,147,149,155,158,159,163,166,167,168,169,170,171,172,173,174,175,],[-111,15,31,-22,-19,-20,31,65,31,68,70,72,74,-21,-15,-23,-16,-24,-17,-25,-18,-26,31,-96,-97,-98,-99,-100,-101,-102,31,93,-71,93,-68,93,93,93,-58,-59,-60,-61,-62,-63,-64,-65,140,-70,-111,-73,140,-67,31,-81,-66,-72,-76,-77,-69,-74,-84,-75,-83,-78,-85,-79,-82,-80,-86,]),'INT':([8,12,13,26,27,28,31,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,64,72,73,74,75,93,96,110,112,113,114,115,116,117,118,119,120,131,132,133,140,141,146,147,149,155,158,159,163,166,167,168,169,170,171,172,173,174,175,],[-111,33,-22,-19,-20,33,33,-21,-15,-23,-16,-24,-17,-25,-18,-26,33,-96,-97,-98,-99,-100,-101,-102,33,33,-71,33,-68,33,33,33,-58,-59,-60,-61,-62,-63,-64,-65,33,-70,-111,-73,33,-67,33,-81,-66,-72,-76,-77,-69,-74,-84,-75,-83,-78,-85,-79,-82,-80,-86,]),'FLOAT':([8,12,13,26,27,28,31,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,64,72,73,74,75,93,96,110,112,113,114,115,116,117,118,119,120,131,132,133,140,141,146,147,149,155,158,159,163,166,167,168,169,170,171,172,173,174,175,],[-111,34,-22,-19,-20,34,34,-21,-15,-23,-16,-24,-17,-25,-18,-26,34,-96,-97,-98,-99,-100,-101,-102,34,34,-71,34,-68,34,34,34,-58,-59,-60,-61,-62,-63,-64,-65,34,-70,-111,-73,34,-67,34,-81,-66,-72,-76,-77,-69,-74,-84,-75,-83,-78,-85,-79,-82,-80,-86,]),'WHILE':([8,12,13,26,27,43,45,46,47,48,49,50,51,52,73,75,131,132,133,141,146,147,149,155,158,159,163,166,167,168,169,170,171,172,173,174,175,],[-111,36,-22,-19,-20,-21,-15,-23,-16,-24,-17,-25,-18,-26,-71,-68,-70,-111,-73,-67,36,-81,-66,-72,-76,-77,-69,-74,-84,-75,-83,-78,-85,-79,-82,-80,-86,]),'IF':([8,12,13,26,27,43,45,46,47,48,49,50,51,52,73,75,131,132,133,141,146,147,149,155,158,159,163,166,167,168,169,170,171,172,173,174,175,],[-111,37,-22,-19,-20,-21,-15,-23,-16,-24,-17,-25,-18,-26,-71,-68,-70,-111,-73,-67,37,-81,-66,-72,-76,-77,-69,-74,-84,-75,-83,-78,-85,-79,-82,-80,-86,]),'CLOSEPAR':([15,18,19,33,34,38,39,40,42,63,67,70,71,77,80,81,86,89,90,91,92,94,97,104,105,106,107,108,111,121,122,123,129,130,134,135,136,137,138,139,148,153,164,],[-111,-13,-14,-90,-91,-103,-104,76,-111,-92,86,-111,-94,-12,-87,-89,-88,104,-110,-108,-109,109,124,-93,-95,-111,130,86,-54,-53,-51,-57,-107,-52,-48,-50,-56,-47,-49,-55,86,165,176,]),'COMMA':([18,38,39,91,125,127,],[42,-103,-104,106,142,144,]),'EOL':([20,22,23,24,25,29,33,34,38,39,61,62,63,66,69,71,80,81,82,83,85,86,88,99,103,104,105,126,128,143,145,152,154,156,157,160,161,162,165,176,],[43,45,47,49,51,-92,-90,-91,-103,-104,-27,-28,-92,-31,-32,-94,-87,-89,-105,-106,-33,-88,-34,-35,-36,-93,-95,-37,-38,-39,-40,-41,-42,166,168,170,172,174,-30,-29,]),'EXP':([25,29,33,34,61,63,67,71,80,81,82,86,95,104,105,108,135,137,148,160,],[54,-92,-90,-91,54,-92,54,-94,54,-89,54,-88,54,-93,-95,54,54,54,54,54,]),'MODULO':([25,29,33,34,61,63,67,71,80,81,82,86,95,104,105,108,135,137,148,160,],[55,-92,-90,-91,55,-92,55,-94,55,-89,55,-88,55,-93,-95,55,55,55,55,55,]),'MULTIPLY':([25,29,33,34,61,63,67,71,80,81,82,86,95,104,105,108,135,137,148,160,],[56,-92,-90,-91,56,-92,56,-94,56,-89,56,-88,56,-93,-95,56,56,56,56,56,]),'DIVIDE':([25,29,33,34,61,63,67,71,80,81,82,86,95,104,105,108,135,137,148,160,],[57,-92,-90,-91,57,-92,57,-94,57,-89,57,-88,57,-93,-95,57,57,57,57,57,]),'PLUS':([25,29,33,34,61,63,67,71,80,81,82,86,95,104,105,108,135,137,148,160,],[58,-92,-90,-91,58,-92,58,-94,58,-89,58,-88,58,-93,-95,58,58,58,58,58,]),'MINUS':([25,29,33,34,61,63,67,71,80,81,82,86,95,104,105,108,135,137,148,160,],[59,-92,-90,-91,59,-92,59,-94,59,-89,59,-88,59,-93,-95,59,59,59,59,59,]),'EQUALS':([25,29,33,34,61,63,67,71,80,81,82,86,95,104,105,108,135,137,148,160,],[60,64,-90,-91,60,-92,60,-94,60,-89,60,-88,60,-93,-95,60,60,60,60,60,]),'EQ':([33,34,63,71,80,81,86,94,95,97,104,105,107,108,111,121,122,123,130,134,135,136,137,138,139,148,],[-90,-91,-92,-94,-87,-89,-88,112,112,112,-93,-95,112,112,-54,-53,112,-57,-52,112,112,-56,112,112,-55,112,]),'NEQ':([33,34,63,71,80,81,86,94,95,97,104,105,107,108,111,121,122,123,130,134,135,136,137,138,139,148,],[-90,-91,-92,-94,-87,-89,-88,113,113,113,-93,-95,113,113,-54,-53,113,-57,-52,113,113,-56,113,113,-55,113,]),'LSS':([33,34,63,71,80,81,86,94,95,97,104,105,107,108,111,121,122,123,130,134,135,136,137,138,139,148,],[-90,-91,-92,-94,-87,-89,-88,114,114,114,-93,-95,114,114,-54,-53,114,-57,-52,114,114,-56,114,114,-55,114,]),'GTR':([33,34,63,71,80,81,86,94,95,97,104,105,107,108,111,121,122,123,130,134,135,136,137,138,139,148,],[-90,-91,-92,-94,-87,-89,-88,115,115,115,-93,-95,115,115,-54,-53,115,-57,-52,115,115,-56,115,115,-55,115,]),'LEQ':([33,34,63,71,80,81,86,94,95,97,104,105,107,108,111,121,122,123,130,134,135,136,137,138,139,148,],[-90,-91,-92,-94,-87,-89,-88,116,116,116,-93,-95,116,116,-54,-53,116,-57,-52,116,116,-56,116,116,-55,116,]),'GEQ':([33,34,63,71,80,81,86,94,95,97,104,105,107,108,111,121,122,123,130,134,135,136,137,138,139,148,],[-90,-91,-92,-94,-87,-89,-88,117,117,117,-93,-95,117,117,-54,-53,117,-57,-52,117,117,-56,117,117,-55,117,]),'AND':([33,34,63,71,80,81,86,94,95,97,104,105,107,108,111,121,122,123,130,134,135,136,137,138,139,148,],[-90,-91,-92,-94,-87,-89,-88,118,118,118,-93,-95,118,118,-54,-53,118,-57,-52,118,118,-56,118,118,-55,118,]),'OR':([33,34,63,71,80,81,86,94,95,97,104,105,107,108,111,121,122,123,130,134,135,136,137,138,139,148,],[-90,-91,-92,-94,-87,-89,-88,119,119,119,-93,-95,119,119,-54,-53,119,-57,-52,119,119,-56,119,119,-55,119,]),'CLOSECURL':([43,73,75,131,132,133,141,146,147,149,155,158,159,163,166,167,168,169,170,171,172,173,174,175,],[78,-71,-68,-70,-111,-73,-67,155,-81,-66,-72,-76,-77,-69,-74,-84,-75,-83,-78,-85,-79,-82,-80,-86,]),'QUOTEMARK':([65,68,98,100,101,102,],[84,87,125,-43,-44,127,]),'NOT':([72,74,93,96,110,112,113,114,115,116,117,118,119,120,140,],[96,96,96,96,96,-58,-59,-60,-61,-62,-63,-64,-65,96,96,]),'BREAK':([73,75,131,132,133,141,146,147,149,155,158,159,163,166,167,168,169,170,171,172,173,174,175,],[-71,-68,-70,-111,-73,-67,161,-81,-66,-72,-76,-77,-69,-74,-84,-75,-83,-78,-85,-79,-82,-80,-86,]),'PERCENTFLOAT':([84,87,],[100,100,]),'PERCENTINT':([84,87,],[101,101,]),'ELSE':([133,141,155,],[-73,150,-72,]),'AMP':([142,],[151,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'begin':([0,],[1,]),'function':([0,],[2,]),'empty':([0,8,10,15,42,70,106,132,],[3,13,19,19,19,92,92,147,]),'funcname':([2,],[4,]),'datatype':([2,10,12,15,42,],[5,14,14,14,14,]),'code':([8,],[12,]),'parameters':([10,15,42,],[16,40,77,]),'vardeclare':([10,12,15,42,],[18,22,18,18,]),'return':([12,146,],[20,162,]),'varassign':([12,146,],[23,157,]),'io':([12,146,],[24,156,]),'expression':([12,28,31,53,64,72,74,93,96,110,120,140,146,],[25,61,67,80,82,95,95,108,95,135,137,148,160,]),'while':([12,146,],[26,158,]),'if':([12,146,],[27,159,]),'oper':([25,61,67,80,82,95,108,135,137,148,160,],[53,53,53,53,53,53,53,53,53,53,53,]),'varname':([70,106,],[89,129,]),'bool':([72,74,93,96,110,120,140,],[94,97,107,122,134,138,107,]),'percenttype':([84,87,],[98,102,]),'boolop':([94,95,97,107,108,122,134,135,137,138,148,],[110,120,110,110,120,110,110,120,120,110,120,]),'block':([109,124,150,],[131,141,163,]),'bcode':([132,],[146,]),'else':([141,],[149,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> begin","S'",1,None,None,None),
  ('begin -> function','begin',1,'p_begin','parse.py',158),
  ('function -> function funcname OPENCURL code return EOL CLOSECURL','function',7,'p_function','parse.py',166),
  ('function -> empty','function',1,'p_function','parse.py',167),
  ('function -> function funcname error','function',3,'p_e1','parse.py',180),
  ('function -> function funcname OPENCURL code error','function',5,'p_e1','parse.py',181),
  ('function -> function funcname OPENCURL code return error','function',6,'p_e1','parse.py',182),
  ('function -> function funcname OPENCURL code return EOL error','function',7,'p_e1','parse.py',183),
  ('funcname -> datatype FNAME OPENPAR parameters CLOSEPAR','funcname',5,'p_funcname','parse.py',196),
  ('funcname -> datatype error','funcname',2,'p_e2','parse.py',206),
  ('funcname -> datatype FNAME error','funcname',3,'p_e2','parse.py',207),
  ('funcname -> datatype FNAME parameters error','funcname',4,'p_e2','parse.py',208),
  ('parameters -> vardeclare COMMA parameters','parameters',3,'p_parameters','parse.py',220),
  ('parameters -> vardeclare','parameters',1,'p_parameters','parse.py',221),
  ('parameters -> empty','parameters',1,'p_parameters','parse.py',222),
  ('code -> code vardeclare EOL','code',3,'p_code','parse.py',241),
  ('code -> code varassign EOL','code',3,'p_code','parse.py',242),
  ('code -> code io EOL','code',3,'p_code','parse.py',243),
  ('code -> code expression EOL','code',3,'p_code','parse.py',244),
  ('code -> code while','code',2,'p_code','parse.py',245),
  ('code -> code if','code',2,'p_code','parse.py',246),
  ('code -> code return EOL','code',3,'p_code','parse.py',247),
  ('code -> empty','code',1,'p_code','parse.py',248),
  ('code -> code vardeclare error','code',3,'p_e3','parse.py',255),
  ('code -> code varassign error','code',3,'p_e3','parse.py',256),
  ('code -> code io error','code',3,'p_e3','parse.py',257),
  ('code -> code expression error','code',3,'p_e3','parse.py',258),
  ('return -> RETURN expression','return',2,'p_return','parse.py',264),
  ('return -> RETURN error','return',2,'p_e4','parse.py',270),
  ('io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA AMP NAME CLOSEPAR','io',9,'p_io','parse.py',276),
  ('io -> OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA NAME CLOSEPAR','io',8,'p_io','parse.py',277),
  ('io -> INPUT error','io',2,'p_e5','parse.py',286),
  ('io -> OUTPUT error','io',2,'p_e5','parse.py',287),
  ('io -> INPUT OPENPAR error','io',3,'p_e5','parse.py',288),
  ('io -> OUTPUT OPENPAR error','io',3,'p_e5','parse.py',289),
  ('io -> INPUT OPENPAR QUOTEMARK error','io',4,'p_e5','parse.py',290),
  ('io -> OUTPUT OPENPAR QUOTEMARK error','io',4,'p_e5','parse.py',291),
  ('io -> INPUT OPENPAR QUOTEMARK percenttype error','io',5,'p_e5','parse.py',292),
  ('io -> OUTPUT OPENPAR QUOTEMARK percenttype error','io',5,'p_e5','parse.py',293),
  ('io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK error','io',6,'p_e5','parse.py',294),
  ('io -> OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK error','io',6,'p_e5','parse.py',295),
  ('io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA error','io',7,'p_e5','parse.py',296),
  ('io -> OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA error','io',7,'p_e5','parse.py',297),
  ('percenttype -> PERCENTFLOAT','percenttype',1,'p_percenttype','parse.py',312),
  ('percenttype -> PERCENTINT','percenttype',1,'p_percenttype','parse.py',313),
  ('datatype -> TYPEFLOAT','datatype',1,'p_datatype','parse.py',318),
  ('datatype -> TYPEINT','datatype',1,'p_datatype','parse.py',319),
  ('bool -> expression boolop expression','bool',3,'p_bool','parse.py',325),
  ('bool -> bool boolop bool','bool',3,'p_bool','parse.py',326),
  ('bool -> expression boolop bool','bool',3,'p_bool','parse.py',327),
  ('bool -> bool boolop expression','bool',3,'p_bool','parse.py',328),
  ('bool -> NOT bool','bool',2,'p_bool','parse.py',329),
  ('bool -> OPENPAR bool CLOSEPAR','bool',3,'p_bool','parse.py',330),
  ('bool -> expression error','bool',2,'p_e6','parse.py',339),
  ('bool -> bool error','bool',2,'p_e6','parse.py',340),
  ('bool -> expression boolop error','bool',3,'p_e6','parse.py',341),
  ('bool -> bool boolop error','bool',3,'p_e6','parse.py',342),
  ('bool -> NOT error','bool',2,'p_e6','parse.py',343),
  ('boolop -> EQ','boolop',1,'p_boolop','parse.py',349),
  ('boolop -> NEQ','boolop',1,'p_boolop','parse.py',350),
  ('boolop -> LSS','boolop',1,'p_boolop','parse.py',351),
  ('boolop -> GTR','boolop',1,'p_boolop','parse.py',352),
  ('boolop -> LEQ','boolop',1,'p_boolop','parse.py',353),
  ('boolop -> GEQ','boolop',1,'p_boolop','parse.py',354),
  ('boolop -> AND','boolop',1,'p_boolop','parse.py',355),
  ('boolop -> OR','boolop',1,'p_boolop','parse.py',356),
  ('if -> IF OPENPAR bool CLOSEPAR block else','if',6,'p_if','parse.py',361),
  ('if -> IF OPENPAR bool CLOSEPAR block','if',5,'p_if','parse.py',362),
  ('if -> IF error','if',2,'p_e7','parse.py',371),
  ('else -> ELSE block','else',2,'p_else','parse.py',377),
  ('while -> WHILE OPENPAR bool CLOSEPAR block','while',5,'p_while','parse.py',383),
  ('while -> WHILE error','while',2,'p_e8','parse.py',390),
  ('block -> OPENCURL bcode CLOSECURL','block',3,'p_block','parse.py',396),
  ('block -> error','block',1,'p_e9','parse.py',402),
  ('bcode -> bcode io EOL','bcode',3,'p_bcode','parse.py',409),
  ('bcode -> bcode varassign EOL','bcode',3,'p_bcode','parse.py',410),
  ('bcode -> bcode while','bcode',2,'p_bcode','parse.py',411),
  ('bcode -> bcode if','bcode',2,'p_bcode','parse.py',412),
  ('bcode -> bcode expression EOL','bcode',3,'p_bcode','parse.py',413),
  ('bcode -> bcode BREAK EOL','bcode',3,'p_bcode','parse.py',414),
  ('bcode -> bcode return EOL','bcode',3,'p_bcode','parse.py',415),
  ('bcode -> empty','bcode',1,'p_bcode','parse.py',416),
  ('bcode -> bcode BREAK error','bcode',3,'p_e10','parse.py',425),
  ('bcode -> bcode varassign error','bcode',3,'p_e10','parse.py',426),
  ('bcode -> bcode io error','bcode',3,'p_e10','parse.py',427),
  ('bcode -> bcode expression error','bcode',3,'p_e10','parse.py',428),
  ('bcode -> bcode return error','bcode',3,'p_e10','parse.py',429),
  ('expression -> expression oper expression','expression',3,'p_expression_math','parse.py',435),
  ('expression -> OPENPAR expression CLOSEPAR','expression',3,'p_expression_math','parse.py',436),
  ('expression -> expression oper error','expression',3,'p_e11','parse.py',443),
  ('expression -> INT','expression',1,'p_expression_int_float','parse.py',449),
  ('expression -> FLOAT','expression',1,'p_expression_int_float','parse.py',450),
  ('expression -> NAME','expression',1,'p_expression_int_float','parse.py',451),
  ('expression -> FNAME OPENPAR varname CLOSEPAR','expression',4,'p_expression_function','parse.py',457),
  ('expression -> FNAME error','expression',2,'p_e12','parse.py',463),
  ('expression -> FNAME OPENPAR varname error','expression',4,'p_e12','parse.py',464),
  ('oper -> EXP','oper',1,'p_oper','parse.py',473),
  ('oper -> MODULO','oper',1,'p_oper','parse.py',474),
  ('oper -> MULTIPLY','oper',1,'p_oper','parse.py',475),
  ('oper -> DIVIDE','oper',1,'p_oper','parse.py',476),
  ('oper -> PLUS','oper',1,'p_oper','parse.py',477),
  ('oper -> MINUS','oper',1,'p_oper','parse.py',478),
  ('oper -> EQUALS','oper',1,'p_oper','parse.py',479),
  ('vardeclare -> datatype NAME','vardeclare',2,'p_vardeclare','parse.py',485),
  ('vardeclare -> datatype error','vardeclare',2,'p_e13','parse.py',491),
  ('varassign -> NAME EQUALS expression','varassign',3,'p_varassign','parse.py',497),
  ('varassign -> NAME EQUALS error','varassign',3,'p_e14','parse.py',503),
  ('varname -> NAME COMMA varname','varname',3,'p_varname','parse.py',509),
  ('varname -> NAME','varname',1,'p_varname','parse.py',510),
  ('varname -> empty','varname',1,'p_varname','parse.py',511),
  ('varname -> error','varname',1,'p_e15','parse.py',520),
  ('empty -> <empty>','empty',0,'p_empty','parse.py',536),
]
