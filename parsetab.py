
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightNOTleftANDORleftEQNEQLSSGTRLEQGEQleftPLUSMINUSleftMULTIPLYDIVIDEleftEXPAND BREAK CLOSECURL CLOSEPAR COMMA COMMENT DIVIDE ELSE EOL EQ EQUALS EXP FLOAT FNAME GEQ GTR IF INPUT INT LEQ LSS MINUS MULTIPLY NAME NEQ NEWLINE NOT OPENCURL OPENPAR OR OUTPUT PERCENTFLOAT PERCENTINT PLUS QUOTEMARK RETURN TYPEFLOAT TYPEINT WHILE\n    begin : function\n    \n    function : function funcname OPENCURL code RETURN expression EOL CLOSECURL\n             | empty\n    \n    funcname : datatype FNAME OPENPAR parameters CLOSEPAR \n    \n    parameters : vardeclare COMMA parameters\n                | vardeclare\n                | empty\n    \n    code : code vardeclare EOL \n        | code varassign EOL\n        | code io EOL\n        | code expression EOL\n        | code while \n        | code if\n        | empty\n    \n    io : inputoutput OPENPAR iodata CLOSEPAR\n    io : inputoutput error \n    inputoutput : INPUT\n                | OUTPUT\n    \n    iodata : QUOTEMARK percenttype QUOTEMARK COMMA AND NAME\n    \n    percenttype : PERCENTFLOAT\n                | PERCENTINT\n    \n    datatype : TYPEFLOAT\n             | TYPEINT\n    \n    bool : expression boolop expression\n         | bool boolop bool\n         | expression boolop bool\n         | bool boolop expression\n         | NOT bool\n         | OPENPAR bool CLOSEPAR\n    \n    boolop : EQ\n           | NEQ\n           | LSS\n           | GTR\n           | LEQ\n           | GEQ\n           | AND\n           | OR\n    \n    if : IF OPENPAR bool CLOSEPAR block else\n       | IF OPENPAR bool CLOSEPAR block \n    \n    else : ELSE block\n    \n    while : WHILE OPENPAR bool CLOSEPAR block\n\n    \n    block : OPENCURL while CLOSECURL\n        |   OPENCURL if CLOSECURL\n        |   OPENCURL bcode CLOSECURL\n    \n    bcode : bcode io EOL\n        | bcode expression EOL\n        | bcode BREAK EOL\n        | empty\n    \n    expression :  expression oper expression\n               |  OPENPAR expression CLOSEPAR\n    \n    oper :  EXP\n         |  MULTIPLY\n         |  DIVIDE\n         |  PLUS\n         |  MINUS\n         |  EQUALS \n    \n    vardeclare : datatype NAME\n    \n    varassign : NAME EQUALS expression\n               | NAME EQUALS NAME\n    \n    expression : FNAME OPENPAR varname CLOSEPAR \n    \n    varname : NAME COMMA varname\n            | NAME\n            | empty\n    \n    expression  : INT\n                | FLOAT\n                | NAME\n    \n    empty : \n    '
    
_lr_action_items = {'TYPEFLOAT':([0,2,3,8,10,11,12,18,19,36,44,45,46,56,73,98,105,112,115,116,117,121,],[-67,6,-3,-67,6,-14,6,-12,-13,-11,-8,-9,-10,6,-2,-41,-39,-38,-42,-43,-44,-40,]),'TYPEINT':([0,2,3,8,10,11,12,18,19,36,44,45,46,56,73,98,105,112,115,116,117,121,],[-67,7,-3,-67,7,-14,7,-12,-13,-11,-8,-9,-10,7,-2,-41,-39,-38,-42,-43,-44,-40,]),'$end':([0,1,2,3,73,],[-67,0,-1,-3,-2,]),'OPENCURL':([4,55,82,94,113,],[8,-4,99,99,99,]),'FNAME':([5,6,7,8,10,11,13,18,19,23,36,37,38,39,40,41,42,43,44,45,46,48,53,54,67,70,83,84,85,86,87,88,89,90,91,92,98,99,104,105,109,110,112,115,116,117,121,123,124,125,],[9,-22,-23,-67,24,-14,24,-12,-13,24,-11,24,-51,-52,-53,-54,-55,-56,-8,-9,-10,24,24,24,24,24,24,-30,-31,-32,-33,-34,-35,-36,-37,24,-41,-67,24,-39,24,-48,-38,-42,-43,-44,-40,-45,-46,-47,]),'NAME':([6,7,8,10,11,13,18,19,20,23,36,37,38,39,40,41,42,43,44,45,46,48,52,53,54,67,70,79,83,84,85,86,87,88,89,90,91,92,98,99,104,105,109,110,112,114,115,116,117,121,123,124,125,],[-22,-23,-67,21,-14,35,-12,-13,47,35,-11,35,-51,-52,-53,-54,-55,-56,-8,-9,-10,59,65,35,35,35,35,65,35,-30,-31,-32,-33,-34,-35,-36,-37,35,-41,-67,35,-39,35,-48,-38,122,-42,-43,-44,-40,-45,-46,-47,]),'RETURN':([8,10,11,18,19,36,44,45,46,98,105,112,115,116,117,121,],[-67,13,-14,-12,-13,-11,-8,-9,-10,-41,-39,-38,-42,-43,-44,-40,]),'OPENPAR':([8,9,10,11,13,18,19,22,23,24,27,28,29,30,36,37,38,39,40,41,42,43,44,45,46,48,53,54,67,70,83,84,85,86,87,88,89,90,91,92,98,99,104,105,109,110,112,115,116,117,121,123,124,125,],[-67,12,23,-14,23,-12,-13,49,23,52,53,54,-17,-18,-11,23,-51,-52,-53,-54,-55,-56,-8,-9,-10,23,67,67,67,67,67,-30,-31,-32,-33,-34,-35,-36,-37,104,-41,-67,104,-39,23,-48,-38,-42,-43,-44,-40,-45,-46,-47,]),'INT':([8,10,11,13,18,19,23,36,37,38,39,40,41,42,43,44,45,46,48,53,54,67,70,83,84,85,86,87,88,89,90,91,92,98,99,104,105,109,110,112,115,116,117,121,123,124,125,],[-67,25,-14,25,-12,-13,25,-11,25,-51,-52,-53,-54,-55,-56,-8,-9,-10,25,25,25,25,25,25,-30,-31,-32,-33,-34,-35,-36,-37,25,-41,-67,25,-39,25,-48,-38,-42,-43,-44,-40,-45,-46,-47,]),'FLOAT':([8,10,11,13,18,19,23,36,37,38,39,40,41,42,43,44,45,46,48,53,54,67,70,83,84,85,86,87,88,89,90,91,92,98,99,104,105,109,110,112,115,116,117,121,123,124,125,],[-67,26,-14,26,-12,-13,26,-11,26,-51,-52,-53,-54,-55,-56,-8,-9,-10,26,26,26,26,26,26,-30,-31,-32,-33,-34,-35,-36,-37,26,-41,-67,26,-39,26,-48,-38,-42,-43,-44,-40,-45,-46,-47,]),'WHILE':([8,10,11,18,19,36,44,45,46,98,99,105,112,115,116,117,121,],[-67,27,-14,-12,-13,-11,-8,-9,-10,-41,27,-39,-38,-42,-43,-44,-40,]),'IF':([8,10,11,18,19,36,44,45,46,98,99,105,112,115,116,117,121,],[-67,28,-14,-12,-13,-11,-8,-9,-10,-41,28,-39,-38,-42,-43,-44,-40,]),'INPUT':([8,10,11,18,19,36,44,45,46,98,99,105,109,110,112,115,116,117,121,123,124,125,],[-67,29,-14,-12,-13,-11,-8,-9,-10,-41,-67,-39,29,-48,-38,-42,-43,-44,-40,-45,-46,-47,]),'OUTPUT':([8,10,11,18,19,36,44,45,46,98,99,105,109,110,112,115,116,117,121,123,124,125,],[-67,30,-14,-12,-13,-11,-8,-9,-10,-41,-67,-39,30,-48,-38,-42,-43,-44,-40,-45,-46,-47,]),'CLOSEPAR':([12,25,26,31,32,33,35,47,51,52,56,58,61,63,64,65,66,68,71,72,78,79,80,81,93,96,97,100,101,102,103,111,122,],[-67,-64,-65,55,-6,-7,-66,-57,63,-67,-67,-49,74,-50,78,-62,-63,82,94,-5,-60,-67,97,63,-28,-61,-29,-25,-27,-24,-26,63,-19,]),'EOL':([14,15,16,17,21,25,26,34,35,47,50,58,59,60,63,74,78,118,119,120,],[36,44,45,46,-66,-64,-65,57,-66,-57,-16,-49,-59,-58,-50,-15,-60,123,124,125,]),'EXP':([14,21,25,26,34,35,51,58,59,60,63,69,78,81,101,102,111,119,],[38,-66,-64,-65,38,-66,38,38,-66,38,-50,38,-60,38,38,38,38,38,]),'MULTIPLY':([14,21,25,26,34,35,51,58,59,60,63,69,78,81,101,102,111,119,],[39,-66,-64,-65,39,-66,39,39,-66,39,-50,39,-60,39,39,39,39,39,]),'DIVIDE':([14,21,25,26,34,35,51,58,59,60,63,69,78,81,101,102,111,119,],[40,-66,-64,-65,40,-66,40,40,-66,40,-50,40,-60,40,40,40,40,40,]),'PLUS':([14,21,25,26,34,35,51,58,59,60,63,69,78,81,101,102,111,119,],[41,-66,-64,-65,41,-66,41,41,-66,41,-50,41,-60,41,41,41,41,41,]),'MINUS':([14,21,25,26,34,35,51,58,59,60,63,69,78,81,101,102,111,119,],[42,-66,-64,-65,42,-66,42,42,-66,42,-50,42,-60,42,42,42,42,42,]),'EQUALS':([14,21,25,26,34,35,51,58,59,60,63,69,78,81,101,102,111,119,],[43,48,-64,-65,43,-66,43,43,-66,43,-50,43,-60,43,43,43,43,43,]),'error':([22,29,30,],[50,-17,-18,]),'EQ':([25,26,35,58,63,68,69,71,78,80,81,93,97,100,101,102,103,111,],[-64,-65,-66,-49,-50,84,84,84,-60,84,84,84,-29,84,84,84,84,84,]),'NEQ':([25,26,35,58,63,68,69,71,78,80,81,93,97,100,101,102,103,111,],[-64,-65,-66,-49,-50,85,85,85,-60,85,85,85,-29,85,85,85,85,85,]),'LSS':([25,26,35,58,63,68,69,71,78,80,81,93,97,100,101,102,103,111,],[-64,-65,-66,-49,-50,86,86,86,-60,86,86,86,-29,86,86,86,86,86,]),'GTR':([25,26,35,58,63,68,69,71,78,80,81,93,97,100,101,102,103,111,],[-64,-65,-66,-49,-50,87,87,87,-60,87,87,87,-29,87,87,87,87,87,]),'LEQ':([25,26,35,58,63,68,69,71,78,80,81,93,97,100,101,102,103,111,],[-64,-65,-66,-49,-50,88,88,88,-60,88,88,88,-29,88,88,88,88,88,]),'GEQ':([25,26,35,58,63,68,69,71,78,80,81,93,97,100,101,102,103,111,],[-64,-65,-66,-49,-50,89,89,89,-60,89,89,89,-29,89,89,89,89,89,]),'AND':([25,26,35,58,63,68,69,71,78,80,81,93,97,100,101,102,103,106,111,],[-64,-65,-66,-49,-50,90,90,90,-60,90,90,90,-29,90,90,90,90,114,90,]),'OR':([25,26,35,58,63,68,69,71,78,80,81,93,97,100,101,102,103,111,],[-64,-65,-66,-49,-50,91,91,91,-60,91,91,91,-29,91,91,91,91,91,]),'COMMA':([32,47,65,95,],[56,-57,79,106,]),'QUOTEMARK':([49,75,76,77,],[62,95,-20,-21,]),'NOT':([53,54,67,70,83,84,85,86,87,88,89,90,91,92,104,],[70,70,70,70,70,-30,-31,-32,-33,-34,-35,-36,-37,70,70,]),'CLOSECURL':([57,98,99,105,107,108,109,110,112,115,116,117,121,123,124,125,],[73,-41,-67,-39,115,116,117,-48,-38,-42,-43,-44,-40,-45,-46,-47,]),'PERCENTFLOAT':([62,],[76,]),'PERCENTINT':([62,],[77,]),'BREAK':([99,109,110,123,124,125,],[-67,120,-48,-45,-46,-47,]),'ELSE':([105,115,116,117,],[113,-42,-43,-44,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'begin':([0,],[1,]),'function':([0,],[2,]),'empty':([0,8,12,52,56,79,99,],[3,11,33,66,33,66,110,]),'funcname':([2,],[4,]),'datatype':([2,10,12,56,],[5,20,20,20,]),'code':([8,],[10,]),'expression':([10,13,23,37,48,53,54,67,70,83,92,104,109,],[14,34,51,58,60,69,69,81,69,101,102,111,119,]),'vardeclare':([10,12,56,],[15,32,32,]),'varassign':([10,],[16,]),'io':([10,109,],[17,118,]),'while':([10,99,],[18,107,]),'if':([10,99,],[19,108,]),'inputoutput':([10,109,],[22,22,]),'parameters':([12,56,],[31,72,]),'oper':([14,34,51,58,60,69,81,101,102,111,119,],[37,37,37,37,37,37,37,37,37,37,37,]),'iodata':([49,],[61,]),'varname':([52,79,],[64,96,]),'bool':([53,54,67,70,83,92,104,],[68,71,80,93,100,103,80,]),'percenttype':([62,],[75,]),'boolop':([68,69,71,80,81,93,100,101,102,103,111,],[83,92,83,83,92,83,83,92,92,83,92,]),'block':([82,94,113,],[98,105,121,]),'bcode':([99,],[109,]),'else':([105,],[112,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> begin","S'",1,None,None,None),
  ('begin -> function','begin',1,'p_begin','parse.py',154),
  ('function -> function funcname OPENCURL code RETURN expression EOL CLOSECURL','function',8,'p_function','parse.py',161),
  ('function -> empty','function',1,'p_function','parse.py',162),
  ('funcname -> datatype FNAME OPENPAR parameters CLOSEPAR','funcname',5,'p_funcname','parse.py',175),
  ('parameters -> vardeclare COMMA parameters','parameters',3,'p_parameters','parse.py',185),
  ('parameters -> vardeclare','parameters',1,'p_parameters','parse.py',186),
  ('parameters -> empty','parameters',1,'p_parameters','parse.py',187),
  ('code -> code vardeclare EOL','code',3,'p_code','parse.py',196),
  ('code -> code varassign EOL','code',3,'p_code','parse.py',197),
  ('code -> code io EOL','code',3,'p_code','parse.py',198),
  ('code -> code expression EOL','code',3,'p_code','parse.py',199),
  ('code -> code while','code',2,'p_code','parse.py',200),
  ('code -> code if','code',2,'p_code','parse.py',201),
  ('code -> empty','code',1,'p_code','parse.py',202),
  ('io -> inputoutput OPENPAR iodata CLOSEPAR','io',4,'p_io','parse.py',210),
  ('io -> inputoutput error','io',2,'p_io_error','parse.py',214),
  ('inputoutput -> INPUT','inputoutput',1,'p_inputoutput','parse.py',218),
  ('inputoutput -> OUTPUT','inputoutput',1,'p_inputoutput','parse.py',219),
  ('iodata -> QUOTEMARK percenttype QUOTEMARK COMMA AND NAME','iodata',6,'p_iodata','parse.py',224),
  ('percenttype -> PERCENTFLOAT','percenttype',1,'p_percenttype','parse.py',230),
  ('percenttype -> PERCENTINT','percenttype',1,'p_percenttype','parse.py',231),
  ('datatype -> TYPEFLOAT','datatype',1,'p_datatype','parse.py',236),
  ('datatype -> TYPEINT','datatype',1,'p_datatype','parse.py',237),
  ('bool -> expression boolop expression','bool',3,'p_bool','parse.py',243),
  ('bool -> bool boolop bool','bool',3,'p_bool','parse.py',244),
  ('bool -> expression boolop bool','bool',3,'p_bool','parse.py',245),
  ('bool -> bool boolop expression','bool',3,'p_bool','parse.py',246),
  ('bool -> NOT bool','bool',2,'p_bool','parse.py',247),
  ('bool -> OPENPAR bool CLOSEPAR','bool',3,'p_bool','parse.py',248),
  ('boolop -> EQ','boolop',1,'p_boolop','parse.py',257),
  ('boolop -> NEQ','boolop',1,'p_boolop','parse.py',258),
  ('boolop -> LSS','boolop',1,'p_boolop','parse.py',259),
  ('boolop -> GTR','boolop',1,'p_boolop','parse.py',260),
  ('boolop -> LEQ','boolop',1,'p_boolop','parse.py',261),
  ('boolop -> GEQ','boolop',1,'p_boolop','parse.py',262),
  ('boolop -> AND','boolop',1,'p_boolop','parse.py',263),
  ('boolop -> OR','boolop',1,'p_boolop','parse.py',264),
  ('if -> IF OPENPAR bool CLOSEPAR block else','if',6,'p_if','parse.py',269),
  ('if -> IF OPENPAR bool CLOSEPAR block','if',5,'p_if','parse.py',270),
  ('else -> ELSE block','else',2,'p_else','parse.py',279),
  ('while -> WHILE OPENPAR bool CLOSEPAR block','while',5,'p_while','parse.py',285),
  ('block -> OPENCURL while CLOSECURL','block',3,'p_block','parse.py',292),
  ('block -> OPENCURL if CLOSECURL','block',3,'p_block','parse.py',293),
  ('block -> OPENCURL bcode CLOSECURL','block',3,'p_block','parse.py',294),
  ('bcode -> bcode io EOL','bcode',3,'p_bcode','parse.py',300),
  ('bcode -> bcode expression EOL','bcode',3,'p_bcode','parse.py',301),
  ('bcode -> bcode BREAK EOL','bcode',3,'p_bcode','parse.py',302),
  ('bcode -> empty','bcode',1,'p_bcode','parse.py',303),
  ('expression -> expression oper expression','expression',3,'p_expression_math','parse.py',312),
  ('expression -> OPENPAR expression CLOSEPAR','expression',3,'p_expression_math','parse.py',313),
  ('oper -> EXP','oper',1,'p_oper','parse.py',320),
  ('oper -> MULTIPLY','oper',1,'p_oper','parse.py',321),
  ('oper -> DIVIDE','oper',1,'p_oper','parse.py',322),
  ('oper -> PLUS','oper',1,'p_oper','parse.py',323),
  ('oper -> MINUS','oper',1,'p_oper','parse.py',324),
  ('oper -> EQUALS','oper',1,'p_oper','parse.py',325),
  ('vardeclare -> datatype NAME','vardeclare',2,'p_vardeclare','parse.py',331),
  ('varassign -> NAME EQUALS expression','varassign',3,'p_varassign','parse.py',340),
  ('varassign -> NAME EQUALS NAME','varassign',3,'p_varassign','parse.py',341),
  ('expression -> FNAME OPENPAR varname CLOSEPAR','expression',4,'p_expression_function','parse.py',349),
  ('varname -> NAME COMMA varname','varname',3,'p_varname','parse.py',355),
  ('varname -> NAME','varname',1,'p_varname','parse.py',356),
  ('varname -> empty','varname',1,'p_varname','parse.py',357),
  ('expression -> INT','expression',1,'p_expression_int_float','parse.py',375),
  ('expression -> FLOAT','expression',1,'p_expression_int_float','parse.py',376),
  ('expression -> NAME','expression',1,'p_expression_int_float','parse.py',377),
  ('empty -> <empty>','empty',0,'p_empty','parse.py',383),
]
