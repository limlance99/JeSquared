Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    NEWLINE

Grammar

Rule 0     S' -> begin
Rule 1     begin -> function
Rule 2     function -> function funcname OPENCURL code RETURN expression EOL CLOSECURL
Rule 3     function -> empty
Rule 4     funcname -> datatype FNAME OPENPAR parameters CLOSEPAR
Rule 5     parameters -> vardeclare COMMA parameters
Rule 6     parameters -> vardeclare
Rule 7     parameters -> empty
Rule 8     code -> code vardeclare EOL
Rule 9     code -> code varassign EOL
Rule 10    code -> code io EOL
Rule 11    code -> code expression EOL
Rule 12    code -> code while
Rule 13    code -> code if
Rule 14    code -> empty
Rule 15    io -> inputoutput OPENPAR iodata CLOSEPAR
Rule 16    io -> inputoutput error
Rule 17    inputoutput -> INPUT
Rule 18    inputoutput -> OUTPUT
Rule 19    iodata -> QUOTEMARK percenttype QUOTEMARK COMMA AND NAME
Rule 20    percenttype -> PERCENTFLOAT
Rule 21    percenttype -> PERCENTINT
Rule 22    datatype -> TYPEFLOAT
Rule 23    datatype -> TYPEINT
Rule 24    bool -> expression boolop expression
Rule 25    bool -> bool boolop bool
Rule 26    bool -> expression boolop bool
Rule 27    bool -> bool boolop expression
Rule 28    bool -> NOT bool
Rule 29    bool -> OPENPAR bool CLOSEPAR
Rule 30    boolop -> EQ
Rule 31    boolop -> NEQ
Rule 32    boolop -> LSS
Rule 33    boolop -> GTR
Rule 34    boolop -> LEQ
Rule 35    boolop -> GEQ
Rule 36    boolop -> AND
Rule 37    boolop -> OR
Rule 38    if -> IF OPENPAR bool CLOSEPAR block else
Rule 39    if -> IF OPENPAR bool CLOSEPAR block
Rule 40    else -> ELSE block
Rule 41    while -> WHILE OPENPAR bool CLOSEPAR block
Rule 42    block -> OPENCURL while CLOSECURL
Rule 43    block -> OPENCURL if CLOSECURL
Rule 44    block -> OPENCURL bcode CLOSECURL
Rule 45    bcode -> bcode io EOL
Rule 46    bcode -> bcode expression EOL
Rule 47    bcode -> bcode BREAK EOL
Rule 48    bcode -> empty
Rule 49    expression -> expression oper expression
Rule 50    expression -> OPENPAR expression CLOSEPAR
Rule 51    oper -> EXP
Rule 52    oper -> MULTIPLY
Rule 53    oper -> DIVIDE
Rule 54    oper -> PLUS
Rule 55    oper -> MINUS
Rule 56    oper -> EQUALS
Rule 57    vardeclare -> datatype NAME
Rule 58    varassign -> NAME EQUALS expression
Rule 59    varassign -> NAME EQUALS NAME
Rule 60    expression -> FNAME OPENPAR varname CLOSEPAR
Rule 61    varname -> NAME COMMA varname
Rule 62    varname -> NAME
Rule 63    varname -> empty
Rule 64    expression -> INT
Rule 65    expression -> FLOAT
Rule 66    expression -> NAME
Rule 67    empty -> <empty>

Terminals, with rules where they appear

AND                  : 19 36
BREAK                : 47
CLOSECURL            : 2 42 43 44
CLOSEPAR             : 4 15 29 38 39 41 50 60
COMMA                : 5 19 61
COMMENT              : 
DIVIDE               : 53
ELSE                 : 40
EOL                  : 2 8 9 10 11 45 46 47
EQ                   : 30
EQUALS               : 56 58 59
EXP                  : 51
FLOAT                : 65
FNAME                : 4 60
GEQ                  : 35
GTR                  : 33
IF                   : 38 39
INPUT                : 17
INT                  : 64
LEQ                  : 34
LSS                  : 32
MINUS                : 55
MULTIPLY             : 52
NAME                 : 19 57 58 59 59 61 62 66
NEQ                  : 31
NEWLINE              : 
NOT                  : 28
OPENCURL             : 2 42 43 44
OPENPAR              : 4 15 29 38 39 41 50 60
OR                   : 37
OUTPUT               : 18
PERCENTFLOAT         : 20
PERCENTINT           : 21
PLUS                 : 54
QUOTEMARK            : 19 19
RETURN               : 2
TYPEFLOAT            : 22
TYPEINT              : 23
WHILE                : 41
error                : 16

Nonterminals, with rules where they appear

bcode                : 44 45 46 47
begin                : 0
block                : 38 39 40 41
bool                 : 25 25 26 27 28 29 38 39 41
boolop               : 24 25 26 27
code                 : 2 8 9 10 11 12 13
datatype             : 4 57
else                 : 38
empty                : 3 7 14 48 63
expression           : 2 11 24 24 26 27 46 49 49 50 58
funcname             : 2
function             : 1 2
if                   : 13 43
inputoutput          : 15 16
io                   : 10 45
iodata               : 15
oper                 : 49
parameters           : 4 5
percenttype          : 19
varassign            : 9
vardeclare           : 5 6 8
varname              : 60 61
while                : 12 42

Parsing method: LALR

state 0

    (0) S' -> . begin
    (1) begin -> . function
    (2) function -> . function funcname OPENCURL code RETURN expression EOL CLOSECURL
    (3) function -> . empty
    (67) empty -> .

    TYPEFLOAT       reduce using rule 67 (empty -> .)
    TYPEINT         reduce using rule 67 (empty -> .)
    $end            reduce using rule 67 (empty -> .)

    begin                          shift and go to state 1
    function                       shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> begin .



state 2

    (1) begin -> function .
    (2) function -> function . funcname OPENCURL code RETURN expression EOL CLOSECURL
    (4) funcname -> . datatype FNAME OPENPAR parameters CLOSEPAR
    (22) datatype -> . TYPEFLOAT
    (23) datatype -> . TYPEINT

    $end            reduce using rule 1 (begin -> function .)
    TYPEFLOAT       shift and go to state 6
    TYPEINT         shift and go to state 7

    funcname                       shift and go to state 4
    datatype                       shift and go to state 5

state 3

    (3) function -> empty .

    TYPEFLOAT       reduce using rule 3 (function -> empty .)
    TYPEINT         reduce using rule 3 (function -> empty .)
    $end            reduce using rule 3 (function -> empty .)


state 4

    (2) function -> function funcname . OPENCURL code RETURN expression EOL CLOSECURL

    OPENCURL        shift and go to state 8


state 5

    (4) funcname -> datatype . FNAME OPENPAR parameters CLOSEPAR

    FNAME           shift and go to state 9


state 6

    (22) datatype -> TYPEFLOAT .

    FNAME           reduce using rule 22 (datatype -> TYPEFLOAT .)
    NAME            reduce using rule 22 (datatype -> TYPEFLOAT .)


state 7

    (23) datatype -> TYPEINT .

    FNAME           reduce using rule 23 (datatype -> TYPEINT .)
    NAME            reduce using rule 23 (datatype -> TYPEINT .)


state 8

    (2) function -> function funcname OPENCURL . code RETURN expression EOL CLOSECURL
    (8) code -> . code vardeclare EOL
    (9) code -> . code varassign EOL
    (10) code -> . code io EOL
    (11) code -> . code expression EOL
    (12) code -> . code while
    (13) code -> . code if
    (14) code -> . empty
    (67) empty -> .

    RETURN          reduce using rule 67 (empty -> .)
    NAME            reduce using rule 67 (empty -> .)
    OPENPAR         reduce using rule 67 (empty -> .)
    FNAME           reduce using rule 67 (empty -> .)
    INT             reduce using rule 67 (empty -> .)
    FLOAT           reduce using rule 67 (empty -> .)
    WHILE           reduce using rule 67 (empty -> .)
    IF              reduce using rule 67 (empty -> .)
    TYPEFLOAT       reduce using rule 67 (empty -> .)
    TYPEINT         reduce using rule 67 (empty -> .)
    INPUT           reduce using rule 67 (empty -> .)
    OUTPUT          reduce using rule 67 (empty -> .)

    code                           shift and go to state 10
    empty                          shift and go to state 11

state 9

    (4) funcname -> datatype FNAME . OPENPAR parameters CLOSEPAR

    OPENPAR         shift and go to state 12


state 10

    (2) function -> function funcname OPENCURL code . RETURN expression EOL CLOSECURL
    (8) code -> code . vardeclare EOL
    (9) code -> code . varassign EOL
    (10) code -> code . io EOL
    (11) code -> code . expression EOL
    (12) code -> code . while
    (13) code -> code . if
    (57) vardeclare -> . datatype NAME
    (58) varassign -> . NAME EQUALS expression
    (59) varassign -> . NAME EQUALS NAME
    (15) io -> . inputoutput OPENPAR iodata CLOSEPAR
    (16) io -> . inputoutput error
    (49) expression -> . expression oper expression
    (50) expression -> . OPENPAR expression CLOSEPAR
    (60) expression -> . FNAME OPENPAR varname CLOSEPAR
    (64) expression -> . INT
    (65) expression -> . FLOAT
    (66) expression -> . NAME
    (41) while -> . WHILE OPENPAR bool CLOSEPAR block
    (38) if -> . IF OPENPAR bool CLOSEPAR block else
    (39) if -> . IF OPENPAR bool CLOSEPAR block
    (22) datatype -> . TYPEFLOAT
    (23) datatype -> . TYPEINT
    (17) inputoutput -> . INPUT
    (18) inputoutput -> . OUTPUT

    RETURN          shift and go to state 13
    NAME            shift and go to state 21
    OPENPAR         shift and go to state 23
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    TYPEFLOAT       shift and go to state 6
    TYPEINT         shift and go to state 7
    INPUT           shift and go to state 29
    OUTPUT          shift and go to state 30

    expression                     shift and go to state 14
    vardeclare                     shift and go to state 15
    varassign                      shift and go to state 16
    io                             shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    datatype                       shift and go to state 20
    inputoutput                    shift and go to state 22

state 11

    (14) code -> empty .

    RETURN          reduce using rule 14 (code -> empty .)
    NAME            reduce using rule 14 (code -> empty .)
    OPENPAR         reduce using rule 14 (code -> empty .)
    FNAME           reduce using rule 14 (code -> empty .)
    INT             reduce using rule 14 (code -> empty .)
    FLOAT           reduce using rule 14 (code -> empty .)
    WHILE           reduce using rule 14 (code -> empty .)
    IF              reduce using rule 14 (code -> empty .)
    TYPEFLOAT       reduce using rule 14 (code -> empty .)
    TYPEINT         reduce using rule 14 (code -> empty .)
    INPUT           reduce using rule 14 (code -> empty .)
    OUTPUT          reduce using rule 14 (code -> empty .)


state 12

    (4) funcname -> datatype FNAME OPENPAR . parameters CLOSEPAR
    (5) parameters -> . vardeclare COMMA parameters
    (6) parameters -> . vardeclare
    (7) parameters -> . empty
    (57) vardeclare -> . datatype NAME
    (67) empty -> .
    (22) datatype -> . TYPEFLOAT
    (23) datatype -> . TYPEINT

    CLOSEPAR        reduce using rule 67 (empty -> .)
    TYPEFLOAT       shift and go to state 6
    TYPEINT         shift and go to state 7

    datatype                       shift and go to state 20
    parameters                     shift and go to state 31
    vardeclare                     shift and go to state 32
    empty                          shift and go to state 33

state 13

    (2) function -> function funcname OPENCURL code RETURN . expression EOL CLOSECURL
    (49) expression -> . expression oper expression
    (50) expression -> . OPENPAR expression CLOSEPAR
    (60) expression -> . FNAME OPENPAR varname CLOSEPAR
    (64) expression -> . INT
    (65) expression -> . FLOAT
    (66) expression -> . NAME

    OPENPAR         shift and go to state 23
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35

    expression                     shift and go to state 34

state 14

    (11) code -> code expression . EOL
    (49) expression -> expression . oper expression
    (51) oper -> . EXP
    (52) oper -> . MULTIPLY
    (53) oper -> . DIVIDE
    (54) oper -> . PLUS
    (55) oper -> . MINUS
    (56) oper -> . EQUALS

    EOL             shift and go to state 36
    EXP             shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    EQUALS          shift and go to state 43

    oper                           shift and go to state 37

state 15

    (8) code -> code vardeclare . EOL

    EOL             shift and go to state 44


state 16

    (9) code -> code varassign . EOL

    EOL             shift and go to state 45


state 17

    (10) code -> code io . EOL

    EOL             shift and go to state 46


state 18

    (12) code -> code while .

    RETURN          reduce using rule 12 (code -> code while .)
    NAME            reduce using rule 12 (code -> code while .)
    OPENPAR         reduce using rule 12 (code -> code while .)
    FNAME           reduce using rule 12 (code -> code while .)
    INT             reduce using rule 12 (code -> code while .)
    FLOAT           reduce using rule 12 (code -> code while .)
    WHILE           reduce using rule 12 (code -> code while .)
    IF              reduce using rule 12 (code -> code while .)
    TYPEFLOAT       reduce using rule 12 (code -> code while .)
    TYPEINT         reduce using rule 12 (code -> code while .)
    INPUT           reduce using rule 12 (code -> code while .)
    OUTPUT          reduce using rule 12 (code -> code while .)


state 19

    (13) code -> code if .

    RETURN          reduce using rule 13 (code -> code if .)
    NAME            reduce using rule 13 (code -> code if .)
    OPENPAR         reduce using rule 13 (code -> code if .)
    FNAME           reduce using rule 13 (code -> code if .)
    INT             reduce using rule 13 (code -> code if .)
    FLOAT           reduce using rule 13 (code -> code if .)
    WHILE           reduce using rule 13 (code -> code if .)
    IF              reduce using rule 13 (code -> code if .)
    TYPEFLOAT       reduce using rule 13 (code -> code if .)
    TYPEINT         reduce using rule 13 (code -> code if .)
    INPUT           reduce using rule 13 (code -> code if .)
    OUTPUT          reduce using rule 13 (code -> code if .)


state 20

    (57) vardeclare -> datatype . NAME

    NAME            shift and go to state 47


state 21

    (58) varassign -> NAME . EQUALS expression
    (59) varassign -> NAME . EQUALS NAME
    (66) expression -> NAME .

  ! shift/reduce conflict for EQUALS resolved as shift
    EQUALS          shift and go to state 48
    EOL             reduce using rule 66 (expression -> NAME .)
    EXP             reduce using rule 66 (expression -> NAME .)
    MULTIPLY        reduce using rule 66 (expression -> NAME .)
    DIVIDE          reduce using rule 66 (expression -> NAME .)
    PLUS            reduce using rule 66 (expression -> NAME .)
    MINUS           reduce using rule 66 (expression -> NAME .)

  ! EQUALS          [ reduce using rule 66 (expression -> NAME .) ]


state 22

    (15) io -> inputoutput . OPENPAR iodata CLOSEPAR
    (16) io -> inputoutput . error

    OPENPAR         shift and go to state 49
    error           shift and go to state 50


state 23

    (50) expression -> OPENPAR . expression CLOSEPAR
    (49) expression -> . expression oper expression
    (50) expression -> . OPENPAR expression CLOSEPAR
    (60) expression -> . FNAME OPENPAR varname CLOSEPAR
    (64) expression -> . INT
    (65) expression -> . FLOAT
    (66) expression -> . NAME

    OPENPAR         shift and go to state 23
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35

    expression                     shift and go to state 51

state 24

    (60) expression -> FNAME . OPENPAR varname CLOSEPAR

    OPENPAR         shift and go to state 52


state 25

    (64) expression -> INT .

    EOL             reduce using rule 64 (expression -> INT .)
    EXP             reduce using rule 64 (expression -> INT .)
    MULTIPLY        reduce using rule 64 (expression -> INT .)
    DIVIDE          reduce using rule 64 (expression -> INT .)
    PLUS            reduce using rule 64 (expression -> INT .)
    MINUS           reduce using rule 64 (expression -> INT .)
    EQUALS          reduce using rule 64 (expression -> INT .)
    CLOSEPAR        reduce using rule 64 (expression -> INT .)
    EQ              reduce using rule 64 (expression -> INT .)
    NEQ             reduce using rule 64 (expression -> INT .)
    LSS             reduce using rule 64 (expression -> INT .)
    GTR             reduce using rule 64 (expression -> INT .)
    LEQ             reduce using rule 64 (expression -> INT .)
    GEQ             reduce using rule 64 (expression -> INT .)
    AND             reduce using rule 64 (expression -> INT .)
    OR              reduce using rule 64 (expression -> INT .)


state 26

    (65) expression -> FLOAT .

    EOL             reduce using rule 65 (expression -> FLOAT .)
    EXP             reduce using rule 65 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 65 (expression -> FLOAT .)
    DIVIDE          reduce using rule 65 (expression -> FLOAT .)
    PLUS            reduce using rule 65 (expression -> FLOAT .)
    MINUS           reduce using rule 65 (expression -> FLOAT .)
    EQUALS          reduce using rule 65 (expression -> FLOAT .)
    CLOSEPAR        reduce using rule 65 (expression -> FLOAT .)
    EQ              reduce using rule 65 (expression -> FLOAT .)
    NEQ             reduce using rule 65 (expression -> FLOAT .)
    LSS             reduce using rule 65 (expression -> FLOAT .)
    GTR             reduce using rule 65 (expression -> FLOAT .)
    LEQ             reduce using rule 65 (expression -> FLOAT .)
    GEQ             reduce using rule 65 (expression -> FLOAT .)
    AND             reduce using rule 65 (expression -> FLOAT .)
    OR              reduce using rule 65 (expression -> FLOAT .)


state 27

    (41) while -> WHILE . OPENPAR bool CLOSEPAR block

    OPENPAR         shift and go to state 53


state 28

    (38) if -> IF . OPENPAR bool CLOSEPAR block else
    (39) if -> IF . OPENPAR bool CLOSEPAR block

    OPENPAR         shift and go to state 54


state 29

    (17) inputoutput -> INPUT .

    OPENPAR         reduce using rule 17 (inputoutput -> INPUT .)
    error           reduce using rule 17 (inputoutput -> INPUT .)


state 30

    (18) inputoutput -> OUTPUT .

    OPENPAR         reduce using rule 18 (inputoutput -> OUTPUT .)
    error           reduce using rule 18 (inputoutput -> OUTPUT .)


state 31

    (4) funcname -> datatype FNAME OPENPAR parameters . CLOSEPAR

    CLOSEPAR        shift and go to state 55


state 32

    (5) parameters -> vardeclare . COMMA parameters
    (6) parameters -> vardeclare .

    COMMA           shift and go to state 56
    CLOSEPAR        reduce using rule 6 (parameters -> vardeclare .)


state 33

    (7) parameters -> empty .

    CLOSEPAR        reduce using rule 7 (parameters -> empty .)


state 34

    (2) function -> function funcname OPENCURL code RETURN expression . EOL CLOSECURL
    (49) expression -> expression . oper expression
    (51) oper -> . EXP
    (52) oper -> . MULTIPLY
    (53) oper -> . DIVIDE
    (54) oper -> . PLUS
    (55) oper -> . MINUS
    (56) oper -> . EQUALS

    EOL             shift and go to state 57
    EXP             shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    EQUALS          shift and go to state 43

    oper                           shift and go to state 37

state 35

    (66) expression -> NAME .

    EOL             reduce using rule 66 (expression -> NAME .)
    EXP             reduce using rule 66 (expression -> NAME .)
    MULTIPLY        reduce using rule 66 (expression -> NAME .)
    DIVIDE          reduce using rule 66 (expression -> NAME .)
    PLUS            reduce using rule 66 (expression -> NAME .)
    MINUS           reduce using rule 66 (expression -> NAME .)
    EQUALS          reduce using rule 66 (expression -> NAME .)
    CLOSEPAR        reduce using rule 66 (expression -> NAME .)
    EQ              reduce using rule 66 (expression -> NAME .)
    NEQ             reduce using rule 66 (expression -> NAME .)
    LSS             reduce using rule 66 (expression -> NAME .)
    GTR             reduce using rule 66 (expression -> NAME .)
    LEQ             reduce using rule 66 (expression -> NAME .)
    GEQ             reduce using rule 66 (expression -> NAME .)
    AND             reduce using rule 66 (expression -> NAME .)
    OR              reduce using rule 66 (expression -> NAME .)


state 36

    (11) code -> code expression EOL .

    RETURN          reduce using rule 11 (code -> code expression EOL .)
    NAME            reduce using rule 11 (code -> code expression EOL .)
    OPENPAR         reduce using rule 11 (code -> code expression EOL .)
    FNAME           reduce using rule 11 (code -> code expression EOL .)
    INT             reduce using rule 11 (code -> code expression EOL .)
    FLOAT           reduce using rule 11 (code -> code expression EOL .)
    WHILE           reduce using rule 11 (code -> code expression EOL .)
    IF              reduce using rule 11 (code -> code expression EOL .)
    TYPEFLOAT       reduce using rule 11 (code -> code expression EOL .)
    TYPEINT         reduce using rule 11 (code -> code expression EOL .)
    INPUT           reduce using rule 11 (code -> code expression EOL .)
    OUTPUT          reduce using rule 11 (code -> code expression EOL .)


state 37

    (49) expression -> expression oper . expression
    (49) expression -> . expression oper expression
    (50) expression -> . OPENPAR expression CLOSEPAR
    (60) expression -> . FNAME OPENPAR varname CLOSEPAR
    (64) expression -> . INT
    (65) expression -> . FLOAT
    (66) expression -> . NAME

    OPENPAR         shift and go to state 23
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35

    expression                     shift and go to state 58

state 38

    (51) oper -> EXP .

    OPENPAR         reduce using rule 51 (oper -> EXP .)
    FNAME           reduce using rule 51 (oper -> EXP .)
    INT             reduce using rule 51 (oper -> EXP .)
    FLOAT           reduce using rule 51 (oper -> EXP .)
    NAME            reduce using rule 51 (oper -> EXP .)


state 39

    (52) oper -> MULTIPLY .

    OPENPAR         reduce using rule 52 (oper -> MULTIPLY .)
    FNAME           reduce using rule 52 (oper -> MULTIPLY .)
    INT             reduce using rule 52 (oper -> MULTIPLY .)
    FLOAT           reduce using rule 52 (oper -> MULTIPLY .)
    NAME            reduce using rule 52 (oper -> MULTIPLY .)


state 40

    (53) oper -> DIVIDE .

    OPENPAR         reduce using rule 53 (oper -> DIVIDE .)
    FNAME           reduce using rule 53 (oper -> DIVIDE .)
    INT             reduce using rule 53 (oper -> DIVIDE .)
    FLOAT           reduce using rule 53 (oper -> DIVIDE .)
    NAME            reduce using rule 53 (oper -> DIVIDE .)


state 41

    (54) oper -> PLUS .

    OPENPAR         reduce using rule 54 (oper -> PLUS .)
    FNAME           reduce using rule 54 (oper -> PLUS .)
    INT             reduce using rule 54 (oper -> PLUS .)
    FLOAT           reduce using rule 54 (oper -> PLUS .)
    NAME            reduce using rule 54 (oper -> PLUS .)


state 42

    (55) oper -> MINUS .

    OPENPAR         reduce using rule 55 (oper -> MINUS .)
    FNAME           reduce using rule 55 (oper -> MINUS .)
    INT             reduce using rule 55 (oper -> MINUS .)
    FLOAT           reduce using rule 55 (oper -> MINUS .)
    NAME            reduce using rule 55 (oper -> MINUS .)


state 43

    (56) oper -> EQUALS .

    OPENPAR         reduce using rule 56 (oper -> EQUALS .)
    FNAME           reduce using rule 56 (oper -> EQUALS .)
    INT             reduce using rule 56 (oper -> EQUALS .)
    FLOAT           reduce using rule 56 (oper -> EQUALS .)
    NAME            reduce using rule 56 (oper -> EQUALS .)


state 44

    (8) code -> code vardeclare EOL .

    RETURN          reduce using rule 8 (code -> code vardeclare EOL .)
    NAME            reduce using rule 8 (code -> code vardeclare EOL .)
    OPENPAR         reduce using rule 8 (code -> code vardeclare EOL .)
    FNAME           reduce using rule 8 (code -> code vardeclare EOL .)
    INT             reduce using rule 8 (code -> code vardeclare EOL .)
    FLOAT           reduce using rule 8 (code -> code vardeclare EOL .)
    WHILE           reduce using rule 8 (code -> code vardeclare EOL .)
    IF              reduce using rule 8 (code -> code vardeclare EOL .)
    TYPEFLOAT       reduce using rule 8 (code -> code vardeclare EOL .)
    TYPEINT         reduce using rule 8 (code -> code vardeclare EOL .)
    INPUT           reduce using rule 8 (code -> code vardeclare EOL .)
    OUTPUT          reduce using rule 8 (code -> code vardeclare EOL .)


state 45

    (9) code -> code varassign EOL .

    RETURN          reduce using rule 9 (code -> code varassign EOL .)
    NAME            reduce using rule 9 (code -> code varassign EOL .)
    OPENPAR         reduce using rule 9 (code -> code varassign EOL .)
    FNAME           reduce using rule 9 (code -> code varassign EOL .)
    INT             reduce using rule 9 (code -> code varassign EOL .)
    FLOAT           reduce using rule 9 (code -> code varassign EOL .)
    WHILE           reduce using rule 9 (code -> code varassign EOL .)
    IF              reduce using rule 9 (code -> code varassign EOL .)
    TYPEFLOAT       reduce using rule 9 (code -> code varassign EOL .)
    TYPEINT         reduce using rule 9 (code -> code varassign EOL .)
    INPUT           reduce using rule 9 (code -> code varassign EOL .)
    OUTPUT          reduce using rule 9 (code -> code varassign EOL .)


state 46

    (10) code -> code io EOL .

    RETURN          reduce using rule 10 (code -> code io EOL .)
    NAME            reduce using rule 10 (code -> code io EOL .)
    OPENPAR         reduce using rule 10 (code -> code io EOL .)
    FNAME           reduce using rule 10 (code -> code io EOL .)
    INT             reduce using rule 10 (code -> code io EOL .)
    FLOAT           reduce using rule 10 (code -> code io EOL .)
    WHILE           reduce using rule 10 (code -> code io EOL .)
    IF              reduce using rule 10 (code -> code io EOL .)
    TYPEFLOAT       reduce using rule 10 (code -> code io EOL .)
    TYPEINT         reduce using rule 10 (code -> code io EOL .)
    INPUT           reduce using rule 10 (code -> code io EOL .)
    OUTPUT          reduce using rule 10 (code -> code io EOL .)


state 47

    (57) vardeclare -> datatype NAME .

    EOL             reduce using rule 57 (vardeclare -> datatype NAME .)
    COMMA           reduce using rule 57 (vardeclare -> datatype NAME .)
    CLOSEPAR        reduce using rule 57 (vardeclare -> datatype NAME .)


state 48

    (58) varassign -> NAME EQUALS . expression
    (59) varassign -> NAME EQUALS . NAME
    (49) expression -> . expression oper expression
    (50) expression -> . OPENPAR expression CLOSEPAR
    (60) expression -> . FNAME OPENPAR varname CLOSEPAR
    (64) expression -> . INT
    (65) expression -> . FLOAT
    (66) expression -> . NAME

    NAME            shift and go to state 59
    OPENPAR         shift and go to state 23
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 60

state 49

    (15) io -> inputoutput OPENPAR . iodata CLOSEPAR
    (19) iodata -> . QUOTEMARK percenttype QUOTEMARK COMMA AND NAME

    QUOTEMARK       shift and go to state 62

    iodata                         shift and go to state 61

state 50

    (16) io -> inputoutput error .

    EOL             reduce using rule 16 (io -> inputoutput error .)


state 51

    (50) expression -> OPENPAR expression . CLOSEPAR
    (49) expression -> expression . oper expression
    (51) oper -> . EXP
    (52) oper -> . MULTIPLY
    (53) oper -> . DIVIDE
    (54) oper -> . PLUS
    (55) oper -> . MINUS
    (56) oper -> . EQUALS

    CLOSEPAR        shift and go to state 63
    EXP             shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    EQUALS          shift and go to state 43

    oper                           shift and go to state 37

state 52

    (60) expression -> FNAME OPENPAR . varname CLOSEPAR
    (61) varname -> . NAME COMMA varname
    (62) varname -> . NAME
    (63) varname -> . empty
    (67) empty -> .

    NAME            shift and go to state 65
    CLOSEPAR        reduce using rule 67 (empty -> .)

    varname                        shift and go to state 64
    empty                          shift and go to state 66

state 53

    (41) while -> WHILE OPENPAR . bool CLOSEPAR block
    (24) bool -> . expression boolop expression
    (25) bool -> . bool boolop bool
    (26) bool -> . expression boolop bool
    (27) bool -> . bool boolop expression
    (28) bool -> . NOT bool
    (29) bool -> . OPENPAR bool CLOSEPAR
    (49) expression -> . expression oper expression
    (50) expression -> . OPENPAR expression CLOSEPAR
    (60) expression -> . FNAME OPENPAR varname CLOSEPAR
    (64) expression -> . INT
    (65) expression -> . FLOAT
    (66) expression -> . NAME

    NOT             shift and go to state 70
    OPENPAR         shift and go to state 67
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35

    bool                           shift and go to state 68
    expression                     shift and go to state 69

state 54

    (38) if -> IF OPENPAR . bool CLOSEPAR block else
    (39) if -> IF OPENPAR . bool CLOSEPAR block
    (24) bool -> . expression boolop expression
    (25) bool -> . bool boolop bool
    (26) bool -> . expression boolop bool
    (27) bool -> . bool boolop expression
    (28) bool -> . NOT bool
    (29) bool -> . OPENPAR bool CLOSEPAR
    (49) expression -> . expression oper expression
    (50) expression -> . OPENPAR expression CLOSEPAR
    (60) expression -> . FNAME OPENPAR varname CLOSEPAR
    (64) expression -> . INT
    (65) expression -> . FLOAT
    (66) expression -> . NAME

    NOT             shift and go to state 70
    OPENPAR         shift and go to state 67
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35

    bool                           shift and go to state 71
    expression                     shift and go to state 69

state 55

    (4) funcname -> datatype FNAME OPENPAR parameters CLOSEPAR .

    OPENCURL        reduce using rule 4 (funcname -> datatype FNAME OPENPAR parameters CLOSEPAR .)


state 56

    (5) parameters -> vardeclare COMMA . parameters
    (5) parameters -> . vardeclare COMMA parameters
    (6) parameters -> . vardeclare
    (7) parameters -> . empty
    (57) vardeclare -> . datatype NAME
    (67) empty -> .
    (22) datatype -> . TYPEFLOAT
    (23) datatype -> . TYPEINT

    CLOSEPAR        reduce using rule 67 (empty -> .)
    TYPEFLOAT       shift and go to state 6
    TYPEINT         shift and go to state 7

    vardeclare                     shift and go to state 32
    parameters                     shift and go to state 72
    empty                          shift and go to state 33
    datatype                       shift and go to state 20

state 57

    (2) function -> function funcname OPENCURL code RETURN expression EOL . CLOSECURL

    CLOSECURL       shift and go to state 73


state 58

    (49) expression -> expression oper expression .
    (49) expression -> expression . oper expression
    (51) oper -> . EXP
    (52) oper -> . MULTIPLY
    (53) oper -> . DIVIDE
    (54) oper -> . PLUS
    (55) oper -> . MINUS
    (56) oper -> . EQUALS

  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
    EOL             reduce using rule 49 (expression -> expression oper expression .)
    CLOSEPAR        reduce using rule 49 (expression -> expression oper expression .)
    EQ              reduce using rule 49 (expression -> expression oper expression .)
    NEQ             reduce using rule 49 (expression -> expression oper expression .)
    LSS             reduce using rule 49 (expression -> expression oper expression .)
    GTR             reduce using rule 49 (expression -> expression oper expression .)
    LEQ             reduce using rule 49 (expression -> expression oper expression .)
    GEQ             reduce using rule 49 (expression -> expression oper expression .)
    AND             reduce using rule 49 (expression -> expression oper expression .)
    OR              reduce using rule 49 (expression -> expression oper expression .)
    EXP             shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    EQUALS          shift and go to state 43

  ! EXP             [ reduce using rule 49 (expression -> expression oper expression .) ]
  ! MULTIPLY        [ reduce using rule 49 (expression -> expression oper expression .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> expression oper expression .) ]
  ! PLUS            [ reduce using rule 49 (expression -> expression oper expression .) ]
  ! MINUS           [ reduce using rule 49 (expression -> expression oper expression .) ]
  ! EQUALS          [ reduce using rule 49 (expression -> expression oper expression .) ]

    oper                           shift and go to state 37

state 59

    (59) varassign -> NAME EQUALS NAME .
    (66) expression -> NAME .

  ! reduce/reduce conflict for EOL resolved using rule 59 (varassign -> NAME EQUALS NAME .)
    EOL             reduce using rule 59 (varassign -> NAME EQUALS NAME .)
    EXP             reduce using rule 66 (expression -> NAME .)
    MULTIPLY        reduce using rule 66 (expression -> NAME .)
    DIVIDE          reduce using rule 66 (expression -> NAME .)
    PLUS            reduce using rule 66 (expression -> NAME .)
    MINUS           reduce using rule 66 (expression -> NAME .)
    EQUALS          reduce using rule 66 (expression -> NAME .)

  ! EOL             [ reduce using rule 66 (expression -> NAME .) ]


state 60

    (58) varassign -> NAME EQUALS expression .
    (49) expression -> expression . oper expression
    (51) oper -> . EXP
    (52) oper -> . MULTIPLY
    (53) oper -> . DIVIDE
    (54) oper -> . PLUS
    (55) oper -> . MINUS
    (56) oper -> . EQUALS

    EOL             reduce using rule 58 (varassign -> NAME EQUALS expression .)
    EXP             shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    EQUALS          shift and go to state 43

    oper                           shift and go to state 37

state 61

    (15) io -> inputoutput OPENPAR iodata . CLOSEPAR

    CLOSEPAR        shift and go to state 74


state 62

    (19) iodata -> QUOTEMARK . percenttype QUOTEMARK COMMA AND NAME
    (20) percenttype -> . PERCENTFLOAT
    (21) percenttype -> . PERCENTINT

    PERCENTFLOAT    shift and go to state 76
    PERCENTINT      shift and go to state 77

    percenttype                    shift and go to state 75

state 63

    (50) expression -> OPENPAR expression CLOSEPAR .

    EOL             reduce using rule 50 (expression -> OPENPAR expression CLOSEPAR .)
    EXP             reduce using rule 50 (expression -> OPENPAR expression CLOSEPAR .)
    MULTIPLY        reduce using rule 50 (expression -> OPENPAR expression CLOSEPAR .)
    DIVIDE          reduce using rule 50 (expression -> OPENPAR expression CLOSEPAR .)
    PLUS            reduce using rule 50 (expression -> OPENPAR expression CLOSEPAR .)
    MINUS           reduce using rule 50 (expression -> OPENPAR expression CLOSEPAR .)
    EQUALS          reduce using rule 50 (expression -> OPENPAR expression CLOSEPAR .)
    CLOSEPAR        reduce using rule 50 (expression -> OPENPAR expression CLOSEPAR .)
    EQ              reduce using rule 50 (expression -> OPENPAR expression CLOSEPAR .)
    NEQ             reduce using rule 50 (expression -> OPENPAR expression CLOSEPAR .)
    LSS             reduce using rule 50 (expression -> OPENPAR expression CLOSEPAR .)
    GTR             reduce using rule 50 (expression -> OPENPAR expression CLOSEPAR .)
    LEQ             reduce using rule 50 (expression -> OPENPAR expression CLOSEPAR .)
    GEQ             reduce using rule 50 (expression -> OPENPAR expression CLOSEPAR .)
    AND             reduce using rule 50 (expression -> OPENPAR expression CLOSEPAR .)
    OR              reduce using rule 50 (expression -> OPENPAR expression CLOSEPAR .)


state 64

    (60) expression -> FNAME OPENPAR varname . CLOSEPAR

    CLOSEPAR        shift and go to state 78


state 65

    (61) varname -> NAME . COMMA varname
    (62) varname -> NAME .

    COMMA           shift and go to state 79
    CLOSEPAR        reduce using rule 62 (varname -> NAME .)


state 66

    (63) varname -> empty .

    CLOSEPAR        reduce using rule 63 (varname -> empty .)


state 67

    (29) bool -> OPENPAR . bool CLOSEPAR
    (50) expression -> OPENPAR . expression CLOSEPAR
    (24) bool -> . expression boolop expression
    (25) bool -> . bool boolop bool
    (26) bool -> . expression boolop bool
    (27) bool -> . bool boolop expression
    (28) bool -> . NOT bool
    (29) bool -> . OPENPAR bool CLOSEPAR
    (49) expression -> . expression oper expression
    (50) expression -> . OPENPAR expression CLOSEPAR
    (60) expression -> . FNAME OPENPAR varname CLOSEPAR
    (64) expression -> . INT
    (65) expression -> . FLOAT
    (66) expression -> . NAME

    NOT             shift and go to state 70
    OPENPAR         shift and go to state 67
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35

    bool                           shift and go to state 80
    expression                     shift and go to state 81

state 68

    (41) while -> WHILE OPENPAR bool . CLOSEPAR block
    (25) bool -> bool . boolop bool
    (27) bool -> bool . boolop expression
    (30) boolop -> . EQ
    (31) boolop -> . NEQ
    (32) boolop -> . LSS
    (33) boolop -> . GTR
    (34) boolop -> . LEQ
    (35) boolop -> . GEQ
    (36) boolop -> . AND
    (37) boolop -> . OR

    CLOSEPAR        shift and go to state 82
    EQ              shift and go to state 84
    NEQ             shift and go to state 85
    LSS             shift and go to state 86
    GTR             shift and go to state 87
    LEQ             shift and go to state 88
    GEQ             shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91

    boolop                         shift and go to state 83

state 69

    (24) bool -> expression . boolop expression
    (26) bool -> expression . boolop bool
    (49) expression -> expression . oper expression
    (30) boolop -> . EQ
    (31) boolop -> . NEQ
    (32) boolop -> . LSS
    (33) boolop -> . GTR
    (34) boolop -> . LEQ
    (35) boolop -> . GEQ
    (36) boolop -> . AND
    (37) boolop -> . OR
    (51) oper -> . EXP
    (52) oper -> . MULTIPLY
    (53) oper -> . DIVIDE
    (54) oper -> . PLUS
    (55) oper -> . MINUS
    (56) oper -> . EQUALS

    EQ              shift and go to state 84
    NEQ             shift and go to state 85
    LSS             shift and go to state 86
    GTR             shift and go to state 87
    LEQ             shift and go to state 88
    GEQ             shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    EXP             shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    EQUALS          shift and go to state 43

    boolop                         shift and go to state 92
    oper                           shift and go to state 37

state 70

    (28) bool -> NOT . bool
    (24) bool -> . expression boolop expression
    (25) bool -> . bool boolop bool
    (26) bool -> . expression boolop bool
    (27) bool -> . bool boolop expression
    (28) bool -> . NOT bool
    (29) bool -> . OPENPAR bool CLOSEPAR
    (49) expression -> . expression oper expression
    (50) expression -> . OPENPAR expression CLOSEPAR
    (60) expression -> . FNAME OPENPAR varname CLOSEPAR
    (64) expression -> . INT
    (65) expression -> . FLOAT
    (66) expression -> . NAME

    NOT             shift and go to state 70
    OPENPAR         shift and go to state 67
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35

    bool                           shift and go to state 93
    expression                     shift and go to state 69

state 71

    (38) if -> IF OPENPAR bool . CLOSEPAR block else
    (39) if -> IF OPENPAR bool . CLOSEPAR block
    (25) bool -> bool . boolop bool
    (27) bool -> bool . boolop expression
    (30) boolop -> . EQ
    (31) boolop -> . NEQ
    (32) boolop -> . LSS
    (33) boolop -> . GTR
    (34) boolop -> . LEQ
    (35) boolop -> . GEQ
    (36) boolop -> . AND
    (37) boolop -> . OR

    CLOSEPAR        shift and go to state 94
    EQ              shift and go to state 84
    NEQ             shift and go to state 85
    LSS             shift and go to state 86
    GTR             shift and go to state 87
    LEQ             shift and go to state 88
    GEQ             shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91

    boolop                         shift and go to state 83

state 72

    (5) parameters -> vardeclare COMMA parameters .

    CLOSEPAR        reduce using rule 5 (parameters -> vardeclare COMMA parameters .)


state 73

    (2) function -> function funcname OPENCURL code RETURN expression EOL CLOSECURL .

    TYPEFLOAT       reduce using rule 2 (function -> function funcname OPENCURL code RETURN expression EOL CLOSECURL .)
    TYPEINT         reduce using rule 2 (function -> function funcname OPENCURL code RETURN expression EOL CLOSECURL .)
    $end            reduce using rule 2 (function -> function funcname OPENCURL code RETURN expression EOL CLOSECURL .)


state 74

    (15) io -> inputoutput OPENPAR iodata CLOSEPAR .

    EOL             reduce using rule 15 (io -> inputoutput OPENPAR iodata CLOSEPAR .)


state 75

    (19) iodata -> QUOTEMARK percenttype . QUOTEMARK COMMA AND NAME

    QUOTEMARK       shift and go to state 95


state 76

    (20) percenttype -> PERCENTFLOAT .

    QUOTEMARK       reduce using rule 20 (percenttype -> PERCENTFLOAT .)


state 77

    (21) percenttype -> PERCENTINT .

    QUOTEMARK       reduce using rule 21 (percenttype -> PERCENTINT .)


state 78

    (60) expression -> FNAME OPENPAR varname CLOSEPAR .

    EOL             reduce using rule 60 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    EXP             reduce using rule 60 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    MULTIPLY        reduce using rule 60 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    DIVIDE          reduce using rule 60 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    PLUS            reduce using rule 60 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    MINUS           reduce using rule 60 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    EQUALS          reduce using rule 60 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    CLOSEPAR        reduce using rule 60 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    EQ              reduce using rule 60 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    NEQ             reduce using rule 60 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    LSS             reduce using rule 60 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    GTR             reduce using rule 60 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    LEQ             reduce using rule 60 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    GEQ             reduce using rule 60 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    AND             reduce using rule 60 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    OR              reduce using rule 60 (expression -> FNAME OPENPAR varname CLOSEPAR .)


state 79

    (61) varname -> NAME COMMA . varname
    (61) varname -> . NAME COMMA varname
    (62) varname -> . NAME
    (63) varname -> . empty
    (67) empty -> .

    NAME            shift and go to state 65
    CLOSEPAR        reduce using rule 67 (empty -> .)

    varname                        shift and go to state 96
    empty                          shift and go to state 66

state 80

    (29) bool -> OPENPAR bool . CLOSEPAR
    (25) bool -> bool . boolop bool
    (27) bool -> bool . boolop expression
    (30) boolop -> . EQ
    (31) boolop -> . NEQ
    (32) boolop -> . LSS
    (33) boolop -> . GTR
    (34) boolop -> . LEQ
    (35) boolop -> . GEQ
    (36) boolop -> . AND
    (37) boolop -> . OR

    CLOSEPAR        shift and go to state 97
    EQ              shift and go to state 84
    NEQ             shift and go to state 85
    LSS             shift and go to state 86
    GTR             shift and go to state 87
    LEQ             shift and go to state 88
    GEQ             shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91

    boolop                         shift and go to state 83

state 81

    (50) expression -> OPENPAR expression . CLOSEPAR
    (24) bool -> expression . boolop expression
    (26) bool -> expression . boolop bool
    (49) expression -> expression . oper expression
    (30) boolop -> . EQ
    (31) boolop -> . NEQ
    (32) boolop -> . LSS
    (33) boolop -> . GTR
    (34) boolop -> . LEQ
    (35) boolop -> . GEQ
    (36) boolop -> . AND
    (37) boolop -> . OR
    (51) oper -> . EXP
    (52) oper -> . MULTIPLY
    (53) oper -> . DIVIDE
    (54) oper -> . PLUS
    (55) oper -> . MINUS
    (56) oper -> . EQUALS

    CLOSEPAR        shift and go to state 63
    EQ              shift and go to state 84
    NEQ             shift and go to state 85
    LSS             shift and go to state 86
    GTR             shift and go to state 87
    LEQ             shift and go to state 88
    GEQ             shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    EXP             shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    EQUALS          shift and go to state 43

    boolop                         shift and go to state 92
    oper                           shift and go to state 37

state 82

    (41) while -> WHILE OPENPAR bool CLOSEPAR . block
    (42) block -> . OPENCURL while CLOSECURL
    (43) block -> . OPENCURL if CLOSECURL
    (44) block -> . OPENCURL bcode CLOSECURL

    OPENCURL        shift and go to state 99

    block                          shift and go to state 98

state 83

    (25) bool -> bool boolop . bool
    (27) bool -> bool boolop . expression
    (24) bool -> . expression boolop expression
    (25) bool -> . bool boolop bool
    (26) bool -> . expression boolop bool
    (27) bool -> . bool boolop expression
    (28) bool -> . NOT bool
    (29) bool -> . OPENPAR bool CLOSEPAR
    (49) expression -> . expression oper expression
    (50) expression -> . OPENPAR expression CLOSEPAR
    (60) expression -> . FNAME OPENPAR varname CLOSEPAR
    (64) expression -> . INT
    (65) expression -> . FLOAT
    (66) expression -> . NAME

    NOT             shift and go to state 70
    OPENPAR         shift and go to state 67
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35

    bool                           shift and go to state 100
    expression                     shift and go to state 101

state 84

    (30) boolop -> EQ .

    NOT             reduce using rule 30 (boolop -> EQ .)
    OPENPAR         reduce using rule 30 (boolop -> EQ .)
    FNAME           reduce using rule 30 (boolop -> EQ .)
    INT             reduce using rule 30 (boolop -> EQ .)
    FLOAT           reduce using rule 30 (boolop -> EQ .)
    NAME            reduce using rule 30 (boolop -> EQ .)


state 85

    (31) boolop -> NEQ .

    NOT             reduce using rule 31 (boolop -> NEQ .)
    OPENPAR         reduce using rule 31 (boolop -> NEQ .)
    FNAME           reduce using rule 31 (boolop -> NEQ .)
    INT             reduce using rule 31 (boolop -> NEQ .)
    FLOAT           reduce using rule 31 (boolop -> NEQ .)
    NAME            reduce using rule 31 (boolop -> NEQ .)


state 86

    (32) boolop -> LSS .

    NOT             reduce using rule 32 (boolop -> LSS .)
    OPENPAR         reduce using rule 32 (boolop -> LSS .)
    FNAME           reduce using rule 32 (boolop -> LSS .)
    INT             reduce using rule 32 (boolop -> LSS .)
    FLOAT           reduce using rule 32 (boolop -> LSS .)
    NAME            reduce using rule 32 (boolop -> LSS .)


state 87

    (33) boolop -> GTR .

    NOT             reduce using rule 33 (boolop -> GTR .)
    OPENPAR         reduce using rule 33 (boolop -> GTR .)
    FNAME           reduce using rule 33 (boolop -> GTR .)
    INT             reduce using rule 33 (boolop -> GTR .)
    FLOAT           reduce using rule 33 (boolop -> GTR .)
    NAME            reduce using rule 33 (boolop -> GTR .)


state 88

    (34) boolop -> LEQ .

    NOT             reduce using rule 34 (boolop -> LEQ .)
    OPENPAR         reduce using rule 34 (boolop -> LEQ .)
    FNAME           reduce using rule 34 (boolop -> LEQ .)
    INT             reduce using rule 34 (boolop -> LEQ .)
    FLOAT           reduce using rule 34 (boolop -> LEQ .)
    NAME            reduce using rule 34 (boolop -> LEQ .)


state 89

    (35) boolop -> GEQ .

    NOT             reduce using rule 35 (boolop -> GEQ .)
    OPENPAR         reduce using rule 35 (boolop -> GEQ .)
    FNAME           reduce using rule 35 (boolop -> GEQ .)
    INT             reduce using rule 35 (boolop -> GEQ .)
    FLOAT           reduce using rule 35 (boolop -> GEQ .)
    NAME            reduce using rule 35 (boolop -> GEQ .)


state 90

    (36) boolop -> AND .

    NOT             reduce using rule 36 (boolop -> AND .)
    OPENPAR         reduce using rule 36 (boolop -> AND .)
    FNAME           reduce using rule 36 (boolop -> AND .)
    INT             reduce using rule 36 (boolop -> AND .)
    FLOAT           reduce using rule 36 (boolop -> AND .)
    NAME            reduce using rule 36 (boolop -> AND .)


state 91

    (37) boolop -> OR .

    NOT             reduce using rule 37 (boolop -> OR .)
    OPENPAR         reduce using rule 37 (boolop -> OR .)
    FNAME           reduce using rule 37 (boolop -> OR .)
    INT             reduce using rule 37 (boolop -> OR .)
    FLOAT           reduce using rule 37 (boolop -> OR .)
    NAME            reduce using rule 37 (boolop -> OR .)


state 92

    (24) bool -> expression boolop . expression
    (26) bool -> expression boolop . bool
    (49) expression -> . expression oper expression
    (50) expression -> . OPENPAR expression CLOSEPAR
    (60) expression -> . FNAME OPENPAR varname CLOSEPAR
    (64) expression -> . INT
    (65) expression -> . FLOAT
    (66) expression -> . NAME
    (24) bool -> . expression boolop expression
    (25) bool -> . bool boolop bool
    (26) bool -> . expression boolop bool
    (27) bool -> . bool boolop expression
    (28) bool -> . NOT bool
    (29) bool -> . OPENPAR bool CLOSEPAR

    OPENPAR         shift and go to state 104
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35
    NOT             shift and go to state 70

    expression                     shift and go to state 102
    bool                           shift and go to state 103

state 93

    (28) bool -> NOT bool .
    (25) bool -> bool . boolop bool
    (27) bool -> bool . boolop expression
    (30) boolop -> . EQ
    (31) boolop -> . NEQ
    (32) boolop -> . LSS
    (33) boolop -> . GTR
    (34) boolop -> . LEQ
    (35) boolop -> . GEQ
    (36) boolop -> . AND
    (37) boolop -> . OR

    CLOSEPAR        reduce using rule 28 (bool -> NOT bool .)
    EQ              shift and go to state 84
    NEQ             shift and go to state 85
    LSS             shift and go to state 86
    GTR             shift and go to state 87
    LEQ             shift and go to state 88
    GEQ             shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91

  ! EQ              [ reduce using rule 28 (bool -> NOT bool .) ]
  ! NEQ             [ reduce using rule 28 (bool -> NOT bool .) ]
  ! LSS             [ reduce using rule 28 (bool -> NOT bool .) ]
  ! GTR             [ reduce using rule 28 (bool -> NOT bool .) ]
  ! LEQ             [ reduce using rule 28 (bool -> NOT bool .) ]
  ! GEQ             [ reduce using rule 28 (bool -> NOT bool .) ]
  ! AND             [ reduce using rule 28 (bool -> NOT bool .) ]
  ! OR              [ reduce using rule 28 (bool -> NOT bool .) ]

    boolop                         shift and go to state 83

state 94

    (38) if -> IF OPENPAR bool CLOSEPAR . block else
    (39) if -> IF OPENPAR bool CLOSEPAR . block
    (42) block -> . OPENCURL while CLOSECURL
    (43) block -> . OPENCURL if CLOSECURL
    (44) block -> . OPENCURL bcode CLOSECURL

    OPENCURL        shift and go to state 99

    block                          shift and go to state 105

state 95

    (19) iodata -> QUOTEMARK percenttype QUOTEMARK . COMMA AND NAME

    COMMA           shift and go to state 106


state 96

    (61) varname -> NAME COMMA varname .

    CLOSEPAR        reduce using rule 61 (varname -> NAME COMMA varname .)


state 97

    (29) bool -> OPENPAR bool CLOSEPAR .

    CLOSEPAR        reduce using rule 29 (bool -> OPENPAR bool CLOSEPAR .)
    EQ              reduce using rule 29 (bool -> OPENPAR bool CLOSEPAR .)
    NEQ             reduce using rule 29 (bool -> OPENPAR bool CLOSEPAR .)
    LSS             reduce using rule 29 (bool -> OPENPAR bool CLOSEPAR .)
    GTR             reduce using rule 29 (bool -> OPENPAR bool CLOSEPAR .)
    LEQ             reduce using rule 29 (bool -> OPENPAR bool CLOSEPAR .)
    GEQ             reduce using rule 29 (bool -> OPENPAR bool CLOSEPAR .)
    AND             reduce using rule 29 (bool -> OPENPAR bool CLOSEPAR .)
    OR              reduce using rule 29 (bool -> OPENPAR bool CLOSEPAR .)


state 98

    (41) while -> WHILE OPENPAR bool CLOSEPAR block .

    RETURN          reduce using rule 41 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    NAME            reduce using rule 41 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    OPENPAR         reduce using rule 41 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    FNAME           reduce using rule 41 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    INT             reduce using rule 41 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    FLOAT           reduce using rule 41 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    WHILE           reduce using rule 41 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    IF              reduce using rule 41 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    TYPEFLOAT       reduce using rule 41 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    TYPEINT         reduce using rule 41 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    INPUT           reduce using rule 41 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    OUTPUT          reduce using rule 41 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    CLOSECURL       reduce using rule 41 (while -> WHILE OPENPAR bool CLOSEPAR block .)


state 99

    (42) block -> OPENCURL . while CLOSECURL
    (43) block -> OPENCURL . if CLOSECURL
    (44) block -> OPENCURL . bcode CLOSECURL
    (41) while -> . WHILE OPENPAR bool CLOSEPAR block
    (38) if -> . IF OPENPAR bool CLOSEPAR block else
    (39) if -> . IF OPENPAR bool CLOSEPAR block
    (45) bcode -> . bcode io EOL
    (46) bcode -> . bcode expression EOL
    (47) bcode -> . bcode BREAK EOL
    (48) bcode -> . empty
    (67) empty -> .

    WHILE           shift and go to state 27
    IF              shift and go to state 28
    CLOSECURL       reduce using rule 67 (empty -> .)
    BREAK           reduce using rule 67 (empty -> .)
    OPENPAR         reduce using rule 67 (empty -> .)
    FNAME           reduce using rule 67 (empty -> .)
    INT             reduce using rule 67 (empty -> .)
    FLOAT           reduce using rule 67 (empty -> .)
    NAME            reduce using rule 67 (empty -> .)
    INPUT           reduce using rule 67 (empty -> .)
    OUTPUT          reduce using rule 67 (empty -> .)

    while                          shift and go to state 107
    if                             shift and go to state 108
    bcode                          shift and go to state 109
    empty                          shift and go to state 110

state 100

    (25) bool -> bool boolop bool .
    (25) bool -> bool . boolop bool
    (27) bool -> bool . boolop expression
    (30) boolop -> . EQ
    (31) boolop -> . NEQ
    (32) boolop -> . LSS
    (33) boolop -> . GTR
    (34) boolop -> . LEQ
    (35) boolop -> . GEQ
    (36) boolop -> . AND
    (37) boolop -> . OR

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LSS resolved as shift
  ! shift/reduce conflict for GTR resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSEPAR        reduce using rule 25 (bool -> bool boolop bool .)
    EQ              shift and go to state 84
    NEQ             shift and go to state 85
    LSS             shift and go to state 86
    GTR             shift and go to state 87
    LEQ             shift and go to state 88
    GEQ             shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91

  ! EQ              [ reduce using rule 25 (bool -> bool boolop bool .) ]
  ! NEQ             [ reduce using rule 25 (bool -> bool boolop bool .) ]
  ! LSS             [ reduce using rule 25 (bool -> bool boolop bool .) ]
  ! GTR             [ reduce using rule 25 (bool -> bool boolop bool .) ]
  ! LEQ             [ reduce using rule 25 (bool -> bool boolop bool .) ]
  ! GEQ             [ reduce using rule 25 (bool -> bool boolop bool .) ]
  ! AND             [ reduce using rule 25 (bool -> bool boolop bool .) ]
  ! OR              [ reduce using rule 25 (bool -> bool boolop bool .) ]

    boolop                         shift and go to state 83

state 101

    (27) bool -> bool boolop expression .
    (24) bool -> expression . boolop expression
    (26) bool -> expression . boolop bool
    (49) expression -> expression . oper expression
    (30) boolop -> . EQ
    (31) boolop -> . NEQ
    (32) boolop -> . LSS
    (33) boolop -> . GTR
    (34) boolop -> . LEQ
    (35) boolop -> . GEQ
    (36) boolop -> . AND
    (37) boolop -> . OR
    (51) oper -> . EXP
    (52) oper -> . MULTIPLY
    (53) oper -> . DIVIDE
    (54) oper -> . PLUS
    (55) oper -> . MINUS
    (56) oper -> . EQUALS

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LSS resolved as shift
  ! shift/reduce conflict for GTR resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSEPAR        reduce using rule 27 (bool -> bool boolop expression .)
    EQ              shift and go to state 84
    NEQ             shift and go to state 85
    LSS             shift and go to state 86
    GTR             shift and go to state 87
    LEQ             shift and go to state 88
    GEQ             shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91
    EXP             shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    EQUALS          shift and go to state 43

  ! EQ              [ reduce using rule 27 (bool -> bool boolop expression .) ]
  ! NEQ             [ reduce using rule 27 (bool -> bool boolop expression .) ]
  ! LSS             [ reduce using rule 27 (bool -> bool boolop expression .) ]
  ! GTR             [ reduce using rule 27 (bool -> bool boolop expression .) ]
  ! LEQ             [ reduce using rule 27 (bool -> bool boolop expression .) ]
  ! GEQ             [ reduce using rule 27 (bool -> bool boolop expression .) ]
  ! AND             [ reduce using rule 27 (bool -> bool boolop expression .) ]
  ! OR              [ reduce using rule 27 (bool -> bool boolop expression .) ]

    boolop                         shift and go to state 92
    oper                           shift and go to state 37

state 102

    (24) bool -> expression boolop expression .
    (49) expression -> expression . oper expression
    (24) bool -> expression . boolop expression
    (26) bool -> expression . boolop bool
    (51) oper -> . EXP
    (52) oper -> . MULTIPLY
    (53) oper -> . DIVIDE
    (54) oper -> . PLUS
    (55) oper -> . MINUS
    (56) oper -> . EQUALS
    (30) boolop -> . EQ
    (31) boolop -> . NEQ
    (32) boolop -> . LSS
    (33) boolop -> . GTR
    (34) boolop -> . LEQ
    (35) boolop -> . GEQ
    (36) boolop -> . AND
    (37) boolop -> . OR

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LSS resolved as shift
  ! shift/reduce conflict for GTR resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSEPAR        reduce using rule 24 (bool -> expression boolop expression .)
    EXP             shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    EQUALS          shift and go to state 43
    EQ              shift and go to state 84
    NEQ             shift and go to state 85
    LSS             shift and go to state 86
    GTR             shift and go to state 87
    LEQ             shift and go to state 88
    GEQ             shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91

  ! EQ              [ reduce using rule 24 (bool -> expression boolop expression .) ]
  ! NEQ             [ reduce using rule 24 (bool -> expression boolop expression .) ]
  ! LSS             [ reduce using rule 24 (bool -> expression boolop expression .) ]
  ! GTR             [ reduce using rule 24 (bool -> expression boolop expression .) ]
  ! LEQ             [ reduce using rule 24 (bool -> expression boolop expression .) ]
  ! GEQ             [ reduce using rule 24 (bool -> expression boolop expression .) ]
  ! AND             [ reduce using rule 24 (bool -> expression boolop expression .) ]
  ! OR              [ reduce using rule 24 (bool -> expression boolop expression .) ]

    boolop                         shift and go to state 92
    oper                           shift and go to state 37

state 103

    (26) bool -> expression boolop bool .
    (25) bool -> bool . boolop bool
    (27) bool -> bool . boolop expression
    (30) boolop -> . EQ
    (31) boolop -> . NEQ
    (32) boolop -> . LSS
    (33) boolop -> . GTR
    (34) boolop -> . LEQ
    (35) boolop -> . GEQ
    (36) boolop -> . AND
    (37) boolop -> . OR

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LSS resolved as shift
  ! shift/reduce conflict for GTR resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSEPAR        reduce using rule 26 (bool -> expression boolop bool .)
    EQ              shift and go to state 84
    NEQ             shift and go to state 85
    LSS             shift and go to state 86
    GTR             shift and go to state 87
    LEQ             shift and go to state 88
    GEQ             shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91

  ! EQ              [ reduce using rule 26 (bool -> expression boolop bool .) ]
  ! NEQ             [ reduce using rule 26 (bool -> expression boolop bool .) ]
  ! LSS             [ reduce using rule 26 (bool -> expression boolop bool .) ]
  ! GTR             [ reduce using rule 26 (bool -> expression boolop bool .) ]
  ! LEQ             [ reduce using rule 26 (bool -> expression boolop bool .) ]
  ! GEQ             [ reduce using rule 26 (bool -> expression boolop bool .) ]
  ! AND             [ reduce using rule 26 (bool -> expression boolop bool .) ]
  ! OR              [ reduce using rule 26 (bool -> expression boolop bool .) ]

    boolop                         shift and go to state 83

state 104

    (50) expression -> OPENPAR . expression CLOSEPAR
    (29) bool -> OPENPAR . bool CLOSEPAR
    (49) expression -> . expression oper expression
    (50) expression -> . OPENPAR expression CLOSEPAR
    (60) expression -> . FNAME OPENPAR varname CLOSEPAR
    (64) expression -> . INT
    (65) expression -> . FLOAT
    (66) expression -> . NAME
    (24) bool -> . expression boolop expression
    (25) bool -> . bool boolop bool
    (26) bool -> . expression boolop bool
    (27) bool -> . bool boolop expression
    (28) bool -> . NOT bool
    (29) bool -> . OPENPAR bool CLOSEPAR

    OPENPAR         shift and go to state 104
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35
    NOT             shift and go to state 70

    expression                     shift and go to state 111
    bool                           shift and go to state 80

state 105

    (38) if -> IF OPENPAR bool CLOSEPAR block . else
    (39) if -> IF OPENPAR bool CLOSEPAR block .
    (40) else -> . ELSE block

    RETURN          reduce using rule 39 (if -> IF OPENPAR bool CLOSEPAR block .)
    NAME            reduce using rule 39 (if -> IF OPENPAR bool CLOSEPAR block .)
    OPENPAR         reduce using rule 39 (if -> IF OPENPAR bool CLOSEPAR block .)
    FNAME           reduce using rule 39 (if -> IF OPENPAR bool CLOSEPAR block .)
    INT             reduce using rule 39 (if -> IF OPENPAR bool CLOSEPAR block .)
    FLOAT           reduce using rule 39 (if -> IF OPENPAR bool CLOSEPAR block .)
    WHILE           reduce using rule 39 (if -> IF OPENPAR bool CLOSEPAR block .)
    IF              reduce using rule 39 (if -> IF OPENPAR bool CLOSEPAR block .)
    TYPEFLOAT       reduce using rule 39 (if -> IF OPENPAR bool CLOSEPAR block .)
    TYPEINT         reduce using rule 39 (if -> IF OPENPAR bool CLOSEPAR block .)
    INPUT           reduce using rule 39 (if -> IF OPENPAR bool CLOSEPAR block .)
    OUTPUT          reduce using rule 39 (if -> IF OPENPAR bool CLOSEPAR block .)
    CLOSECURL       reduce using rule 39 (if -> IF OPENPAR bool CLOSEPAR block .)
    ELSE            shift and go to state 113

    else                           shift and go to state 112

state 106

    (19) iodata -> QUOTEMARK percenttype QUOTEMARK COMMA . AND NAME

    AND             shift and go to state 114


state 107

    (42) block -> OPENCURL while . CLOSECURL

    CLOSECURL       shift and go to state 115


state 108

    (43) block -> OPENCURL if . CLOSECURL

    CLOSECURL       shift and go to state 116


state 109

    (44) block -> OPENCURL bcode . CLOSECURL
    (45) bcode -> bcode . io EOL
    (46) bcode -> bcode . expression EOL
    (47) bcode -> bcode . BREAK EOL
    (15) io -> . inputoutput OPENPAR iodata CLOSEPAR
    (16) io -> . inputoutput error
    (49) expression -> . expression oper expression
    (50) expression -> . OPENPAR expression CLOSEPAR
    (60) expression -> . FNAME OPENPAR varname CLOSEPAR
    (64) expression -> . INT
    (65) expression -> . FLOAT
    (66) expression -> . NAME
    (17) inputoutput -> . INPUT
    (18) inputoutput -> . OUTPUT

    CLOSECURL       shift and go to state 117
    BREAK           shift and go to state 120
    OPENPAR         shift and go to state 23
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35
    INPUT           shift and go to state 29
    OUTPUT          shift and go to state 30

    io                             shift and go to state 118
    expression                     shift and go to state 119
    inputoutput                    shift and go to state 22

state 110

    (48) bcode -> empty .

    CLOSECURL       reduce using rule 48 (bcode -> empty .)
    BREAK           reduce using rule 48 (bcode -> empty .)
    OPENPAR         reduce using rule 48 (bcode -> empty .)
    FNAME           reduce using rule 48 (bcode -> empty .)
    INT             reduce using rule 48 (bcode -> empty .)
    FLOAT           reduce using rule 48 (bcode -> empty .)
    NAME            reduce using rule 48 (bcode -> empty .)
    INPUT           reduce using rule 48 (bcode -> empty .)
    OUTPUT          reduce using rule 48 (bcode -> empty .)


state 111

    (50) expression -> OPENPAR expression . CLOSEPAR
    (49) expression -> expression . oper expression
    (24) bool -> expression . boolop expression
    (26) bool -> expression . boolop bool
    (51) oper -> . EXP
    (52) oper -> . MULTIPLY
    (53) oper -> . DIVIDE
    (54) oper -> . PLUS
    (55) oper -> . MINUS
    (56) oper -> . EQUALS
    (30) boolop -> . EQ
    (31) boolop -> . NEQ
    (32) boolop -> . LSS
    (33) boolop -> . GTR
    (34) boolop -> . LEQ
    (35) boolop -> . GEQ
    (36) boolop -> . AND
    (37) boolop -> . OR

    CLOSEPAR        shift and go to state 63
    EXP             shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    EQUALS          shift and go to state 43
    EQ              shift and go to state 84
    NEQ             shift and go to state 85
    LSS             shift and go to state 86
    GTR             shift and go to state 87
    LEQ             shift and go to state 88
    GEQ             shift and go to state 89
    AND             shift and go to state 90
    OR              shift and go to state 91

    oper                           shift and go to state 37
    boolop                         shift and go to state 92

state 112

    (38) if -> IF OPENPAR bool CLOSEPAR block else .

    RETURN          reduce using rule 38 (if -> IF OPENPAR bool CLOSEPAR block else .)
    NAME            reduce using rule 38 (if -> IF OPENPAR bool CLOSEPAR block else .)
    OPENPAR         reduce using rule 38 (if -> IF OPENPAR bool CLOSEPAR block else .)
    FNAME           reduce using rule 38 (if -> IF OPENPAR bool CLOSEPAR block else .)
    INT             reduce using rule 38 (if -> IF OPENPAR bool CLOSEPAR block else .)
    FLOAT           reduce using rule 38 (if -> IF OPENPAR bool CLOSEPAR block else .)
    WHILE           reduce using rule 38 (if -> IF OPENPAR bool CLOSEPAR block else .)
    IF              reduce using rule 38 (if -> IF OPENPAR bool CLOSEPAR block else .)
    TYPEFLOAT       reduce using rule 38 (if -> IF OPENPAR bool CLOSEPAR block else .)
    TYPEINT         reduce using rule 38 (if -> IF OPENPAR bool CLOSEPAR block else .)
    INPUT           reduce using rule 38 (if -> IF OPENPAR bool CLOSEPAR block else .)
    OUTPUT          reduce using rule 38 (if -> IF OPENPAR bool CLOSEPAR block else .)
    CLOSECURL       reduce using rule 38 (if -> IF OPENPAR bool CLOSEPAR block else .)


state 113

    (40) else -> ELSE . block
    (42) block -> . OPENCURL while CLOSECURL
    (43) block -> . OPENCURL if CLOSECURL
    (44) block -> . OPENCURL bcode CLOSECURL

    OPENCURL        shift and go to state 99

    block                          shift and go to state 121

state 114

    (19) iodata -> QUOTEMARK percenttype QUOTEMARK COMMA AND . NAME

    NAME            shift and go to state 122


state 115

    (42) block -> OPENCURL while CLOSECURL .

    RETURN          reduce using rule 42 (block -> OPENCURL while CLOSECURL .)
    NAME            reduce using rule 42 (block -> OPENCURL while CLOSECURL .)
    OPENPAR         reduce using rule 42 (block -> OPENCURL while CLOSECURL .)
    FNAME           reduce using rule 42 (block -> OPENCURL while CLOSECURL .)
    INT             reduce using rule 42 (block -> OPENCURL while CLOSECURL .)
    FLOAT           reduce using rule 42 (block -> OPENCURL while CLOSECURL .)
    WHILE           reduce using rule 42 (block -> OPENCURL while CLOSECURL .)
    IF              reduce using rule 42 (block -> OPENCURL while CLOSECURL .)
    TYPEFLOAT       reduce using rule 42 (block -> OPENCURL while CLOSECURL .)
    TYPEINT         reduce using rule 42 (block -> OPENCURL while CLOSECURL .)
    INPUT           reduce using rule 42 (block -> OPENCURL while CLOSECURL .)
    OUTPUT          reduce using rule 42 (block -> OPENCURL while CLOSECURL .)
    CLOSECURL       reduce using rule 42 (block -> OPENCURL while CLOSECURL .)
    ELSE            reduce using rule 42 (block -> OPENCURL while CLOSECURL .)


state 116

    (43) block -> OPENCURL if CLOSECURL .

    RETURN          reduce using rule 43 (block -> OPENCURL if CLOSECURL .)
    NAME            reduce using rule 43 (block -> OPENCURL if CLOSECURL .)
    OPENPAR         reduce using rule 43 (block -> OPENCURL if CLOSECURL .)
    FNAME           reduce using rule 43 (block -> OPENCURL if CLOSECURL .)
    INT             reduce using rule 43 (block -> OPENCURL if CLOSECURL .)
    FLOAT           reduce using rule 43 (block -> OPENCURL if CLOSECURL .)
    WHILE           reduce using rule 43 (block -> OPENCURL if CLOSECURL .)
    IF              reduce using rule 43 (block -> OPENCURL if CLOSECURL .)
    TYPEFLOAT       reduce using rule 43 (block -> OPENCURL if CLOSECURL .)
    TYPEINT         reduce using rule 43 (block -> OPENCURL if CLOSECURL .)
    INPUT           reduce using rule 43 (block -> OPENCURL if CLOSECURL .)
    OUTPUT          reduce using rule 43 (block -> OPENCURL if CLOSECURL .)
    CLOSECURL       reduce using rule 43 (block -> OPENCURL if CLOSECURL .)
    ELSE            reduce using rule 43 (block -> OPENCURL if CLOSECURL .)


state 117

    (44) block -> OPENCURL bcode CLOSECURL .

    RETURN          reduce using rule 44 (block -> OPENCURL bcode CLOSECURL .)
    NAME            reduce using rule 44 (block -> OPENCURL bcode CLOSECURL .)
    OPENPAR         reduce using rule 44 (block -> OPENCURL bcode CLOSECURL .)
    FNAME           reduce using rule 44 (block -> OPENCURL bcode CLOSECURL .)
    INT             reduce using rule 44 (block -> OPENCURL bcode CLOSECURL .)
    FLOAT           reduce using rule 44 (block -> OPENCURL bcode CLOSECURL .)
    WHILE           reduce using rule 44 (block -> OPENCURL bcode CLOSECURL .)
    IF              reduce using rule 44 (block -> OPENCURL bcode CLOSECURL .)
    TYPEFLOAT       reduce using rule 44 (block -> OPENCURL bcode CLOSECURL .)
    TYPEINT         reduce using rule 44 (block -> OPENCURL bcode CLOSECURL .)
    INPUT           reduce using rule 44 (block -> OPENCURL bcode CLOSECURL .)
    OUTPUT          reduce using rule 44 (block -> OPENCURL bcode CLOSECURL .)
    CLOSECURL       reduce using rule 44 (block -> OPENCURL bcode CLOSECURL .)
    ELSE            reduce using rule 44 (block -> OPENCURL bcode CLOSECURL .)


state 118

    (45) bcode -> bcode io . EOL

    EOL             shift and go to state 123


state 119

    (46) bcode -> bcode expression . EOL
    (49) expression -> expression . oper expression
    (51) oper -> . EXP
    (52) oper -> . MULTIPLY
    (53) oper -> . DIVIDE
    (54) oper -> . PLUS
    (55) oper -> . MINUS
    (56) oper -> . EQUALS

    EOL             shift and go to state 124
    EXP             shift and go to state 38
    MULTIPLY        shift and go to state 39
    DIVIDE          shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    EQUALS          shift and go to state 43

    oper                           shift and go to state 37

state 120

    (47) bcode -> bcode BREAK . EOL

    EOL             shift and go to state 125


state 121

    (40) else -> ELSE block .

    RETURN          reduce using rule 40 (else -> ELSE block .)
    NAME            reduce using rule 40 (else -> ELSE block .)
    OPENPAR         reduce using rule 40 (else -> ELSE block .)
    FNAME           reduce using rule 40 (else -> ELSE block .)
    INT             reduce using rule 40 (else -> ELSE block .)
    FLOAT           reduce using rule 40 (else -> ELSE block .)
    WHILE           reduce using rule 40 (else -> ELSE block .)
    IF              reduce using rule 40 (else -> ELSE block .)
    TYPEFLOAT       reduce using rule 40 (else -> ELSE block .)
    TYPEINT         reduce using rule 40 (else -> ELSE block .)
    INPUT           reduce using rule 40 (else -> ELSE block .)
    OUTPUT          reduce using rule 40 (else -> ELSE block .)
    CLOSECURL       reduce using rule 40 (else -> ELSE block .)


state 122

    (19) iodata -> QUOTEMARK percenttype QUOTEMARK COMMA AND NAME .

    CLOSEPAR        reduce using rule 19 (iodata -> QUOTEMARK percenttype QUOTEMARK COMMA AND NAME .)


state 123

    (45) bcode -> bcode io EOL .

    CLOSECURL       reduce using rule 45 (bcode -> bcode io EOL .)
    BREAK           reduce using rule 45 (bcode -> bcode io EOL .)
    OPENPAR         reduce using rule 45 (bcode -> bcode io EOL .)
    FNAME           reduce using rule 45 (bcode -> bcode io EOL .)
    INT             reduce using rule 45 (bcode -> bcode io EOL .)
    FLOAT           reduce using rule 45 (bcode -> bcode io EOL .)
    NAME            reduce using rule 45 (bcode -> bcode io EOL .)
    INPUT           reduce using rule 45 (bcode -> bcode io EOL .)
    OUTPUT          reduce using rule 45 (bcode -> bcode io EOL .)


state 124

    (46) bcode -> bcode expression EOL .

    CLOSECURL       reduce using rule 46 (bcode -> bcode expression EOL .)
    BREAK           reduce using rule 46 (bcode -> bcode expression EOL .)
    OPENPAR         reduce using rule 46 (bcode -> bcode expression EOL .)
    FNAME           reduce using rule 46 (bcode -> bcode expression EOL .)
    INT             reduce using rule 46 (bcode -> bcode expression EOL .)
    FLOAT           reduce using rule 46 (bcode -> bcode expression EOL .)
    NAME            reduce using rule 46 (bcode -> bcode expression EOL .)
    INPUT           reduce using rule 46 (bcode -> bcode expression EOL .)
    OUTPUT          reduce using rule 46 (bcode -> bcode expression EOL .)


state 125

    (47) bcode -> bcode BREAK EOL .

    CLOSECURL       reduce using rule 47 (bcode -> bcode BREAK EOL .)
    BREAK           reduce using rule 47 (bcode -> bcode BREAK EOL .)
    OPENPAR         reduce using rule 47 (bcode -> bcode BREAK EOL .)
    FNAME           reduce using rule 47 (bcode -> bcode BREAK EOL .)
    INT             reduce using rule 47 (bcode -> bcode BREAK EOL .)
    FLOAT           reduce using rule 47 (bcode -> bcode BREAK EOL .)
    NAME            reduce using rule 47 (bcode -> bcode BREAK EOL .)
    INPUT           reduce using rule 47 (bcode -> bcode BREAK EOL .)
    OUTPUT          reduce using rule 47 (bcode -> bcode BREAK EOL .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQUALS in state 21 resolved as shift
WARNING: shift/reduce conflict for EXP in state 58 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 58 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 58 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 58 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 58 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 58 resolved as shift
WARNING: shift/reduce conflict for EQ in state 100 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 100 resolved as shift
WARNING: shift/reduce conflict for LSS in state 100 resolved as shift
WARNING: shift/reduce conflict for GTR in state 100 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 100 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 100 resolved as shift
WARNING: shift/reduce conflict for AND in state 100 resolved as shift
WARNING: shift/reduce conflict for OR in state 100 resolved as shift
WARNING: shift/reduce conflict for EQ in state 101 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 101 resolved as shift
WARNING: shift/reduce conflict for LSS in state 101 resolved as shift
WARNING: shift/reduce conflict for GTR in state 101 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 101 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 101 resolved as shift
WARNING: shift/reduce conflict for AND in state 101 resolved as shift
WARNING: shift/reduce conflict for OR in state 101 resolved as shift
WARNING: shift/reduce conflict for EQ in state 102 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 102 resolved as shift
WARNING: shift/reduce conflict for LSS in state 102 resolved as shift
WARNING: shift/reduce conflict for GTR in state 102 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 102 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 102 resolved as shift
WARNING: shift/reduce conflict for AND in state 102 resolved as shift
WARNING: shift/reduce conflict for OR in state 102 resolved as shift
WARNING: shift/reduce conflict for EQ in state 103 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 103 resolved as shift
WARNING: shift/reduce conflict for LSS in state 103 resolved as shift
WARNING: shift/reduce conflict for GTR in state 103 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 103 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 103 resolved as shift
WARNING: shift/reduce conflict for OR in state 103 resolved as shift
WARNING: reduce/reduce conflict in state 59 resolved using rule (varassign -> NAME EQUALS NAME)
WARNING: rejected rule (expression -> NAME) in state 59
