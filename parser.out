Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    FOR
    MAIN
    NEWLINE
    NOT
    STRING
    THEN
    TO
    TYPESTRING

Grammar

Rule 0     S' -> begin
Rule 1     begin -> function
Rule 2     function -> function funcname OPENCURL code RETURN expression EOL CLOSECURL
Rule 3     function -> empty
Rule 4     funcname -> datatype FNAME OPENPAR parameters CLOSEPAR
Rule 5     parameters -> vardeclare COMMA parameters
Rule 6     parameters -> vardeclare
Rule 7     parameters -> empty
Rule 8     code -> code vardeclare EOL
Rule 9     code -> code varassign EOL
Rule 10    code -> code io EOL
Rule 11    code -> code expression EOL
Rule 12    code -> code while
Rule 13    code -> code if
Rule 14    code -> empty
Rule 15    io -> inputoutput OPENPAR iodata CLOSEPAR
Rule 16    io -> inputoutput error
Rule 17    inputoutput -> INPUT
Rule 18    inputoutput -> OUTPUT
Rule 19    iodata -> QUOTEMARK percenttype QUOTEMARK COMMA AND NAME
Rule 20    percenttype -> PERCENTFLOAT
Rule 21    percenttype -> PERCENTINT
Rule 22    datatype -> TYPEFLOAT
Rule 23    datatype -> TYPEINT
Rule 24    bool -> expression boolop expression
Rule 25    bool -> bool boolop bool
Rule 26    bool -> expression boolop bool
Rule 27    bool -> bool boolop expression
Rule 28    boolop -> EQ
Rule 29    boolop -> NEQ
Rule 30    boolop -> LSS
Rule 31    boolop -> GTR
Rule 32    boolop -> LEQ
Rule 33    boolop -> GEQ
Rule 34    boolop -> AND
Rule 35    boolop -> OR
Rule 36    if -> IF OPENPAR bool CLOSEPAR block else
Rule 37    if -> IF OPENPAR bool CLOSEPAR block
Rule 38    else -> ELSE block
Rule 39    while -> WHILE OPENPAR bool CLOSEPAR block
Rule 40    block -> OPENCURL while CLOSECURL
Rule 41    block -> OPENCURL if CLOSECURL
Rule 42    block -> OPENCURL bcode CLOSECURL
Rule 43    bcode -> bcode io EOL
Rule 44    bcode -> bcode expression EOL
Rule 45    bcode -> bcode BREAK EOL
Rule 46    bcode -> empty
Rule 47    expression -> expression EXP expression
Rule 48    expression -> expression MULTIPLY expression
Rule 49    expression -> expression DIVIDE expression
Rule 50    expression -> expression PLUS expression
Rule 51    expression -> expression MINUS expression
Rule 52    expression -> OPENPAR expression CLOSEPAR
Rule 53    vardeclare -> datatype NAME
Rule 54    varassign -> NAME EQUALS expression
Rule 55    varassign -> NAME EQUALS NAME
Rule 56    expression -> FNAME OPENPAR varname CLOSEPAR
Rule 57    varname -> NAME COMMA varname
Rule 58    varname -> NAME
Rule 59    varname -> empty
Rule 60    expression -> INT
Rule 61    expression -> FLOAT
Rule 62    expression -> NAME
Rule 63    empty -> <empty>

Terminals, with rules where they appear

AND                  : 19 34
BREAK                : 45
CLOSECURL            : 2 40 41 42
CLOSEPAR             : 4 15 36 37 39 52 56
COMMA                : 5 19 57
COMMENT              : 
DIVIDE               : 49
ELSE                 : 38
EOL                  : 2 8 9 10 11 43 44 45
EQ                   : 28
EQUALS               : 54 55
EXP                  : 47
FLOAT                : 61
FNAME                : 4 56
FOR                  : 
GEQ                  : 33
GTR                  : 31
IF                   : 36 37
INPUT                : 17
INT                  : 60
LEQ                  : 32
LSS                  : 30
MAIN                 : 
MINUS                : 51
MULTIPLY             : 48
NAME                 : 19 53 54 55 55 57 58 62
NEQ                  : 29
NEWLINE              : 
NOT                  : 
OPENCURL             : 2 40 41 42
OPENPAR              : 4 15 36 37 39 52 56
OR                   : 35
OUTPUT               : 18
PERCENTFLOAT         : 20
PERCENTINT           : 21
PLUS                 : 50
QUOTEMARK            : 19 19
RETURN               : 2
STRING               : 
THEN                 : 
TO                   : 
TYPEFLOAT            : 22
TYPEINT              : 23
TYPESTRING           : 
WHILE                : 39
error                : 16

Nonterminals, with rules where they appear

bcode                : 42 43 44 45
begin                : 0
block                : 36 37 38 39
bool                 : 25 25 26 27 36 37 39
boolop               : 24 25 26 27
code                 : 2 8 9 10 11 12 13
datatype             : 4 53
else                 : 36
empty                : 3 7 14 46 59
expression           : 2 11 24 24 26 27 44 47 47 48 48 49 49 50 50 51 51 52 54
funcname             : 2
function             : 1 2
if                   : 13 41
inputoutput          : 15 16
io                   : 10 43
iodata               : 15
parameters           : 4 5
percenttype          : 19
varassign            : 9
vardeclare           : 5 6 8
varname              : 56 57
while                : 12 40

Parsing method: LALR

state 0

    (0) S' -> . begin
    (1) begin -> . function
    (2) function -> . function funcname OPENCURL code RETURN expression EOL CLOSECURL
    (3) function -> . empty
    (63) empty -> .

    TYPEFLOAT       reduce using rule 63 (empty -> .)
    TYPEINT         reduce using rule 63 (empty -> .)
    $end            reduce using rule 63 (empty -> .)

    begin                          shift and go to state 1
    function                       shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> begin .



state 2

    (1) begin -> function .
    (2) function -> function . funcname OPENCURL code RETURN expression EOL CLOSECURL
    (4) funcname -> . datatype FNAME OPENPAR parameters CLOSEPAR
    (22) datatype -> . TYPEFLOAT
    (23) datatype -> . TYPEINT

    $end            reduce using rule 1 (begin -> function .)
    TYPEFLOAT       shift and go to state 6
    TYPEINT         shift and go to state 7

    funcname                       shift and go to state 4
    datatype                       shift and go to state 5

state 3

    (3) function -> empty .

    TYPEFLOAT       reduce using rule 3 (function -> empty .)
    TYPEINT         reduce using rule 3 (function -> empty .)
    $end            reduce using rule 3 (function -> empty .)


state 4

    (2) function -> function funcname . OPENCURL code RETURN expression EOL CLOSECURL

    OPENCURL        shift and go to state 8


state 5

    (4) funcname -> datatype . FNAME OPENPAR parameters CLOSEPAR

    FNAME           shift and go to state 9


state 6

    (22) datatype -> TYPEFLOAT .

    FNAME           reduce using rule 22 (datatype -> TYPEFLOAT .)
    NAME            reduce using rule 22 (datatype -> TYPEFLOAT .)


state 7

    (23) datatype -> TYPEINT .

    FNAME           reduce using rule 23 (datatype -> TYPEINT .)
    NAME            reduce using rule 23 (datatype -> TYPEINT .)


state 8

    (2) function -> function funcname OPENCURL . code RETURN expression EOL CLOSECURL
    (8) code -> . code vardeclare EOL
    (9) code -> . code varassign EOL
    (10) code -> . code io EOL
    (11) code -> . code expression EOL
    (12) code -> . code while
    (13) code -> . code if
    (14) code -> . empty
    (63) empty -> .

    RETURN          reduce using rule 63 (empty -> .)
    NAME            reduce using rule 63 (empty -> .)
    OPENPAR         reduce using rule 63 (empty -> .)
    FNAME           reduce using rule 63 (empty -> .)
    INT             reduce using rule 63 (empty -> .)
    FLOAT           reduce using rule 63 (empty -> .)
    WHILE           reduce using rule 63 (empty -> .)
    IF              reduce using rule 63 (empty -> .)
    TYPEFLOAT       reduce using rule 63 (empty -> .)
    TYPEINT         reduce using rule 63 (empty -> .)
    INPUT           reduce using rule 63 (empty -> .)
    OUTPUT          reduce using rule 63 (empty -> .)

    code                           shift and go to state 10
    empty                          shift and go to state 11

state 9

    (4) funcname -> datatype FNAME . OPENPAR parameters CLOSEPAR

    OPENPAR         shift and go to state 12


state 10

    (2) function -> function funcname OPENCURL code . RETURN expression EOL CLOSECURL
    (8) code -> code . vardeclare EOL
    (9) code -> code . varassign EOL
    (10) code -> code . io EOL
    (11) code -> code . expression EOL
    (12) code -> code . while
    (13) code -> code . if
    (53) vardeclare -> . datatype NAME
    (54) varassign -> . NAME EQUALS expression
    (55) varassign -> . NAME EQUALS NAME
    (15) io -> . inputoutput OPENPAR iodata CLOSEPAR
    (16) io -> . inputoutput error
    (47) expression -> . expression EXP expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . OPENPAR expression CLOSEPAR
    (56) expression -> . FNAME OPENPAR varname CLOSEPAR
    (60) expression -> . INT
    (61) expression -> . FLOAT
    (62) expression -> . NAME
    (39) while -> . WHILE OPENPAR bool CLOSEPAR block
    (36) if -> . IF OPENPAR bool CLOSEPAR block else
    (37) if -> . IF OPENPAR bool CLOSEPAR block
    (22) datatype -> . TYPEFLOAT
    (23) datatype -> . TYPEINT
    (17) inputoutput -> . INPUT
    (18) inputoutput -> . OUTPUT

    RETURN          shift and go to state 13
    NAME            shift and go to state 21
    OPENPAR         shift and go to state 23
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    WHILE           shift and go to state 27
    IF              shift and go to state 28
    TYPEFLOAT       shift and go to state 6
    TYPEINT         shift and go to state 7
    INPUT           shift and go to state 29
    OUTPUT          shift and go to state 30

    expression                     shift and go to state 14
    vardeclare                     shift and go to state 15
    varassign                      shift and go to state 16
    io                             shift and go to state 17
    while                          shift and go to state 18
    if                             shift and go to state 19
    datatype                       shift and go to state 20
    inputoutput                    shift and go to state 22

state 11

    (14) code -> empty .

    RETURN          reduce using rule 14 (code -> empty .)
    NAME            reduce using rule 14 (code -> empty .)
    OPENPAR         reduce using rule 14 (code -> empty .)
    FNAME           reduce using rule 14 (code -> empty .)
    INT             reduce using rule 14 (code -> empty .)
    FLOAT           reduce using rule 14 (code -> empty .)
    WHILE           reduce using rule 14 (code -> empty .)
    IF              reduce using rule 14 (code -> empty .)
    TYPEFLOAT       reduce using rule 14 (code -> empty .)
    TYPEINT         reduce using rule 14 (code -> empty .)
    INPUT           reduce using rule 14 (code -> empty .)
    OUTPUT          reduce using rule 14 (code -> empty .)


state 12

    (4) funcname -> datatype FNAME OPENPAR . parameters CLOSEPAR
    (5) parameters -> . vardeclare COMMA parameters
    (6) parameters -> . vardeclare
    (7) parameters -> . empty
    (53) vardeclare -> . datatype NAME
    (63) empty -> .
    (22) datatype -> . TYPEFLOAT
    (23) datatype -> . TYPEINT

    CLOSEPAR        reduce using rule 63 (empty -> .)
    TYPEFLOAT       shift and go to state 6
    TYPEINT         shift and go to state 7

    datatype                       shift and go to state 20
    parameters                     shift and go to state 31
    vardeclare                     shift and go to state 32
    empty                          shift and go to state 33

state 13

    (2) function -> function funcname OPENCURL code RETURN . expression EOL CLOSECURL
    (47) expression -> . expression EXP expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . OPENPAR expression CLOSEPAR
    (56) expression -> . FNAME OPENPAR varname CLOSEPAR
    (60) expression -> . INT
    (61) expression -> . FLOAT
    (62) expression -> . NAME

    OPENPAR         shift and go to state 23
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35

    expression                     shift and go to state 34

state 14

    (11) code -> code expression . EOL
    (47) expression -> expression . EXP expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression

    EOL             shift and go to state 36
    EXP             shift and go to state 37
    MULTIPLY        shift and go to state 38
    DIVIDE          shift and go to state 39
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41


state 15

    (8) code -> code vardeclare . EOL

    EOL             shift and go to state 42


state 16

    (9) code -> code varassign . EOL

    EOL             shift and go to state 43


state 17

    (10) code -> code io . EOL

    EOL             shift and go to state 44


state 18

    (12) code -> code while .

    RETURN          reduce using rule 12 (code -> code while .)
    NAME            reduce using rule 12 (code -> code while .)
    OPENPAR         reduce using rule 12 (code -> code while .)
    FNAME           reduce using rule 12 (code -> code while .)
    INT             reduce using rule 12 (code -> code while .)
    FLOAT           reduce using rule 12 (code -> code while .)
    WHILE           reduce using rule 12 (code -> code while .)
    IF              reduce using rule 12 (code -> code while .)
    TYPEFLOAT       reduce using rule 12 (code -> code while .)
    TYPEINT         reduce using rule 12 (code -> code while .)
    INPUT           reduce using rule 12 (code -> code while .)
    OUTPUT          reduce using rule 12 (code -> code while .)


state 19

    (13) code -> code if .

    RETURN          reduce using rule 13 (code -> code if .)
    NAME            reduce using rule 13 (code -> code if .)
    OPENPAR         reduce using rule 13 (code -> code if .)
    FNAME           reduce using rule 13 (code -> code if .)
    INT             reduce using rule 13 (code -> code if .)
    FLOAT           reduce using rule 13 (code -> code if .)
    WHILE           reduce using rule 13 (code -> code if .)
    IF              reduce using rule 13 (code -> code if .)
    TYPEFLOAT       reduce using rule 13 (code -> code if .)
    TYPEINT         reduce using rule 13 (code -> code if .)
    INPUT           reduce using rule 13 (code -> code if .)
    OUTPUT          reduce using rule 13 (code -> code if .)


state 20

    (53) vardeclare -> datatype . NAME

    NAME            shift and go to state 45


state 21

    (54) varassign -> NAME . EQUALS expression
    (55) varassign -> NAME . EQUALS NAME
    (62) expression -> NAME .

    EQUALS          shift and go to state 46
    EOL             reduce using rule 62 (expression -> NAME .)
    EXP             reduce using rule 62 (expression -> NAME .)
    MULTIPLY        reduce using rule 62 (expression -> NAME .)
    DIVIDE          reduce using rule 62 (expression -> NAME .)
    PLUS            reduce using rule 62 (expression -> NAME .)
    MINUS           reduce using rule 62 (expression -> NAME .)


state 22

    (15) io -> inputoutput . OPENPAR iodata CLOSEPAR
    (16) io -> inputoutput . error

    OPENPAR         shift and go to state 47
    error           shift and go to state 48


state 23

    (52) expression -> OPENPAR . expression CLOSEPAR
    (47) expression -> . expression EXP expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . OPENPAR expression CLOSEPAR
    (56) expression -> . FNAME OPENPAR varname CLOSEPAR
    (60) expression -> . INT
    (61) expression -> . FLOAT
    (62) expression -> . NAME

    OPENPAR         shift and go to state 23
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35

    expression                     shift and go to state 49

state 24

    (56) expression -> FNAME . OPENPAR varname CLOSEPAR

    OPENPAR         shift and go to state 50


state 25

    (60) expression -> INT .

    EOL             reduce using rule 60 (expression -> INT .)
    EXP             reduce using rule 60 (expression -> INT .)
    MULTIPLY        reduce using rule 60 (expression -> INT .)
    DIVIDE          reduce using rule 60 (expression -> INT .)
    PLUS            reduce using rule 60 (expression -> INT .)
    MINUS           reduce using rule 60 (expression -> INT .)
    CLOSEPAR        reduce using rule 60 (expression -> INT .)
    EQ              reduce using rule 60 (expression -> INT .)
    NEQ             reduce using rule 60 (expression -> INT .)
    LSS             reduce using rule 60 (expression -> INT .)
    GTR             reduce using rule 60 (expression -> INT .)
    LEQ             reduce using rule 60 (expression -> INT .)
    GEQ             reduce using rule 60 (expression -> INT .)
    AND             reduce using rule 60 (expression -> INT .)
    OR              reduce using rule 60 (expression -> INT .)


state 26

    (61) expression -> FLOAT .

    EOL             reduce using rule 61 (expression -> FLOAT .)
    EXP             reduce using rule 61 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 61 (expression -> FLOAT .)
    DIVIDE          reduce using rule 61 (expression -> FLOAT .)
    PLUS            reduce using rule 61 (expression -> FLOAT .)
    MINUS           reduce using rule 61 (expression -> FLOAT .)
    CLOSEPAR        reduce using rule 61 (expression -> FLOAT .)
    EQ              reduce using rule 61 (expression -> FLOAT .)
    NEQ             reduce using rule 61 (expression -> FLOAT .)
    LSS             reduce using rule 61 (expression -> FLOAT .)
    GTR             reduce using rule 61 (expression -> FLOAT .)
    LEQ             reduce using rule 61 (expression -> FLOAT .)
    GEQ             reduce using rule 61 (expression -> FLOAT .)
    AND             reduce using rule 61 (expression -> FLOAT .)
    OR              reduce using rule 61 (expression -> FLOAT .)


state 27

    (39) while -> WHILE . OPENPAR bool CLOSEPAR block

    OPENPAR         shift and go to state 51


state 28

    (36) if -> IF . OPENPAR bool CLOSEPAR block else
    (37) if -> IF . OPENPAR bool CLOSEPAR block

    OPENPAR         shift and go to state 52


state 29

    (17) inputoutput -> INPUT .

    OPENPAR         reduce using rule 17 (inputoutput -> INPUT .)
    error           reduce using rule 17 (inputoutput -> INPUT .)


state 30

    (18) inputoutput -> OUTPUT .

    OPENPAR         reduce using rule 18 (inputoutput -> OUTPUT .)
    error           reduce using rule 18 (inputoutput -> OUTPUT .)


state 31

    (4) funcname -> datatype FNAME OPENPAR parameters . CLOSEPAR

    CLOSEPAR        shift and go to state 53


state 32

    (5) parameters -> vardeclare . COMMA parameters
    (6) parameters -> vardeclare .

    COMMA           shift and go to state 54
    CLOSEPAR        reduce using rule 6 (parameters -> vardeclare .)


state 33

    (7) parameters -> empty .

    CLOSEPAR        reduce using rule 7 (parameters -> empty .)


state 34

    (2) function -> function funcname OPENCURL code RETURN expression . EOL CLOSECURL
    (47) expression -> expression . EXP expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression

    EOL             shift and go to state 55
    EXP             shift and go to state 37
    MULTIPLY        shift and go to state 38
    DIVIDE          shift and go to state 39
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41


state 35

    (62) expression -> NAME .

    EOL             reduce using rule 62 (expression -> NAME .)
    EXP             reduce using rule 62 (expression -> NAME .)
    MULTIPLY        reduce using rule 62 (expression -> NAME .)
    DIVIDE          reduce using rule 62 (expression -> NAME .)
    PLUS            reduce using rule 62 (expression -> NAME .)
    MINUS           reduce using rule 62 (expression -> NAME .)
    CLOSEPAR        reduce using rule 62 (expression -> NAME .)
    EQ              reduce using rule 62 (expression -> NAME .)
    NEQ             reduce using rule 62 (expression -> NAME .)
    LSS             reduce using rule 62 (expression -> NAME .)
    GTR             reduce using rule 62 (expression -> NAME .)
    LEQ             reduce using rule 62 (expression -> NAME .)
    GEQ             reduce using rule 62 (expression -> NAME .)
    AND             reduce using rule 62 (expression -> NAME .)
    OR              reduce using rule 62 (expression -> NAME .)


state 36

    (11) code -> code expression EOL .

    RETURN          reduce using rule 11 (code -> code expression EOL .)
    NAME            reduce using rule 11 (code -> code expression EOL .)
    OPENPAR         reduce using rule 11 (code -> code expression EOL .)
    FNAME           reduce using rule 11 (code -> code expression EOL .)
    INT             reduce using rule 11 (code -> code expression EOL .)
    FLOAT           reduce using rule 11 (code -> code expression EOL .)
    WHILE           reduce using rule 11 (code -> code expression EOL .)
    IF              reduce using rule 11 (code -> code expression EOL .)
    TYPEFLOAT       reduce using rule 11 (code -> code expression EOL .)
    TYPEINT         reduce using rule 11 (code -> code expression EOL .)
    INPUT           reduce using rule 11 (code -> code expression EOL .)
    OUTPUT          reduce using rule 11 (code -> code expression EOL .)


state 37

    (47) expression -> expression EXP . expression
    (47) expression -> . expression EXP expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . OPENPAR expression CLOSEPAR
    (56) expression -> . FNAME OPENPAR varname CLOSEPAR
    (60) expression -> . INT
    (61) expression -> . FLOAT
    (62) expression -> . NAME

    OPENPAR         shift and go to state 23
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35

    expression                     shift and go to state 56

state 38

    (48) expression -> expression MULTIPLY . expression
    (47) expression -> . expression EXP expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . OPENPAR expression CLOSEPAR
    (56) expression -> . FNAME OPENPAR varname CLOSEPAR
    (60) expression -> . INT
    (61) expression -> . FLOAT
    (62) expression -> . NAME

    OPENPAR         shift and go to state 23
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35

    expression                     shift and go to state 57

state 39

    (49) expression -> expression DIVIDE . expression
    (47) expression -> . expression EXP expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . OPENPAR expression CLOSEPAR
    (56) expression -> . FNAME OPENPAR varname CLOSEPAR
    (60) expression -> . INT
    (61) expression -> . FLOAT
    (62) expression -> . NAME

    OPENPAR         shift and go to state 23
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35

    expression                     shift and go to state 58

state 40

    (50) expression -> expression PLUS . expression
    (47) expression -> . expression EXP expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . OPENPAR expression CLOSEPAR
    (56) expression -> . FNAME OPENPAR varname CLOSEPAR
    (60) expression -> . INT
    (61) expression -> . FLOAT
    (62) expression -> . NAME

    OPENPAR         shift and go to state 23
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35

    expression                     shift and go to state 59

state 41

    (51) expression -> expression MINUS . expression
    (47) expression -> . expression EXP expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . OPENPAR expression CLOSEPAR
    (56) expression -> . FNAME OPENPAR varname CLOSEPAR
    (60) expression -> . INT
    (61) expression -> . FLOAT
    (62) expression -> . NAME

    OPENPAR         shift and go to state 23
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35

    expression                     shift and go to state 60

state 42

    (8) code -> code vardeclare EOL .

    RETURN          reduce using rule 8 (code -> code vardeclare EOL .)
    NAME            reduce using rule 8 (code -> code vardeclare EOL .)
    OPENPAR         reduce using rule 8 (code -> code vardeclare EOL .)
    FNAME           reduce using rule 8 (code -> code vardeclare EOL .)
    INT             reduce using rule 8 (code -> code vardeclare EOL .)
    FLOAT           reduce using rule 8 (code -> code vardeclare EOL .)
    WHILE           reduce using rule 8 (code -> code vardeclare EOL .)
    IF              reduce using rule 8 (code -> code vardeclare EOL .)
    TYPEFLOAT       reduce using rule 8 (code -> code vardeclare EOL .)
    TYPEINT         reduce using rule 8 (code -> code vardeclare EOL .)
    INPUT           reduce using rule 8 (code -> code vardeclare EOL .)
    OUTPUT          reduce using rule 8 (code -> code vardeclare EOL .)


state 43

    (9) code -> code varassign EOL .

    RETURN          reduce using rule 9 (code -> code varassign EOL .)
    NAME            reduce using rule 9 (code -> code varassign EOL .)
    OPENPAR         reduce using rule 9 (code -> code varassign EOL .)
    FNAME           reduce using rule 9 (code -> code varassign EOL .)
    INT             reduce using rule 9 (code -> code varassign EOL .)
    FLOAT           reduce using rule 9 (code -> code varassign EOL .)
    WHILE           reduce using rule 9 (code -> code varassign EOL .)
    IF              reduce using rule 9 (code -> code varassign EOL .)
    TYPEFLOAT       reduce using rule 9 (code -> code varassign EOL .)
    TYPEINT         reduce using rule 9 (code -> code varassign EOL .)
    INPUT           reduce using rule 9 (code -> code varassign EOL .)
    OUTPUT          reduce using rule 9 (code -> code varassign EOL .)


state 44

    (10) code -> code io EOL .

    RETURN          reduce using rule 10 (code -> code io EOL .)
    NAME            reduce using rule 10 (code -> code io EOL .)
    OPENPAR         reduce using rule 10 (code -> code io EOL .)
    FNAME           reduce using rule 10 (code -> code io EOL .)
    INT             reduce using rule 10 (code -> code io EOL .)
    FLOAT           reduce using rule 10 (code -> code io EOL .)
    WHILE           reduce using rule 10 (code -> code io EOL .)
    IF              reduce using rule 10 (code -> code io EOL .)
    TYPEFLOAT       reduce using rule 10 (code -> code io EOL .)
    TYPEINT         reduce using rule 10 (code -> code io EOL .)
    INPUT           reduce using rule 10 (code -> code io EOL .)
    OUTPUT          reduce using rule 10 (code -> code io EOL .)


state 45

    (53) vardeclare -> datatype NAME .

    EOL             reduce using rule 53 (vardeclare -> datatype NAME .)
    COMMA           reduce using rule 53 (vardeclare -> datatype NAME .)
    CLOSEPAR        reduce using rule 53 (vardeclare -> datatype NAME .)


state 46

    (54) varassign -> NAME EQUALS . expression
    (55) varassign -> NAME EQUALS . NAME
    (47) expression -> . expression EXP expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . OPENPAR expression CLOSEPAR
    (56) expression -> . FNAME OPENPAR varname CLOSEPAR
    (60) expression -> . INT
    (61) expression -> . FLOAT
    (62) expression -> . NAME

    NAME            shift and go to state 61
    OPENPAR         shift and go to state 23
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26

    expression                     shift and go to state 62

state 47

    (15) io -> inputoutput OPENPAR . iodata CLOSEPAR
    (19) iodata -> . QUOTEMARK percenttype QUOTEMARK COMMA AND NAME

    QUOTEMARK       shift and go to state 64

    iodata                         shift and go to state 63

state 48

    (16) io -> inputoutput error .

    EOL             reduce using rule 16 (io -> inputoutput error .)


state 49

    (52) expression -> OPENPAR expression . CLOSEPAR
    (47) expression -> expression . EXP expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression

    CLOSEPAR        shift and go to state 65
    EXP             shift and go to state 37
    MULTIPLY        shift and go to state 38
    DIVIDE          shift and go to state 39
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41


state 50

    (56) expression -> FNAME OPENPAR . varname CLOSEPAR
    (57) varname -> . NAME COMMA varname
    (58) varname -> . NAME
    (59) varname -> . empty
    (63) empty -> .

    NAME            shift and go to state 67
    CLOSEPAR        reduce using rule 63 (empty -> .)

    varname                        shift and go to state 66
    empty                          shift and go to state 68

state 51

    (39) while -> WHILE OPENPAR . bool CLOSEPAR block
    (24) bool -> . expression boolop expression
    (25) bool -> . bool boolop bool
    (26) bool -> . expression boolop bool
    (27) bool -> . bool boolop expression
    (47) expression -> . expression EXP expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . OPENPAR expression CLOSEPAR
    (56) expression -> . FNAME OPENPAR varname CLOSEPAR
    (60) expression -> . INT
    (61) expression -> . FLOAT
    (62) expression -> . NAME

    OPENPAR         shift and go to state 23
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35

    bool                           shift and go to state 69
    expression                     shift and go to state 70

state 52

    (36) if -> IF OPENPAR . bool CLOSEPAR block else
    (37) if -> IF OPENPAR . bool CLOSEPAR block
    (24) bool -> . expression boolop expression
    (25) bool -> . bool boolop bool
    (26) bool -> . expression boolop bool
    (27) bool -> . bool boolop expression
    (47) expression -> . expression EXP expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . OPENPAR expression CLOSEPAR
    (56) expression -> . FNAME OPENPAR varname CLOSEPAR
    (60) expression -> . INT
    (61) expression -> . FLOAT
    (62) expression -> . NAME

    OPENPAR         shift and go to state 23
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35

    bool                           shift and go to state 71
    expression                     shift and go to state 70

state 53

    (4) funcname -> datatype FNAME OPENPAR parameters CLOSEPAR .

    OPENCURL        reduce using rule 4 (funcname -> datatype FNAME OPENPAR parameters CLOSEPAR .)


state 54

    (5) parameters -> vardeclare COMMA . parameters
    (5) parameters -> . vardeclare COMMA parameters
    (6) parameters -> . vardeclare
    (7) parameters -> . empty
    (53) vardeclare -> . datatype NAME
    (63) empty -> .
    (22) datatype -> . TYPEFLOAT
    (23) datatype -> . TYPEINT

    CLOSEPAR        reduce using rule 63 (empty -> .)
    TYPEFLOAT       shift and go to state 6
    TYPEINT         shift and go to state 7

    vardeclare                     shift and go to state 32
    parameters                     shift and go to state 72
    empty                          shift and go to state 33
    datatype                       shift and go to state 20

state 55

    (2) function -> function funcname OPENCURL code RETURN expression EOL . CLOSECURL

    CLOSECURL       shift and go to state 73


state 56

    (47) expression -> expression EXP expression .
    (47) expression -> expression . EXP expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression

    EOL             reduce using rule 47 (expression -> expression EXP expression .)
    EXP             reduce using rule 47 (expression -> expression EXP expression .)
    MULTIPLY        reduce using rule 47 (expression -> expression EXP expression .)
    DIVIDE          reduce using rule 47 (expression -> expression EXP expression .)
    PLUS            reduce using rule 47 (expression -> expression EXP expression .)
    MINUS           reduce using rule 47 (expression -> expression EXP expression .)
    CLOSEPAR        reduce using rule 47 (expression -> expression EXP expression .)
    EQ              reduce using rule 47 (expression -> expression EXP expression .)
    NEQ             reduce using rule 47 (expression -> expression EXP expression .)
    LSS             reduce using rule 47 (expression -> expression EXP expression .)
    GTR             reduce using rule 47 (expression -> expression EXP expression .)
    LEQ             reduce using rule 47 (expression -> expression EXP expression .)
    GEQ             reduce using rule 47 (expression -> expression EXP expression .)
    AND             reduce using rule 47 (expression -> expression EXP expression .)
    OR              reduce using rule 47 (expression -> expression EXP expression .)

  ! EXP             [ shift and go to state 37 ]
  ! MULTIPLY        [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! PLUS            [ shift and go to state 40 ]
  ! MINUS           [ shift and go to state 41 ]


state 57

    (48) expression -> expression MULTIPLY expression .
    (47) expression -> expression . EXP expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression

    EOL             reduce using rule 48 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 48 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 48 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 48 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 48 (expression -> expression MULTIPLY expression .)
    CLOSEPAR        reduce using rule 48 (expression -> expression MULTIPLY expression .)
    EQ              reduce using rule 48 (expression -> expression MULTIPLY expression .)
    NEQ             reduce using rule 48 (expression -> expression MULTIPLY expression .)
    LSS             reduce using rule 48 (expression -> expression MULTIPLY expression .)
    GTR             reduce using rule 48 (expression -> expression MULTIPLY expression .)
    LEQ             reduce using rule 48 (expression -> expression MULTIPLY expression .)
    GEQ             reduce using rule 48 (expression -> expression MULTIPLY expression .)
    AND             reduce using rule 48 (expression -> expression MULTIPLY expression .)
    OR              reduce using rule 48 (expression -> expression MULTIPLY expression .)
    EXP             shift and go to state 37

  ! EXP             [ reduce using rule 48 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! PLUS            [ shift and go to state 40 ]
  ! MINUS           [ shift and go to state 41 ]


state 58

    (49) expression -> expression DIVIDE expression .
    (47) expression -> expression . EXP expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression

    EOL             reduce using rule 49 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 49 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 49 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 49 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 49 (expression -> expression DIVIDE expression .)
    CLOSEPAR        reduce using rule 49 (expression -> expression DIVIDE expression .)
    EQ              reduce using rule 49 (expression -> expression DIVIDE expression .)
    NEQ             reduce using rule 49 (expression -> expression DIVIDE expression .)
    LSS             reduce using rule 49 (expression -> expression DIVIDE expression .)
    GTR             reduce using rule 49 (expression -> expression DIVIDE expression .)
    LEQ             reduce using rule 49 (expression -> expression DIVIDE expression .)
    GEQ             reduce using rule 49 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 49 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 49 (expression -> expression DIVIDE expression .)
    EXP             shift and go to state 37

  ! EXP             [ reduce using rule 49 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ shift and go to state 38 ]
  ! DIVIDE          [ shift and go to state 39 ]
  ! PLUS            [ shift and go to state 40 ]
  ! MINUS           [ shift and go to state 41 ]


state 59

    (50) expression -> expression PLUS expression .
    (47) expression -> expression . EXP expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression

    EOL             reduce using rule 50 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 50 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 50 (expression -> expression PLUS expression .)
    CLOSEPAR        reduce using rule 50 (expression -> expression PLUS expression .)
    EQ              reduce using rule 50 (expression -> expression PLUS expression .)
    NEQ             reduce using rule 50 (expression -> expression PLUS expression .)
    LSS             reduce using rule 50 (expression -> expression PLUS expression .)
    GTR             reduce using rule 50 (expression -> expression PLUS expression .)
    LEQ             reduce using rule 50 (expression -> expression PLUS expression .)
    GEQ             reduce using rule 50 (expression -> expression PLUS expression .)
    AND             reduce using rule 50 (expression -> expression PLUS expression .)
    OR              reduce using rule 50 (expression -> expression PLUS expression .)
    EXP             shift and go to state 37
    MULTIPLY        shift and go to state 38
    DIVIDE          shift and go to state 39

  ! EXP             [ reduce using rule 50 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 50 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 50 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 40 ]
  ! MINUS           [ shift and go to state 41 ]


state 60

    (51) expression -> expression MINUS expression .
    (47) expression -> expression . EXP expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression

    EOL             reduce using rule 51 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 51 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 51 (expression -> expression MINUS expression .)
    CLOSEPAR        reduce using rule 51 (expression -> expression MINUS expression .)
    EQ              reduce using rule 51 (expression -> expression MINUS expression .)
    NEQ             reduce using rule 51 (expression -> expression MINUS expression .)
    LSS             reduce using rule 51 (expression -> expression MINUS expression .)
    GTR             reduce using rule 51 (expression -> expression MINUS expression .)
    LEQ             reduce using rule 51 (expression -> expression MINUS expression .)
    GEQ             reduce using rule 51 (expression -> expression MINUS expression .)
    AND             reduce using rule 51 (expression -> expression MINUS expression .)
    OR              reduce using rule 51 (expression -> expression MINUS expression .)
    EXP             shift and go to state 37
    MULTIPLY        shift and go to state 38
    DIVIDE          shift and go to state 39

  ! EXP             [ reduce using rule 51 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 51 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 40 ]
  ! MINUS           [ shift and go to state 41 ]


state 61

    (55) varassign -> NAME EQUALS NAME .
    (62) expression -> NAME .

  ! reduce/reduce conflict for EOL resolved using rule 55 (varassign -> NAME EQUALS NAME .)
    EOL             reduce using rule 55 (varassign -> NAME EQUALS NAME .)
    EXP             reduce using rule 62 (expression -> NAME .)
    MULTIPLY        reduce using rule 62 (expression -> NAME .)
    DIVIDE          reduce using rule 62 (expression -> NAME .)
    PLUS            reduce using rule 62 (expression -> NAME .)
    MINUS           reduce using rule 62 (expression -> NAME .)

  ! EOL             [ reduce using rule 62 (expression -> NAME .) ]


state 62

    (54) varassign -> NAME EQUALS expression .
    (47) expression -> expression . EXP expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression

    EOL             reduce using rule 54 (varassign -> NAME EQUALS expression .)
    EXP             shift and go to state 37
    MULTIPLY        shift and go to state 38
    DIVIDE          shift and go to state 39
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41


state 63

    (15) io -> inputoutput OPENPAR iodata . CLOSEPAR

    CLOSEPAR        shift and go to state 74


state 64

    (19) iodata -> QUOTEMARK . percenttype QUOTEMARK COMMA AND NAME
    (20) percenttype -> . PERCENTFLOAT
    (21) percenttype -> . PERCENTINT

    PERCENTFLOAT    shift and go to state 76
    PERCENTINT      shift and go to state 77

    percenttype                    shift and go to state 75

state 65

    (52) expression -> OPENPAR expression CLOSEPAR .

    EOL             reduce using rule 52 (expression -> OPENPAR expression CLOSEPAR .)
    EXP             reduce using rule 52 (expression -> OPENPAR expression CLOSEPAR .)
    MULTIPLY        reduce using rule 52 (expression -> OPENPAR expression CLOSEPAR .)
    DIVIDE          reduce using rule 52 (expression -> OPENPAR expression CLOSEPAR .)
    PLUS            reduce using rule 52 (expression -> OPENPAR expression CLOSEPAR .)
    MINUS           reduce using rule 52 (expression -> OPENPAR expression CLOSEPAR .)
    CLOSEPAR        reduce using rule 52 (expression -> OPENPAR expression CLOSEPAR .)
    EQ              reduce using rule 52 (expression -> OPENPAR expression CLOSEPAR .)
    NEQ             reduce using rule 52 (expression -> OPENPAR expression CLOSEPAR .)
    LSS             reduce using rule 52 (expression -> OPENPAR expression CLOSEPAR .)
    GTR             reduce using rule 52 (expression -> OPENPAR expression CLOSEPAR .)
    LEQ             reduce using rule 52 (expression -> OPENPAR expression CLOSEPAR .)
    GEQ             reduce using rule 52 (expression -> OPENPAR expression CLOSEPAR .)
    AND             reduce using rule 52 (expression -> OPENPAR expression CLOSEPAR .)
    OR              reduce using rule 52 (expression -> OPENPAR expression CLOSEPAR .)


state 66

    (56) expression -> FNAME OPENPAR varname . CLOSEPAR

    CLOSEPAR        shift and go to state 78


state 67

    (57) varname -> NAME . COMMA varname
    (58) varname -> NAME .

    COMMA           shift and go to state 79
    CLOSEPAR        reduce using rule 58 (varname -> NAME .)


state 68

    (59) varname -> empty .

    CLOSEPAR        reduce using rule 59 (varname -> empty .)


state 69

    (39) while -> WHILE OPENPAR bool . CLOSEPAR block
    (25) bool -> bool . boolop bool
    (27) bool -> bool . boolop expression
    (28) boolop -> . EQ
    (29) boolop -> . NEQ
    (30) boolop -> . LSS
    (31) boolop -> . GTR
    (32) boolop -> . LEQ
    (33) boolop -> . GEQ
    (34) boolop -> . AND
    (35) boolop -> . OR

    CLOSEPAR        shift and go to state 80
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LSS             shift and go to state 84
    GTR             shift and go to state 85
    LEQ             shift and go to state 86
    GEQ             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89

    boolop                         shift and go to state 81

state 70

    (24) bool -> expression . boolop expression
    (26) bool -> expression . boolop bool
    (47) expression -> expression . EXP expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (28) boolop -> . EQ
    (29) boolop -> . NEQ
    (30) boolop -> . LSS
    (31) boolop -> . GTR
    (32) boolop -> . LEQ
    (33) boolop -> . GEQ
    (34) boolop -> . AND
    (35) boolop -> . OR

    EXP             shift and go to state 37
    MULTIPLY        shift and go to state 38
    DIVIDE          shift and go to state 39
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LSS             shift and go to state 84
    GTR             shift and go to state 85
    LEQ             shift and go to state 86
    GEQ             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89

    boolop                         shift and go to state 90

state 71

    (36) if -> IF OPENPAR bool . CLOSEPAR block else
    (37) if -> IF OPENPAR bool . CLOSEPAR block
    (25) bool -> bool . boolop bool
    (27) bool -> bool . boolop expression
    (28) boolop -> . EQ
    (29) boolop -> . NEQ
    (30) boolop -> . LSS
    (31) boolop -> . GTR
    (32) boolop -> . LEQ
    (33) boolop -> . GEQ
    (34) boolop -> . AND
    (35) boolop -> . OR

    CLOSEPAR        shift and go to state 91
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LSS             shift and go to state 84
    GTR             shift and go to state 85
    LEQ             shift and go to state 86
    GEQ             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89

    boolop                         shift and go to state 81

state 72

    (5) parameters -> vardeclare COMMA parameters .

    CLOSEPAR        reduce using rule 5 (parameters -> vardeclare COMMA parameters .)


state 73

    (2) function -> function funcname OPENCURL code RETURN expression EOL CLOSECURL .

    TYPEFLOAT       reduce using rule 2 (function -> function funcname OPENCURL code RETURN expression EOL CLOSECURL .)
    TYPEINT         reduce using rule 2 (function -> function funcname OPENCURL code RETURN expression EOL CLOSECURL .)
    $end            reduce using rule 2 (function -> function funcname OPENCURL code RETURN expression EOL CLOSECURL .)


state 74

    (15) io -> inputoutput OPENPAR iodata CLOSEPAR .

    EOL             reduce using rule 15 (io -> inputoutput OPENPAR iodata CLOSEPAR .)


state 75

    (19) iodata -> QUOTEMARK percenttype . QUOTEMARK COMMA AND NAME

    QUOTEMARK       shift and go to state 92


state 76

    (20) percenttype -> PERCENTFLOAT .

    QUOTEMARK       reduce using rule 20 (percenttype -> PERCENTFLOAT .)


state 77

    (21) percenttype -> PERCENTINT .

    QUOTEMARK       reduce using rule 21 (percenttype -> PERCENTINT .)


state 78

    (56) expression -> FNAME OPENPAR varname CLOSEPAR .

    EOL             reduce using rule 56 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    EXP             reduce using rule 56 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    MULTIPLY        reduce using rule 56 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    DIVIDE          reduce using rule 56 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    PLUS            reduce using rule 56 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    MINUS           reduce using rule 56 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    CLOSEPAR        reduce using rule 56 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    EQ              reduce using rule 56 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    NEQ             reduce using rule 56 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    LSS             reduce using rule 56 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    GTR             reduce using rule 56 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    LEQ             reduce using rule 56 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    GEQ             reduce using rule 56 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    AND             reduce using rule 56 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    OR              reduce using rule 56 (expression -> FNAME OPENPAR varname CLOSEPAR .)


state 79

    (57) varname -> NAME COMMA . varname
    (57) varname -> . NAME COMMA varname
    (58) varname -> . NAME
    (59) varname -> . empty
    (63) empty -> .

    NAME            shift and go to state 67
    CLOSEPAR        reduce using rule 63 (empty -> .)

    varname                        shift and go to state 93
    empty                          shift and go to state 68

state 80

    (39) while -> WHILE OPENPAR bool CLOSEPAR . block
    (40) block -> . OPENCURL while CLOSECURL
    (41) block -> . OPENCURL if CLOSECURL
    (42) block -> . OPENCURL bcode CLOSECURL

    OPENCURL        shift and go to state 95

    block                          shift and go to state 94

state 81

    (25) bool -> bool boolop . bool
    (27) bool -> bool boolop . expression
    (24) bool -> . expression boolop expression
    (25) bool -> . bool boolop bool
    (26) bool -> . expression boolop bool
    (27) bool -> . bool boolop expression
    (47) expression -> . expression EXP expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . OPENPAR expression CLOSEPAR
    (56) expression -> . FNAME OPENPAR varname CLOSEPAR
    (60) expression -> . INT
    (61) expression -> . FLOAT
    (62) expression -> . NAME

    OPENPAR         shift and go to state 23
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35

    bool                           shift and go to state 96
    expression                     shift and go to state 97

state 82

    (28) boolop -> EQ .

    OPENPAR         reduce using rule 28 (boolop -> EQ .)
    FNAME           reduce using rule 28 (boolop -> EQ .)
    INT             reduce using rule 28 (boolop -> EQ .)
    FLOAT           reduce using rule 28 (boolop -> EQ .)
    NAME            reduce using rule 28 (boolop -> EQ .)


state 83

    (29) boolop -> NEQ .

    OPENPAR         reduce using rule 29 (boolop -> NEQ .)
    FNAME           reduce using rule 29 (boolop -> NEQ .)
    INT             reduce using rule 29 (boolop -> NEQ .)
    FLOAT           reduce using rule 29 (boolop -> NEQ .)
    NAME            reduce using rule 29 (boolop -> NEQ .)


state 84

    (30) boolop -> LSS .

    OPENPAR         reduce using rule 30 (boolop -> LSS .)
    FNAME           reduce using rule 30 (boolop -> LSS .)
    INT             reduce using rule 30 (boolop -> LSS .)
    FLOAT           reduce using rule 30 (boolop -> LSS .)
    NAME            reduce using rule 30 (boolop -> LSS .)


state 85

    (31) boolop -> GTR .

    OPENPAR         reduce using rule 31 (boolop -> GTR .)
    FNAME           reduce using rule 31 (boolop -> GTR .)
    INT             reduce using rule 31 (boolop -> GTR .)
    FLOAT           reduce using rule 31 (boolop -> GTR .)
    NAME            reduce using rule 31 (boolop -> GTR .)


state 86

    (32) boolop -> LEQ .

    OPENPAR         reduce using rule 32 (boolop -> LEQ .)
    FNAME           reduce using rule 32 (boolop -> LEQ .)
    INT             reduce using rule 32 (boolop -> LEQ .)
    FLOAT           reduce using rule 32 (boolop -> LEQ .)
    NAME            reduce using rule 32 (boolop -> LEQ .)


state 87

    (33) boolop -> GEQ .

    OPENPAR         reduce using rule 33 (boolop -> GEQ .)
    FNAME           reduce using rule 33 (boolop -> GEQ .)
    INT             reduce using rule 33 (boolop -> GEQ .)
    FLOAT           reduce using rule 33 (boolop -> GEQ .)
    NAME            reduce using rule 33 (boolop -> GEQ .)


state 88

    (34) boolop -> AND .

    OPENPAR         reduce using rule 34 (boolop -> AND .)
    FNAME           reduce using rule 34 (boolop -> AND .)
    INT             reduce using rule 34 (boolop -> AND .)
    FLOAT           reduce using rule 34 (boolop -> AND .)
    NAME            reduce using rule 34 (boolop -> AND .)


state 89

    (35) boolop -> OR .

    OPENPAR         reduce using rule 35 (boolop -> OR .)
    FNAME           reduce using rule 35 (boolop -> OR .)
    INT             reduce using rule 35 (boolop -> OR .)
    FLOAT           reduce using rule 35 (boolop -> OR .)
    NAME            reduce using rule 35 (boolop -> OR .)


state 90

    (24) bool -> expression boolop . expression
    (26) bool -> expression boolop . bool
    (47) expression -> . expression EXP expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . OPENPAR expression CLOSEPAR
    (56) expression -> . FNAME OPENPAR varname CLOSEPAR
    (60) expression -> . INT
    (61) expression -> . FLOAT
    (62) expression -> . NAME
    (24) bool -> . expression boolop expression
    (25) bool -> . bool boolop bool
    (26) bool -> . expression boolop bool
    (27) bool -> . bool boolop expression

    OPENPAR         shift and go to state 23
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35

    expression                     shift and go to state 98
    bool                           shift and go to state 99

state 91

    (36) if -> IF OPENPAR bool CLOSEPAR . block else
    (37) if -> IF OPENPAR bool CLOSEPAR . block
    (40) block -> . OPENCURL while CLOSECURL
    (41) block -> . OPENCURL if CLOSECURL
    (42) block -> . OPENCURL bcode CLOSECURL

    OPENCURL        shift and go to state 95

    block                          shift and go to state 100

state 92

    (19) iodata -> QUOTEMARK percenttype QUOTEMARK . COMMA AND NAME

    COMMA           shift and go to state 101


state 93

    (57) varname -> NAME COMMA varname .

    CLOSEPAR        reduce using rule 57 (varname -> NAME COMMA varname .)


state 94

    (39) while -> WHILE OPENPAR bool CLOSEPAR block .

    RETURN          reduce using rule 39 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    NAME            reduce using rule 39 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    OPENPAR         reduce using rule 39 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    FNAME           reduce using rule 39 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    INT             reduce using rule 39 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    FLOAT           reduce using rule 39 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    WHILE           reduce using rule 39 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    IF              reduce using rule 39 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    TYPEFLOAT       reduce using rule 39 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    TYPEINT         reduce using rule 39 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    INPUT           reduce using rule 39 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    OUTPUT          reduce using rule 39 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    CLOSECURL       reduce using rule 39 (while -> WHILE OPENPAR bool CLOSEPAR block .)


state 95

    (40) block -> OPENCURL . while CLOSECURL
    (41) block -> OPENCURL . if CLOSECURL
    (42) block -> OPENCURL . bcode CLOSECURL
    (39) while -> . WHILE OPENPAR bool CLOSEPAR block
    (36) if -> . IF OPENPAR bool CLOSEPAR block else
    (37) if -> . IF OPENPAR bool CLOSEPAR block
    (43) bcode -> . bcode io EOL
    (44) bcode -> . bcode expression EOL
    (45) bcode -> . bcode BREAK EOL
    (46) bcode -> . empty
    (63) empty -> .

    WHILE           shift and go to state 27
    IF              shift and go to state 28
    CLOSECURL       reduce using rule 63 (empty -> .)
    BREAK           reduce using rule 63 (empty -> .)
    OPENPAR         reduce using rule 63 (empty -> .)
    FNAME           reduce using rule 63 (empty -> .)
    INT             reduce using rule 63 (empty -> .)
    FLOAT           reduce using rule 63 (empty -> .)
    NAME            reduce using rule 63 (empty -> .)
    INPUT           reduce using rule 63 (empty -> .)
    OUTPUT          reduce using rule 63 (empty -> .)

    while                          shift and go to state 102
    if                             shift and go to state 103
    bcode                          shift and go to state 104
    empty                          shift and go to state 105

state 96

    (25) bool -> bool boolop bool .
    (25) bool -> bool . boolop bool
    (27) bool -> bool . boolop expression
    (28) boolop -> . EQ
    (29) boolop -> . NEQ
    (30) boolop -> . LSS
    (31) boolop -> . GTR
    (32) boolop -> . LEQ
    (33) boolop -> . GEQ
    (34) boolop -> . AND
    (35) boolop -> . OR

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LSS resolved as shift
  ! shift/reduce conflict for GTR resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSEPAR        reduce using rule 25 (bool -> bool boolop bool .)
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LSS             shift and go to state 84
    GTR             shift and go to state 85
    LEQ             shift and go to state 86
    GEQ             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89

  ! EQ              [ reduce using rule 25 (bool -> bool boolop bool .) ]
  ! NEQ             [ reduce using rule 25 (bool -> bool boolop bool .) ]
  ! LSS             [ reduce using rule 25 (bool -> bool boolop bool .) ]
  ! GTR             [ reduce using rule 25 (bool -> bool boolop bool .) ]
  ! LEQ             [ reduce using rule 25 (bool -> bool boolop bool .) ]
  ! GEQ             [ reduce using rule 25 (bool -> bool boolop bool .) ]
  ! AND             [ reduce using rule 25 (bool -> bool boolop bool .) ]
  ! OR              [ reduce using rule 25 (bool -> bool boolop bool .) ]

    boolop                         shift and go to state 81

state 97

    (27) bool -> bool boolop expression .
    (24) bool -> expression . boolop expression
    (26) bool -> expression . boolop bool
    (47) expression -> expression . EXP expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (28) boolop -> . EQ
    (29) boolop -> . NEQ
    (30) boolop -> . LSS
    (31) boolop -> . GTR
    (32) boolop -> . LEQ
    (33) boolop -> . GEQ
    (34) boolop -> . AND
    (35) boolop -> . OR

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LSS resolved as shift
  ! shift/reduce conflict for GTR resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSEPAR        reduce using rule 27 (bool -> bool boolop expression .)
    EXP             shift and go to state 37
    MULTIPLY        shift and go to state 38
    DIVIDE          shift and go to state 39
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LSS             shift and go to state 84
    GTR             shift and go to state 85
    LEQ             shift and go to state 86
    GEQ             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89

  ! EQ              [ reduce using rule 27 (bool -> bool boolop expression .) ]
  ! NEQ             [ reduce using rule 27 (bool -> bool boolop expression .) ]
  ! LSS             [ reduce using rule 27 (bool -> bool boolop expression .) ]
  ! GTR             [ reduce using rule 27 (bool -> bool boolop expression .) ]
  ! LEQ             [ reduce using rule 27 (bool -> bool boolop expression .) ]
  ! GEQ             [ reduce using rule 27 (bool -> bool boolop expression .) ]
  ! AND             [ reduce using rule 27 (bool -> bool boolop expression .) ]
  ! OR              [ reduce using rule 27 (bool -> bool boolop expression .) ]

    boolop                         shift and go to state 90

state 98

    (24) bool -> expression boolop expression .
    (47) expression -> expression . EXP expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression
    (24) bool -> expression . boolop expression
    (26) bool -> expression . boolop bool
    (28) boolop -> . EQ
    (29) boolop -> . NEQ
    (30) boolop -> . LSS
    (31) boolop -> . GTR
    (32) boolop -> . LEQ
    (33) boolop -> . GEQ
    (34) boolop -> . AND
    (35) boolop -> . OR

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LSS resolved as shift
  ! shift/reduce conflict for GTR resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSEPAR        reduce using rule 24 (bool -> expression boolop expression .)
    EXP             shift and go to state 37
    MULTIPLY        shift and go to state 38
    DIVIDE          shift and go to state 39
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LSS             shift and go to state 84
    GTR             shift and go to state 85
    LEQ             shift and go to state 86
    GEQ             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89

  ! EQ              [ reduce using rule 24 (bool -> expression boolop expression .) ]
  ! NEQ             [ reduce using rule 24 (bool -> expression boolop expression .) ]
  ! LSS             [ reduce using rule 24 (bool -> expression boolop expression .) ]
  ! GTR             [ reduce using rule 24 (bool -> expression boolop expression .) ]
  ! LEQ             [ reduce using rule 24 (bool -> expression boolop expression .) ]
  ! GEQ             [ reduce using rule 24 (bool -> expression boolop expression .) ]
  ! AND             [ reduce using rule 24 (bool -> expression boolop expression .) ]
  ! OR              [ reduce using rule 24 (bool -> expression boolop expression .) ]

    boolop                         shift and go to state 90

state 99

    (26) bool -> expression boolop bool .
    (25) bool -> bool . boolop bool
    (27) bool -> bool . boolop expression
    (28) boolop -> . EQ
    (29) boolop -> . NEQ
    (30) boolop -> . LSS
    (31) boolop -> . GTR
    (32) boolop -> . LEQ
    (33) boolop -> . GEQ
    (34) boolop -> . AND
    (35) boolop -> . OR

  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LSS resolved as shift
  ! shift/reduce conflict for GTR resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSEPAR        reduce using rule 26 (bool -> expression boolop bool .)
    EQ              shift and go to state 82
    NEQ             shift and go to state 83
    LSS             shift and go to state 84
    GTR             shift and go to state 85
    LEQ             shift and go to state 86
    GEQ             shift and go to state 87
    AND             shift and go to state 88
    OR              shift and go to state 89

  ! EQ              [ reduce using rule 26 (bool -> expression boolop bool .) ]
  ! NEQ             [ reduce using rule 26 (bool -> expression boolop bool .) ]
  ! LSS             [ reduce using rule 26 (bool -> expression boolop bool .) ]
  ! GTR             [ reduce using rule 26 (bool -> expression boolop bool .) ]
  ! LEQ             [ reduce using rule 26 (bool -> expression boolop bool .) ]
  ! GEQ             [ reduce using rule 26 (bool -> expression boolop bool .) ]
  ! AND             [ reduce using rule 26 (bool -> expression boolop bool .) ]
  ! OR              [ reduce using rule 26 (bool -> expression boolop bool .) ]

    boolop                         shift and go to state 81

state 100

    (36) if -> IF OPENPAR bool CLOSEPAR block . else
    (37) if -> IF OPENPAR bool CLOSEPAR block .
    (38) else -> . ELSE block

    RETURN          reduce using rule 37 (if -> IF OPENPAR bool CLOSEPAR block .)
    NAME            reduce using rule 37 (if -> IF OPENPAR bool CLOSEPAR block .)
    OPENPAR         reduce using rule 37 (if -> IF OPENPAR bool CLOSEPAR block .)
    FNAME           reduce using rule 37 (if -> IF OPENPAR bool CLOSEPAR block .)
    INT             reduce using rule 37 (if -> IF OPENPAR bool CLOSEPAR block .)
    FLOAT           reduce using rule 37 (if -> IF OPENPAR bool CLOSEPAR block .)
    WHILE           reduce using rule 37 (if -> IF OPENPAR bool CLOSEPAR block .)
    IF              reduce using rule 37 (if -> IF OPENPAR bool CLOSEPAR block .)
    TYPEFLOAT       reduce using rule 37 (if -> IF OPENPAR bool CLOSEPAR block .)
    TYPEINT         reduce using rule 37 (if -> IF OPENPAR bool CLOSEPAR block .)
    INPUT           reduce using rule 37 (if -> IF OPENPAR bool CLOSEPAR block .)
    OUTPUT          reduce using rule 37 (if -> IF OPENPAR bool CLOSEPAR block .)
    CLOSECURL       reduce using rule 37 (if -> IF OPENPAR bool CLOSEPAR block .)
    ELSE            shift and go to state 107

    else                           shift and go to state 106

state 101

    (19) iodata -> QUOTEMARK percenttype QUOTEMARK COMMA . AND NAME

    AND             shift and go to state 108


state 102

    (40) block -> OPENCURL while . CLOSECURL

    CLOSECURL       shift and go to state 109


state 103

    (41) block -> OPENCURL if . CLOSECURL

    CLOSECURL       shift and go to state 110


state 104

    (42) block -> OPENCURL bcode . CLOSECURL
    (43) bcode -> bcode . io EOL
    (44) bcode -> bcode . expression EOL
    (45) bcode -> bcode . BREAK EOL
    (15) io -> . inputoutput OPENPAR iodata CLOSEPAR
    (16) io -> . inputoutput error
    (47) expression -> . expression EXP expression
    (48) expression -> . expression MULTIPLY expression
    (49) expression -> . expression DIVIDE expression
    (50) expression -> . expression PLUS expression
    (51) expression -> . expression MINUS expression
    (52) expression -> . OPENPAR expression CLOSEPAR
    (56) expression -> . FNAME OPENPAR varname CLOSEPAR
    (60) expression -> . INT
    (61) expression -> . FLOAT
    (62) expression -> . NAME
    (17) inputoutput -> . INPUT
    (18) inputoutput -> . OUTPUT

    CLOSECURL       shift and go to state 111
    BREAK           shift and go to state 114
    OPENPAR         shift and go to state 23
    FNAME           shift and go to state 24
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    NAME            shift and go to state 35
    INPUT           shift and go to state 29
    OUTPUT          shift and go to state 30

    io                             shift and go to state 112
    expression                     shift and go to state 113
    inputoutput                    shift and go to state 22

state 105

    (46) bcode -> empty .

    CLOSECURL       reduce using rule 46 (bcode -> empty .)
    BREAK           reduce using rule 46 (bcode -> empty .)
    OPENPAR         reduce using rule 46 (bcode -> empty .)
    FNAME           reduce using rule 46 (bcode -> empty .)
    INT             reduce using rule 46 (bcode -> empty .)
    FLOAT           reduce using rule 46 (bcode -> empty .)
    NAME            reduce using rule 46 (bcode -> empty .)
    INPUT           reduce using rule 46 (bcode -> empty .)
    OUTPUT          reduce using rule 46 (bcode -> empty .)


state 106

    (36) if -> IF OPENPAR bool CLOSEPAR block else .

    RETURN          reduce using rule 36 (if -> IF OPENPAR bool CLOSEPAR block else .)
    NAME            reduce using rule 36 (if -> IF OPENPAR bool CLOSEPAR block else .)
    OPENPAR         reduce using rule 36 (if -> IF OPENPAR bool CLOSEPAR block else .)
    FNAME           reduce using rule 36 (if -> IF OPENPAR bool CLOSEPAR block else .)
    INT             reduce using rule 36 (if -> IF OPENPAR bool CLOSEPAR block else .)
    FLOAT           reduce using rule 36 (if -> IF OPENPAR bool CLOSEPAR block else .)
    WHILE           reduce using rule 36 (if -> IF OPENPAR bool CLOSEPAR block else .)
    IF              reduce using rule 36 (if -> IF OPENPAR bool CLOSEPAR block else .)
    TYPEFLOAT       reduce using rule 36 (if -> IF OPENPAR bool CLOSEPAR block else .)
    TYPEINT         reduce using rule 36 (if -> IF OPENPAR bool CLOSEPAR block else .)
    INPUT           reduce using rule 36 (if -> IF OPENPAR bool CLOSEPAR block else .)
    OUTPUT          reduce using rule 36 (if -> IF OPENPAR bool CLOSEPAR block else .)
    CLOSECURL       reduce using rule 36 (if -> IF OPENPAR bool CLOSEPAR block else .)


state 107

    (38) else -> ELSE . block
    (40) block -> . OPENCURL while CLOSECURL
    (41) block -> . OPENCURL if CLOSECURL
    (42) block -> . OPENCURL bcode CLOSECURL

    OPENCURL        shift and go to state 95

    block                          shift and go to state 115

state 108

    (19) iodata -> QUOTEMARK percenttype QUOTEMARK COMMA AND . NAME

    NAME            shift and go to state 116


state 109

    (40) block -> OPENCURL while CLOSECURL .

    RETURN          reduce using rule 40 (block -> OPENCURL while CLOSECURL .)
    NAME            reduce using rule 40 (block -> OPENCURL while CLOSECURL .)
    OPENPAR         reduce using rule 40 (block -> OPENCURL while CLOSECURL .)
    FNAME           reduce using rule 40 (block -> OPENCURL while CLOSECURL .)
    INT             reduce using rule 40 (block -> OPENCURL while CLOSECURL .)
    FLOAT           reduce using rule 40 (block -> OPENCURL while CLOSECURL .)
    WHILE           reduce using rule 40 (block -> OPENCURL while CLOSECURL .)
    IF              reduce using rule 40 (block -> OPENCURL while CLOSECURL .)
    TYPEFLOAT       reduce using rule 40 (block -> OPENCURL while CLOSECURL .)
    TYPEINT         reduce using rule 40 (block -> OPENCURL while CLOSECURL .)
    INPUT           reduce using rule 40 (block -> OPENCURL while CLOSECURL .)
    OUTPUT          reduce using rule 40 (block -> OPENCURL while CLOSECURL .)
    CLOSECURL       reduce using rule 40 (block -> OPENCURL while CLOSECURL .)
    ELSE            reduce using rule 40 (block -> OPENCURL while CLOSECURL .)


state 110

    (41) block -> OPENCURL if CLOSECURL .

    RETURN          reduce using rule 41 (block -> OPENCURL if CLOSECURL .)
    NAME            reduce using rule 41 (block -> OPENCURL if CLOSECURL .)
    OPENPAR         reduce using rule 41 (block -> OPENCURL if CLOSECURL .)
    FNAME           reduce using rule 41 (block -> OPENCURL if CLOSECURL .)
    INT             reduce using rule 41 (block -> OPENCURL if CLOSECURL .)
    FLOAT           reduce using rule 41 (block -> OPENCURL if CLOSECURL .)
    WHILE           reduce using rule 41 (block -> OPENCURL if CLOSECURL .)
    IF              reduce using rule 41 (block -> OPENCURL if CLOSECURL .)
    TYPEFLOAT       reduce using rule 41 (block -> OPENCURL if CLOSECURL .)
    TYPEINT         reduce using rule 41 (block -> OPENCURL if CLOSECURL .)
    INPUT           reduce using rule 41 (block -> OPENCURL if CLOSECURL .)
    OUTPUT          reduce using rule 41 (block -> OPENCURL if CLOSECURL .)
    CLOSECURL       reduce using rule 41 (block -> OPENCURL if CLOSECURL .)
    ELSE            reduce using rule 41 (block -> OPENCURL if CLOSECURL .)


state 111

    (42) block -> OPENCURL bcode CLOSECURL .

    RETURN          reduce using rule 42 (block -> OPENCURL bcode CLOSECURL .)
    NAME            reduce using rule 42 (block -> OPENCURL bcode CLOSECURL .)
    OPENPAR         reduce using rule 42 (block -> OPENCURL bcode CLOSECURL .)
    FNAME           reduce using rule 42 (block -> OPENCURL bcode CLOSECURL .)
    INT             reduce using rule 42 (block -> OPENCURL bcode CLOSECURL .)
    FLOAT           reduce using rule 42 (block -> OPENCURL bcode CLOSECURL .)
    WHILE           reduce using rule 42 (block -> OPENCURL bcode CLOSECURL .)
    IF              reduce using rule 42 (block -> OPENCURL bcode CLOSECURL .)
    TYPEFLOAT       reduce using rule 42 (block -> OPENCURL bcode CLOSECURL .)
    TYPEINT         reduce using rule 42 (block -> OPENCURL bcode CLOSECURL .)
    INPUT           reduce using rule 42 (block -> OPENCURL bcode CLOSECURL .)
    OUTPUT          reduce using rule 42 (block -> OPENCURL bcode CLOSECURL .)
    CLOSECURL       reduce using rule 42 (block -> OPENCURL bcode CLOSECURL .)
    ELSE            reduce using rule 42 (block -> OPENCURL bcode CLOSECURL .)


state 112

    (43) bcode -> bcode io . EOL

    EOL             shift and go to state 117


state 113

    (44) bcode -> bcode expression . EOL
    (47) expression -> expression . EXP expression
    (48) expression -> expression . MULTIPLY expression
    (49) expression -> expression . DIVIDE expression
    (50) expression -> expression . PLUS expression
    (51) expression -> expression . MINUS expression

    EOL             shift and go to state 118
    EXP             shift and go to state 37
    MULTIPLY        shift and go to state 38
    DIVIDE          shift and go to state 39
    PLUS            shift and go to state 40
    MINUS           shift and go to state 41


state 114

    (45) bcode -> bcode BREAK . EOL

    EOL             shift and go to state 119


state 115

    (38) else -> ELSE block .

    RETURN          reduce using rule 38 (else -> ELSE block .)
    NAME            reduce using rule 38 (else -> ELSE block .)
    OPENPAR         reduce using rule 38 (else -> ELSE block .)
    FNAME           reduce using rule 38 (else -> ELSE block .)
    INT             reduce using rule 38 (else -> ELSE block .)
    FLOAT           reduce using rule 38 (else -> ELSE block .)
    WHILE           reduce using rule 38 (else -> ELSE block .)
    IF              reduce using rule 38 (else -> ELSE block .)
    TYPEFLOAT       reduce using rule 38 (else -> ELSE block .)
    TYPEINT         reduce using rule 38 (else -> ELSE block .)
    INPUT           reduce using rule 38 (else -> ELSE block .)
    OUTPUT          reduce using rule 38 (else -> ELSE block .)
    CLOSECURL       reduce using rule 38 (else -> ELSE block .)


state 116

    (19) iodata -> QUOTEMARK percenttype QUOTEMARK COMMA AND NAME .

    CLOSEPAR        reduce using rule 19 (iodata -> QUOTEMARK percenttype QUOTEMARK COMMA AND NAME .)


state 117

    (43) bcode -> bcode io EOL .

    CLOSECURL       reduce using rule 43 (bcode -> bcode io EOL .)
    BREAK           reduce using rule 43 (bcode -> bcode io EOL .)
    OPENPAR         reduce using rule 43 (bcode -> bcode io EOL .)
    FNAME           reduce using rule 43 (bcode -> bcode io EOL .)
    INT             reduce using rule 43 (bcode -> bcode io EOL .)
    FLOAT           reduce using rule 43 (bcode -> bcode io EOL .)
    NAME            reduce using rule 43 (bcode -> bcode io EOL .)
    INPUT           reduce using rule 43 (bcode -> bcode io EOL .)
    OUTPUT          reduce using rule 43 (bcode -> bcode io EOL .)


state 118

    (44) bcode -> bcode expression EOL .

    CLOSECURL       reduce using rule 44 (bcode -> bcode expression EOL .)
    BREAK           reduce using rule 44 (bcode -> bcode expression EOL .)
    OPENPAR         reduce using rule 44 (bcode -> bcode expression EOL .)
    FNAME           reduce using rule 44 (bcode -> bcode expression EOL .)
    INT             reduce using rule 44 (bcode -> bcode expression EOL .)
    FLOAT           reduce using rule 44 (bcode -> bcode expression EOL .)
    NAME            reduce using rule 44 (bcode -> bcode expression EOL .)
    INPUT           reduce using rule 44 (bcode -> bcode expression EOL .)
    OUTPUT          reduce using rule 44 (bcode -> bcode expression EOL .)


state 119

    (45) bcode -> bcode BREAK EOL .

    CLOSECURL       reduce using rule 45 (bcode -> bcode BREAK EOL .)
    BREAK           reduce using rule 45 (bcode -> bcode BREAK EOL .)
    OPENPAR         reduce using rule 45 (bcode -> bcode BREAK EOL .)
    FNAME           reduce using rule 45 (bcode -> bcode BREAK EOL .)
    INT             reduce using rule 45 (bcode -> bcode BREAK EOL .)
    FLOAT           reduce using rule 45 (bcode -> bcode BREAK EOL .)
    NAME            reduce using rule 45 (bcode -> bcode BREAK EOL .)
    INPUT           reduce using rule 45 (bcode -> bcode BREAK EOL .)
    OUTPUT          reduce using rule 45 (bcode -> bcode BREAK EOL .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for EQ in state 96 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 96 resolved as shift
WARNING: shift/reduce conflict for LSS in state 96 resolved as shift
WARNING: shift/reduce conflict for GTR in state 96 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 96 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 96 resolved as shift
WARNING: shift/reduce conflict for AND in state 96 resolved as shift
WARNING: shift/reduce conflict for OR in state 96 resolved as shift
WARNING: shift/reduce conflict for EQ in state 97 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 97 resolved as shift
WARNING: shift/reduce conflict for LSS in state 97 resolved as shift
WARNING: shift/reduce conflict for GTR in state 97 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 97 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 97 resolved as shift
WARNING: shift/reduce conflict for AND in state 97 resolved as shift
WARNING: shift/reduce conflict for OR in state 97 resolved as shift
WARNING: shift/reduce conflict for EQ in state 98 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 98 resolved as shift
WARNING: shift/reduce conflict for LSS in state 98 resolved as shift
WARNING: shift/reduce conflict for GTR in state 98 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 98 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 98 resolved as shift
WARNING: shift/reduce conflict for AND in state 98 resolved as shift
WARNING: shift/reduce conflict for OR in state 98 resolved as shift
WARNING: shift/reduce conflict for EQ in state 99 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 99 resolved as shift
WARNING: shift/reduce conflict for LSS in state 99 resolved as shift
WARNING: shift/reduce conflict for GTR in state 99 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 99 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 99 resolved as shift
WARNING: shift/reduce conflict for AND in state 99 resolved as shift
WARNING: shift/reduce conflict for OR in state 99 resolved as shift
WARNING: reduce/reduce conflict in state 61 resolved using rule (varassign -> NAME EQUALS NAME)
WARNING: rejected rule (expression -> NAME) in state 61
