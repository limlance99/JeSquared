Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    NEWLINE

Grammar

Rule 0     S' -> begin
Rule 1     begin -> function
Rule 2     function -> function funcname OPENCURL code return EOL CLOSECURL
Rule 3     function -> empty
Rule 4     function -> function funcname error
Rule 5     function -> function funcname OPENCURL code error
Rule 6     function -> function funcname OPENCURL code return error
Rule 7     function -> function funcname OPENCURL code return EOL error
Rule 8     funcname -> datatype FNAME OPENPAR parameters CLOSEPAR
Rule 9     funcname -> datatype error
Rule 10    funcname -> datatype FNAME error
Rule 11    funcname -> datatype FNAME parameters error
Rule 12    parameters -> vardeclare COMMA parameters
Rule 13    parameters -> vardeclare
Rule 14    parameters -> empty
Rule 15    code -> code vardeclare EOL
Rule 16    code -> code varassign EOL
Rule 17    code -> code io EOL
Rule 18    code -> code expression EOL
Rule 19    code -> code while
Rule 20    code -> code if
Rule 21    code -> code return EOL
Rule 22    code -> empty
Rule 23    code -> code vardeclare error
Rule 24    code -> code varassign error
Rule 25    code -> code io error
Rule 26    code -> code expression error
Rule 27    return -> RETURN expression
Rule 28    return -> RETURN error
Rule 29    io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA AMP NAME CLOSEPAR
Rule 30    io -> OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA NAME CLOSEPAR
Rule 31    io -> INPUT error
Rule 32    io -> OUTPUT error
Rule 33    io -> INPUT OPENPAR error
Rule 34    io -> OUTPUT OPENPAR error
Rule 35    io -> INPUT OPENPAR QUOTEMARK error
Rule 36    io -> OUTPUT OPENPAR QUOTEMARK error
Rule 37    io -> INPUT OPENPAR QUOTEMARK percenttype error
Rule 38    io -> OUTPUT OPENPAR QUOTEMARK percenttype error
Rule 39    io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK error
Rule 40    io -> OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK error
Rule 41    io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA error
Rule 42    io -> OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA error
Rule 43    percenttype -> PERCENTFLOAT
Rule 44    percenttype -> PERCENTINT
Rule 45    datatype -> TYPEFLOAT
Rule 46    datatype -> TYPEINT
Rule 47    bool -> expression boolop expression
Rule 48    bool -> bool boolop bool
Rule 49    bool -> expression boolop bool
Rule 50    bool -> bool boolop expression
Rule 51    bool -> NOT bool
Rule 52    bool -> OPENPAR bool CLOSEPAR
Rule 53    bool -> expression error
Rule 54    bool -> bool error
Rule 55    bool -> expression boolop error
Rule 56    bool -> bool boolop error
Rule 57    bool -> NOT error
Rule 58    boolop -> EQ
Rule 59    boolop -> NEQ
Rule 60    boolop -> LSS
Rule 61    boolop -> GTR
Rule 62    boolop -> LEQ
Rule 63    boolop -> GEQ
Rule 64    boolop -> AND
Rule 65    boolop -> OR
Rule 66    if -> IF OPENPAR bool CLOSEPAR block else
Rule 67    if -> IF OPENPAR bool CLOSEPAR block
Rule 68    if -> IF error
Rule 69    else -> ELSE block
Rule 70    while -> WHILE OPENPAR bool CLOSEPAR block
Rule 71    while -> WHILE error
Rule 72    block -> OPENCURL bcode CLOSECURL
Rule 73    block -> error
Rule 74    bcode -> bcode io EOL
Rule 75    bcode -> bcode varassign EOL
Rule 76    bcode -> bcode while
Rule 77    bcode -> bcode if
Rule 78    bcode -> bcode expression EOL
Rule 79    bcode -> bcode BREAK EOL
Rule 80    bcode -> bcode return EOL
Rule 81    bcode -> empty
Rule 82    bcode -> bcode BREAK error
Rule 83    bcode -> bcode varassign error
Rule 84    bcode -> bcode io error
Rule 85    bcode -> bcode expression error
Rule 86    bcode -> bcode return error
Rule 87    expression -> expression oper expression
Rule 88    expression -> OPENPAR expression CLOSEPAR
Rule 89    expression -> expression oper error
Rule 90    expression -> INT
Rule 91    expression -> FLOAT
Rule 92    expression -> NAME
Rule 93    expression -> FNAME OPENPAR varname CLOSEPAR
Rule 94    expression -> FNAME error
Rule 95    expression -> FNAME OPENPAR varname error
Rule 96    oper -> EXP
Rule 97    oper -> MODULO
Rule 98    oper -> MULTIPLY
Rule 99    oper -> DIVIDE
Rule 100   oper -> PLUS
Rule 101   oper -> MINUS
Rule 102   oper -> EQUALS
Rule 103   vardeclare -> datatype NAME
Rule 104   vardeclare -> datatype error
Rule 105   varassign -> NAME EQUALS expression
Rule 106   varassign -> NAME EQUALS error
Rule 107   varname -> NAME COMMA varname
Rule 108   varname -> NAME
Rule 109   varname -> empty
Rule 110   varname -> error
Rule 111   empty -> <empty>

Terminals, with rules where they appear

AMP                  : 29
AND                  : 64
BREAK                : 79 82
CLOSECURL            : 2 72
CLOSEPAR             : 8 29 30 52 66 67 70 88 93
COMMA                : 12 29 30 41 42 107
COMMENT              : 
DIVIDE               : 99
ELSE                 : 69
EOL                  : 2 7 15 16 17 18 21 74 75 78 79 80
EQ                   : 58
EQUALS               : 102 105 106
EXP                  : 96
FLOAT                : 91
FNAME                : 8 10 11 93 94 95
GEQ                  : 63
GTR                  : 61
IF                   : 66 67 68
INPUT                : 29 31 33 35 37 39 41
INT                  : 90
LEQ                  : 62
LSS                  : 60
MINUS                : 101
MODULO               : 97
MULTIPLY             : 98
NAME                 : 29 30 92 103 105 106 107 108
NEQ                  : 59
NEWLINE              : 
NOT                  : 51 57
OPENCURL             : 2 5 6 7 72
OPENPAR              : 8 29 30 33 34 35 36 37 38 39 40 41 42 52 66 67 70 88 93 95
OR                   : 65
OUTPUT               : 30 32 34 36 38 40 42
PERCENTFLOAT         : 43
PERCENTINT           : 44
PLUS                 : 100
QUOTEMARK            : 29 29 30 30 35 36 37 38 39 39 40 40 41 41 42 42
RETURN               : 27 28
TYPEFLOAT            : 45
TYPEINT              : 46
WHILE                : 70 71
error                : 4 5 6 7 9 10 11 23 24 25 26 28 31 32 33 34 35 36 37 38 39 40 41 42 53 54 55 56 57 68 71 73 82 83 84 85 86 89 94 95 104 106 110

Nonterminals, with rules where they appear

bcode                : 72 74 75 76 77 78 79 80 82 83 84 85 86
begin                : 0
block                : 66 67 69 70
bool                 : 48 48 49 50 51 52 54 56 66 67 70
boolop               : 47 48 49 50 55 56
code                 : 2 5 6 7 15 16 17 18 19 20 21 23 24 25 26
datatype             : 8 9 10 11 103 104
else                 : 66
empty                : 3 14 22 81 109
expression           : 18 26 27 47 47 49 50 53 55 78 85 87 87 88 89 105
funcname             : 2 4 5 6 7
function             : 1 2 4 5 6 7
if                   : 20 77
io                   : 17 25 74 84
oper                 : 87 89
parameters           : 8 11 12
percenttype          : 29 30 37 38 39 40 41 42
return               : 2 6 7 21 80 86
varassign            : 16 24 75 83
vardeclare           : 12 13 15 23
varname              : 93 95 107
while                : 19 76

Parsing method: LALR

state 0

    (0) S' -> . begin
    (1) begin -> . function
    (2) function -> . function funcname OPENCURL code return EOL CLOSECURL
    (3) function -> . empty
    (4) function -> . function funcname error
    (5) function -> . function funcname OPENCURL code error
    (6) function -> . function funcname OPENCURL code return error
    (7) function -> . function funcname OPENCURL code return EOL error
    (111) empty -> .

    TYPEFLOAT       reduce using rule 111 (empty -> .)
    TYPEINT         reduce using rule 111 (empty -> .)
    $end            reduce using rule 111 (empty -> .)

    begin                          shift and go to state 1
    function                       shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> begin .



state 2

    (1) begin -> function .
    (2) function -> function . funcname OPENCURL code return EOL CLOSECURL
    (4) function -> function . funcname error
    (5) function -> function . funcname OPENCURL code error
    (6) function -> function . funcname OPENCURL code return error
    (7) function -> function . funcname OPENCURL code return EOL error
    (8) funcname -> . datatype FNAME OPENPAR parameters CLOSEPAR
    (9) funcname -> . datatype error
    (10) funcname -> . datatype FNAME error
    (11) funcname -> . datatype FNAME parameters error
    (45) datatype -> . TYPEFLOAT
    (46) datatype -> . TYPEINT

    $end            reduce using rule 1 (begin -> function .)
    TYPEFLOAT       shift and go to state 6
    TYPEINT         shift and go to state 7

    funcname                       shift and go to state 4
    datatype                       shift and go to state 5

state 3

    (3) function -> empty .

    TYPEFLOAT       reduce using rule 3 (function -> empty .)
    TYPEINT         reduce using rule 3 (function -> empty .)
    $end            reduce using rule 3 (function -> empty .)


state 4

    (2) function -> function funcname . OPENCURL code return EOL CLOSECURL
    (4) function -> function funcname . error
    (5) function -> function funcname . OPENCURL code error
    (6) function -> function funcname . OPENCURL code return error
    (7) function -> function funcname . OPENCURL code return EOL error

    OPENCURL        shift and go to state 8
    error           shift and go to state 9


state 5

    (8) funcname -> datatype . FNAME OPENPAR parameters CLOSEPAR
    (9) funcname -> datatype . error
    (10) funcname -> datatype . FNAME error
    (11) funcname -> datatype . FNAME parameters error

    FNAME           shift and go to state 10
    error           shift and go to state 11


state 6

    (45) datatype -> TYPEFLOAT .

    FNAME           reduce using rule 45 (datatype -> TYPEFLOAT .)
    error           reduce using rule 45 (datatype -> TYPEFLOAT .)
    NAME            reduce using rule 45 (datatype -> TYPEFLOAT .)


state 7

    (46) datatype -> TYPEINT .

    FNAME           reduce using rule 46 (datatype -> TYPEINT .)
    error           reduce using rule 46 (datatype -> TYPEINT .)
    NAME            reduce using rule 46 (datatype -> TYPEINT .)


state 8

    (2) function -> function funcname OPENCURL . code return EOL CLOSECURL
    (5) function -> function funcname OPENCURL . code error
    (6) function -> function funcname OPENCURL . code return error
    (7) function -> function funcname OPENCURL . code return EOL error
    (15) code -> . code vardeclare EOL
    (16) code -> . code varassign EOL
    (17) code -> . code io EOL
    (18) code -> . code expression EOL
    (19) code -> . code while
    (20) code -> . code if
    (21) code -> . code return EOL
    (22) code -> . empty
    (23) code -> . code vardeclare error
    (24) code -> . code varassign error
    (25) code -> . code io error
    (26) code -> . code expression error
    (111) empty -> .

    error           reduce using rule 111 (empty -> .)
    RETURN          reduce using rule 111 (empty -> .)
    NAME            reduce using rule 111 (empty -> .)
    INPUT           reduce using rule 111 (empty -> .)
    OUTPUT          reduce using rule 111 (empty -> .)
    OPENPAR         reduce using rule 111 (empty -> .)
    INT             reduce using rule 111 (empty -> .)
    FLOAT           reduce using rule 111 (empty -> .)
    FNAME           reduce using rule 111 (empty -> .)
    WHILE           reduce using rule 111 (empty -> .)
    IF              reduce using rule 111 (empty -> .)
    TYPEFLOAT       reduce using rule 111 (empty -> .)
    TYPEINT         reduce using rule 111 (empty -> .)

    code                           shift and go to state 12
    empty                          shift and go to state 13

state 9

    (4) function -> function funcname error .

    TYPEFLOAT       reduce using rule 4 (function -> function funcname error .)
    TYPEINT         reduce using rule 4 (function -> function funcname error .)
    $end            reduce using rule 4 (function -> function funcname error .)


state 10

    (8) funcname -> datatype FNAME . OPENPAR parameters CLOSEPAR
    (10) funcname -> datatype FNAME . error
    (11) funcname -> datatype FNAME . parameters error
    (12) parameters -> . vardeclare COMMA parameters
    (13) parameters -> . vardeclare
    (14) parameters -> . empty
    (103) vardeclare -> . datatype NAME
    (104) vardeclare -> . datatype error
    (111) empty -> .
    (45) datatype -> . TYPEFLOAT
    (46) datatype -> . TYPEINT

  ! shift/reduce conflict for error resolved as shift
    OPENPAR         shift and go to state 15
    error           shift and go to state 17
    TYPEFLOAT       shift and go to state 6
    TYPEINT         shift and go to state 7

  ! error           [ reduce using rule 111 (empty -> .) ]

    datatype                       shift and go to state 14
    parameters                     shift and go to state 16
    vardeclare                     shift and go to state 18
    empty                          shift and go to state 19

state 11

    (9) funcname -> datatype error .

    OPENCURL        reduce using rule 9 (funcname -> datatype error .)
    error           reduce using rule 9 (funcname -> datatype error .)


state 12

    (2) function -> function funcname OPENCURL code . return EOL CLOSECURL
    (5) function -> function funcname OPENCURL code . error
    (6) function -> function funcname OPENCURL code . return error
    (7) function -> function funcname OPENCURL code . return EOL error
    (15) code -> code . vardeclare EOL
    (16) code -> code . varassign EOL
    (17) code -> code . io EOL
    (18) code -> code . expression EOL
    (19) code -> code . while
    (20) code -> code . if
    (21) code -> code . return EOL
    (23) code -> code . vardeclare error
    (24) code -> code . varassign error
    (25) code -> code . io error
    (26) code -> code . expression error
    (27) return -> . RETURN expression
    (28) return -> . RETURN error
    (103) vardeclare -> . datatype NAME
    (104) vardeclare -> . datatype error
    (105) varassign -> . NAME EQUALS expression
    (106) varassign -> . NAME EQUALS error
    (29) io -> . INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA AMP NAME CLOSEPAR
    (30) io -> . OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA NAME CLOSEPAR
    (31) io -> . INPUT error
    (32) io -> . OUTPUT error
    (33) io -> . INPUT OPENPAR error
    (34) io -> . OUTPUT OPENPAR error
    (35) io -> . INPUT OPENPAR QUOTEMARK error
    (36) io -> . OUTPUT OPENPAR QUOTEMARK error
    (37) io -> . INPUT OPENPAR QUOTEMARK percenttype error
    (38) io -> . OUTPUT OPENPAR QUOTEMARK percenttype error
    (39) io -> . INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK error
    (40) io -> . OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK error
    (41) io -> . INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA error
    (42) io -> . OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA error
    (87) expression -> . expression oper expression
    (88) expression -> . OPENPAR expression CLOSEPAR
    (89) expression -> . expression oper error
    (90) expression -> . INT
    (91) expression -> . FLOAT
    (92) expression -> . NAME
    (93) expression -> . FNAME OPENPAR varname CLOSEPAR
    (94) expression -> . FNAME error
    (95) expression -> . FNAME OPENPAR varname error
    (70) while -> . WHILE OPENPAR bool CLOSEPAR block
    (71) while -> . WHILE error
    (66) if -> . IF OPENPAR bool CLOSEPAR block else
    (67) if -> . IF OPENPAR bool CLOSEPAR block
    (68) if -> . IF error
    (45) datatype -> . TYPEFLOAT
    (46) datatype -> . TYPEINT

    error           shift and go to state 21
    RETURN          shift and go to state 28
    NAME            shift and go to state 29
    INPUT           shift and go to state 30
    OUTPUT          shift and go to state 32
    OPENPAR         shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    FNAME           shift and go to state 35
    WHILE           shift and go to state 36
    IF              shift and go to state 37
    TYPEFLOAT       shift and go to state 6
    TYPEINT         shift and go to state 7

    return                         shift and go to state 20
    vardeclare                     shift and go to state 22
    varassign                      shift and go to state 23
    io                             shift and go to state 24
    expression                     shift and go to state 25
    while                          shift and go to state 26
    if                             shift and go to state 27
    datatype                       shift and go to state 14

state 13

    (22) code -> empty .

    error           reduce using rule 22 (code -> empty .)
    RETURN          reduce using rule 22 (code -> empty .)
    NAME            reduce using rule 22 (code -> empty .)
    INPUT           reduce using rule 22 (code -> empty .)
    OUTPUT          reduce using rule 22 (code -> empty .)
    OPENPAR         reduce using rule 22 (code -> empty .)
    INT             reduce using rule 22 (code -> empty .)
    FLOAT           reduce using rule 22 (code -> empty .)
    FNAME           reduce using rule 22 (code -> empty .)
    WHILE           reduce using rule 22 (code -> empty .)
    IF              reduce using rule 22 (code -> empty .)
    TYPEFLOAT       reduce using rule 22 (code -> empty .)
    TYPEINT         reduce using rule 22 (code -> empty .)


state 14

    (103) vardeclare -> datatype . NAME
    (104) vardeclare -> datatype . error

    NAME            shift and go to state 38
    error           shift and go to state 39


state 15

    (8) funcname -> datatype FNAME OPENPAR . parameters CLOSEPAR
    (12) parameters -> . vardeclare COMMA parameters
    (13) parameters -> . vardeclare
    (14) parameters -> . empty
    (103) vardeclare -> . datatype NAME
    (104) vardeclare -> . datatype error
    (111) empty -> .
    (45) datatype -> . TYPEFLOAT
    (46) datatype -> . TYPEINT

    CLOSEPAR        reduce using rule 111 (empty -> .)
    TYPEFLOAT       shift and go to state 6
    TYPEINT         shift and go to state 7

    datatype                       shift and go to state 14
    parameters                     shift and go to state 40
    vardeclare                     shift and go to state 18
    empty                          shift and go to state 19

state 16

    (11) funcname -> datatype FNAME parameters . error

    error           shift and go to state 41


state 17

    (10) funcname -> datatype FNAME error .

    OPENCURL        reduce using rule 10 (funcname -> datatype FNAME error .)
    error           reduce using rule 10 (funcname -> datatype FNAME error .)


state 18

    (12) parameters -> vardeclare . COMMA parameters
    (13) parameters -> vardeclare .

    COMMA           shift and go to state 42
    error           reduce using rule 13 (parameters -> vardeclare .)
    CLOSEPAR        reduce using rule 13 (parameters -> vardeclare .)


state 19

    (14) parameters -> empty .

    error           reduce using rule 14 (parameters -> empty .)
    CLOSEPAR        reduce using rule 14 (parameters -> empty .)


state 20

    (2) function -> function funcname OPENCURL code return . EOL CLOSECURL
    (6) function -> function funcname OPENCURL code return . error
    (7) function -> function funcname OPENCURL code return . EOL error
    (21) code -> code return . EOL

    EOL             shift and go to state 43
    error           shift and go to state 44


state 21

    (5) function -> function funcname OPENCURL code error .

    TYPEFLOAT       reduce using rule 5 (function -> function funcname OPENCURL code error .)
    TYPEINT         reduce using rule 5 (function -> function funcname OPENCURL code error .)
    $end            reduce using rule 5 (function -> function funcname OPENCURL code error .)


state 22

    (15) code -> code vardeclare . EOL
    (23) code -> code vardeclare . error

    EOL             shift and go to state 45
    error           shift and go to state 46


state 23

    (16) code -> code varassign . EOL
    (24) code -> code varassign . error

    EOL             shift and go to state 47
    error           shift and go to state 48


state 24

    (17) code -> code io . EOL
    (25) code -> code io . error

    EOL             shift and go to state 49
    error           shift and go to state 50


state 25

    (18) code -> code expression . EOL
    (26) code -> code expression . error
    (87) expression -> expression . oper expression
    (89) expression -> expression . oper error
    (96) oper -> . EXP
    (97) oper -> . MODULO
    (98) oper -> . MULTIPLY
    (99) oper -> . DIVIDE
    (100) oper -> . PLUS
    (101) oper -> . MINUS
    (102) oper -> . EQUALS

    EOL             shift and go to state 51
    error           shift and go to state 52
    EXP             shift and go to state 54
    MODULO          shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EQUALS          shift and go to state 60

    oper                           shift and go to state 53

state 26

    (19) code -> code while .

    error           reduce using rule 19 (code -> code while .)
    RETURN          reduce using rule 19 (code -> code while .)
    NAME            reduce using rule 19 (code -> code while .)
    INPUT           reduce using rule 19 (code -> code while .)
    OUTPUT          reduce using rule 19 (code -> code while .)
    OPENPAR         reduce using rule 19 (code -> code while .)
    INT             reduce using rule 19 (code -> code while .)
    FLOAT           reduce using rule 19 (code -> code while .)
    FNAME           reduce using rule 19 (code -> code while .)
    WHILE           reduce using rule 19 (code -> code while .)
    IF              reduce using rule 19 (code -> code while .)
    TYPEFLOAT       reduce using rule 19 (code -> code while .)
    TYPEINT         reduce using rule 19 (code -> code while .)


state 27

    (20) code -> code if .

    error           reduce using rule 20 (code -> code if .)
    RETURN          reduce using rule 20 (code -> code if .)
    NAME            reduce using rule 20 (code -> code if .)
    INPUT           reduce using rule 20 (code -> code if .)
    OUTPUT          reduce using rule 20 (code -> code if .)
    OPENPAR         reduce using rule 20 (code -> code if .)
    INT             reduce using rule 20 (code -> code if .)
    FLOAT           reduce using rule 20 (code -> code if .)
    FNAME           reduce using rule 20 (code -> code if .)
    WHILE           reduce using rule 20 (code -> code if .)
    IF              reduce using rule 20 (code -> code if .)
    TYPEFLOAT       reduce using rule 20 (code -> code if .)
    TYPEINT         reduce using rule 20 (code -> code if .)


state 28

    (27) return -> RETURN . expression
    (28) return -> RETURN . error
    (87) expression -> . expression oper expression
    (88) expression -> . OPENPAR expression CLOSEPAR
    (89) expression -> . expression oper error
    (90) expression -> . INT
    (91) expression -> . FLOAT
    (92) expression -> . NAME
    (93) expression -> . FNAME OPENPAR varname CLOSEPAR
    (94) expression -> . FNAME error
    (95) expression -> . FNAME OPENPAR varname error

    error           shift and go to state 62
    OPENPAR         shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    NAME            shift and go to state 63
    FNAME           shift and go to state 35

    expression                     shift and go to state 61

state 29

    (105) varassign -> NAME . EQUALS expression
    (106) varassign -> NAME . EQUALS error
    (92) expression -> NAME .

  ! shift/reduce conflict for EQUALS resolved as shift
    EQUALS          shift and go to state 64
    EOL             reduce using rule 92 (expression -> NAME .)
    error           reduce using rule 92 (expression -> NAME .)
    EXP             reduce using rule 92 (expression -> NAME .)
    MODULO          reduce using rule 92 (expression -> NAME .)
    MULTIPLY        reduce using rule 92 (expression -> NAME .)
    DIVIDE          reduce using rule 92 (expression -> NAME .)
    PLUS            reduce using rule 92 (expression -> NAME .)
    MINUS           reduce using rule 92 (expression -> NAME .)

  ! EQUALS          [ reduce using rule 92 (expression -> NAME .) ]


state 30

    (29) io -> INPUT . OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA AMP NAME CLOSEPAR
    (31) io -> INPUT . error
    (33) io -> INPUT . OPENPAR error
    (35) io -> INPUT . OPENPAR QUOTEMARK error
    (37) io -> INPUT . OPENPAR QUOTEMARK percenttype error
    (39) io -> INPUT . OPENPAR QUOTEMARK percenttype QUOTEMARK error
    (41) io -> INPUT . OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA error

    OPENPAR         shift and go to state 65
    error           shift and go to state 66


state 31

    (88) expression -> OPENPAR . expression CLOSEPAR
    (87) expression -> . expression oper expression
    (88) expression -> . OPENPAR expression CLOSEPAR
    (89) expression -> . expression oper error
    (90) expression -> . INT
    (91) expression -> . FLOAT
    (92) expression -> . NAME
    (93) expression -> . FNAME OPENPAR varname CLOSEPAR
    (94) expression -> . FNAME error
    (95) expression -> . FNAME OPENPAR varname error

    OPENPAR         shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    NAME            shift and go to state 63
    FNAME           shift and go to state 35

    expression                     shift and go to state 67

state 32

    (30) io -> OUTPUT . OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA NAME CLOSEPAR
    (32) io -> OUTPUT . error
    (34) io -> OUTPUT . OPENPAR error
    (36) io -> OUTPUT . OPENPAR QUOTEMARK error
    (38) io -> OUTPUT . OPENPAR QUOTEMARK percenttype error
    (40) io -> OUTPUT . OPENPAR QUOTEMARK percenttype QUOTEMARK error
    (42) io -> OUTPUT . OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA error

    OPENPAR         shift and go to state 68
    error           shift and go to state 69


state 33

    (90) expression -> INT .

    EOL             reduce using rule 90 (expression -> INT .)
    error           reduce using rule 90 (expression -> INT .)
    EXP             reduce using rule 90 (expression -> INT .)
    MODULO          reduce using rule 90 (expression -> INT .)
    MULTIPLY        reduce using rule 90 (expression -> INT .)
    DIVIDE          reduce using rule 90 (expression -> INT .)
    PLUS            reduce using rule 90 (expression -> INT .)
    MINUS           reduce using rule 90 (expression -> INT .)
    EQUALS          reduce using rule 90 (expression -> INT .)
    CLOSEPAR        reduce using rule 90 (expression -> INT .)
    EQ              reduce using rule 90 (expression -> INT .)
    NEQ             reduce using rule 90 (expression -> INT .)
    LSS             reduce using rule 90 (expression -> INT .)
    GTR             reduce using rule 90 (expression -> INT .)
    LEQ             reduce using rule 90 (expression -> INT .)
    GEQ             reduce using rule 90 (expression -> INT .)
    AND             reduce using rule 90 (expression -> INT .)
    OR              reduce using rule 90 (expression -> INT .)


state 34

    (91) expression -> FLOAT .

    EOL             reduce using rule 91 (expression -> FLOAT .)
    error           reduce using rule 91 (expression -> FLOAT .)
    EXP             reduce using rule 91 (expression -> FLOAT .)
    MODULO          reduce using rule 91 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 91 (expression -> FLOAT .)
    DIVIDE          reduce using rule 91 (expression -> FLOAT .)
    PLUS            reduce using rule 91 (expression -> FLOAT .)
    MINUS           reduce using rule 91 (expression -> FLOAT .)
    EQUALS          reduce using rule 91 (expression -> FLOAT .)
    CLOSEPAR        reduce using rule 91 (expression -> FLOAT .)
    EQ              reduce using rule 91 (expression -> FLOAT .)
    NEQ             reduce using rule 91 (expression -> FLOAT .)
    LSS             reduce using rule 91 (expression -> FLOAT .)
    GTR             reduce using rule 91 (expression -> FLOAT .)
    LEQ             reduce using rule 91 (expression -> FLOAT .)
    GEQ             reduce using rule 91 (expression -> FLOAT .)
    AND             reduce using rule 91 (expression -> FLOAT .)
    OR              reduce using rule 91 (expression -> FLOAT .)


state 35

    (93) expression -> FNAME . OPENPAR varname CLOSEPAR
    (94) expression -> FNAME . error
    (95) expression -> FNAME . OPENPAR varname error

    OPENPAR         shift and go to state 70
    error           shift and go to state 71


state 36

    (70) while -> WHILE . OPENPAR bool CLOSEPAR block
    (71) while -> WHILE . error

    OPENPAR         shift and go to state 72
    error           shift and go to state 73


state 37

    (66) if -> IF . OPENPAR bool CLOSEPAR block else
    (67) if -> IF . OPENPAR bool CLOSEPAR block
    (68) if -> IF . error

    OPENPAR         shift and go to state 74
    error           shift and go to state 75


state 38

    (103) vardeclare -> datatype NAME .

    COMMA           reduce using rule 103 (vardeclare -> datatype NAME .)
    error           reduce using rule 103 (vardeclare -> datatype NAME .)
    EOL             reduce using rule 103 (vardeclare -> datatype NAME .)
    CLOSEPAR        reduce using rule 103 (vardeclare -> datatype NAME .)


state 39

    (104) vardeclare -> datatype error .

    COMMA           reduce using rule 104 (vardeclare -> datatype error .)
    error           reduce using rule 104 (vardeclare -> datatype error .)
    EOL             reduce using rule 104 (vardeclare -> datatype error .)
    CLOSEPAR        reduce using rule 104 (vardeclare -> datatype error .)


state 40

    (8) funcname -> datatype FNAME OPENPAR parameters . CLOSEPAR

    CLOSEPAR        shift and go to state 76


state 41

    (11) funcname -> datatype FNAME parameters error .

    OPENCURL        reduce using rule 11 (funcname -> datatype FNAME parameters error .)
    error           reduce using rule 11 (funcname -> datatype FNAME parameters error .)


state 42

    (12) parameters -> vardeclare COMMA . parameters
    (12) parameters -> . vardeclare COMMA parameters
    (13) parameters -> . vardeclare
    (14) parameters -> . empty
    (103) vardeclare -> . datatype NAME
    (104) vardeclare -> . datatype error
    (111) empty -> .
    (45) datatype -> . TYPEFLOAT
    (46) datatype -> . TYPEINT

    error           reduce using rule 111 (empty -> .)
    CLOSEPAR        reduce using rule 111 (empty -> .)
    TYPEFLOAT       shift and go to state 6
    TYPEINT         shift and go to state 7

    vardeclare                     shift and go to state 18
    parameters                     shift and go to state 77
    empty                          shift and go to state 19
    datatype                       shift and go to state 14

state 43

    (2) function -> function funcname OPENCURL code return EOL . CLOSECURL
    (7) function -> function funcname OPENCURL code return EOL . error
    (21) code -> code return EOL .

  ! shift/reduce conflict for error resolved as shift
    CLOSECURL       shift and go to state 78
    error           shift and go to state 79
    RETURN          reduce using rule 21 (code -> code return EOL .)
    NAME            reduce using rule 21 (code -> code return EOL .)
    INPUT           reduce using rule 21 (code -> code return EOL .)
    OUTPUT          reduce using rule 21 (code -> code return EOL .)
    OPENPAR         reduce using rule 21 (code -> code return EOL .)
    INT             reduce using rule 21 (code -> code return EOL .)
    FLOAT           reduce using rule 21 (code -> code return EOL .)
    FNAME           reduce using rule 21 (code -> code return EOL .)
    WHILE           reduce using rule 21 (code -> code return EOL .)
    IF              reduce using rule 21 (code -> code return EOL .)
    TYPEFLOAT       reduce using rule 21 (code -> code return EOL .)
    TYPEINT         reduce using rule 21 (code -> code return EOL .)

  ! error           [ reduce using rule 21 (code -> code return EOL .) ]


state 44

    (6) function -> function funcname OPENCURL code return error .

    TYPEFLOAT       reduce using rule 6 (function -> function funcname OPENCURL code return error .)
    TYPEINT         reduce using rule 6 (function -> function funcname OPENCURL code return error .)
    $end            reduce using rule 6 (function -> function funcname OPENCURL code return error .)


state 45

    (15) code -> code vardeclare EOL .

    error           reduce using rule 15 (code -> code vardeclare EOL .)
    RETURN          reduce using rule 15 (code -> code vardeclare EOL .)
    NAME            reduce using rule 15 (code -> code vardeclare EOL .)
    INPUT           reduce using rule 15 (code -> code vardeclare EOL .)
    OUTPUT          reduce using rule 15 (code -> code vardeclare EOL .)
    OPENPAR         reduce using rule 15 (code -> code vardeclare EOL .)
    INT             reduce using rule 15 (code -> code vardeclare EOL .)
    FLOAT           reduce using rule 15 (code -> code vardeclare EOL .)
    FNAME           reduce using rule 15 (code -> code vardeclare EOL .)
    WHILE           reduce using rule 15 (code -> code vardeclare EOL .)
    IF              reduce using rule 15 (code -> code vardeclare EOL .)
    TYPEFLOAT       reduce using rule 15 (code -> code vardeclare EOL .)
    TYPEINT         reduce using rule 15 (code -> code vardeclare EOL .)


state 46

    (23) code -> code vardeclare error .

    error           reduce using rule 23 (code -> code vardeclare error .)
    RETURN          reduce using rule 23 (code -> code vardeclare error .)
    NAME            reduce using rule 23 (code -> code vardeclare error .)
    INPUT           reduce using rule 23 (code -> code vardeclare error .)
    OUTPUT          reduce using rule 23 (code -> code vardeclare error .)
    OPENPAR         reduce using rule 23 (code -> code vardeclare error .)
    INT             reduce using rule 23 (code -> code vardeclare error .)
    FLOAT           reduce using rule 23 (code -> code vardeclare error .)
    FNAME           reduce using rule 23 (code -> code vardeclare error .)
    WHILE           reduce using rule 23 (code -> code vardeclare error .)
    IF              reduce using rule 23 (code -> code vardeclare error .)
    TYPEFLOAT       reduce using rule 23 (code -> code vardeclare error .)
    TYPEINT         reduce using rule 23 (code -> code vardeclare error .)


state 47

    (16) code -> code varassign EOL .

    error           reduce using rule 16 (code -> code varassign EOL .)
    RETURN          reduce using rule 16 (code -> code varassign EOL .)
    NAME            reduce using rule 16 (code -> code varassign EOL .)
    INPUT           reduce using rule 16 (code -> code varassign EOL .)
    OUTPUT          reduce using rule 16 (code -> code varassign EOL .)
    OPENPAR         reduce using rule 16 (code -> code varassign EOL .)
    INT             reduce using rule 16 (code -> code varassign EOL .)
    FLOAT           reduce using rule 16 (code -> code varassign EOL .)
    FNAME           reduce using rule 16 (code -> code varassign EOL .)
    WHILE           reduce using rule 16 (code -> code varassign EOL .)
    IF              reduce using rule 16 (code -> code varassign EOL .)
    TYPEFLOAT       reduce using rule 16 (code -> code varassign EOL .)
    TYPEINT         reduce using rule 16 (code -> code varassign EOL .)


state 48

    (24) code -> code varassign error .

    error           reduce using rule 24 (code -> code varassign error .)
    RETURN          reduce using rule 24 (code -> code varassign error .)
    NAME            reduce using rule 24 (code -> code varassign error .)
    INPUT           reduce using rule 24 (code -> code varassign error .)
    OUTPUT          reduce using rule 24 (code -> code varassign error .)
    OPENPAR         reduce using rule 24 (code -> code varassign error .)
    INT             reduce using rule 24 (code -> code varassign error .)
    FLOAT           reduce using rule 24 (code -> code varassign error .)
    FNAME           reduce using rule 24 (code -> code varassign error .)
    WHILE           reduce using rule 24 (code -> code varassign error .)
    IF              reduce using rule 24 (code -> code varassign error .)
    TYPEFLOAT       reduce using rule 24 (code -> code varassign error .)
    TYPEINT         reduce using rule 24 (code -> code varassign error .)


state 49

    (17) code -> code io EOL .

    error           reduce using rule 17 (code -> code io EOL .)
    RETURN          reduce using rule 17 (code -> code io EOL .)
    NAME            reduce using rule 17 (code -> code io EOL .)
    INPUT           reduce using rule 17 (code -> code io EOL .)
    OUTPUT          reduce using rule 17 (code -> code io EOL .)
    OPENPAR         reduce using rule 17 (code -> code io EOL .)
    INT             reduce using rule 17 (code -> code io EOL .)
    FLOAT           reduce using rule 17 (code -> code io EOL .)
    FNAME           reduce using rule 17 (code -> code io EOL .)
    WHILE           reduce using rule 17 (code -> code io EOL .)
    IF              reduce using rule 17 (code -> code io EOL .)
    TYPEFLOAT       reduce using rule 17 (code -> code io EOL .)
    TYPEINT         reduce using rule 17 (code -> code io EOL .)


state 50

    (25) code -> code io error .

    error           reduce using rule 25 (code -> code io error .)
    RETURN          reduce using rule 25 (code -> code io error .)
    NAME            reduce using rule 25 (code -> code io error .)
    INPUT           reduce using rule 25 (code -> code io error .)
    OUTPUT          reduce using rule 25 (code -> code io error .)
    OPENPAR         reduce using rule 25 (code -> code io error .)
    INT             reduce using rule 25 (code -> code io error .)
    FLOAT           reduce using rule 25 (code -> code io error .)
    FNAME           reduce using rule 25 (code -> code io error .)
    WHILE           reduce using rule 25 (code -> code io error .)
    IF              reduce using rule 25 (code -> code io error .)
    TYPEFLOAT       reduce using rule 25 (code -> code io error .)
    TYPEINT         reduce using rule 25 (code -> code io error .)


state 51

    (18) code -> code expression EOL .

    error           reduce using rule 18 (code -> code expression EOL .)
    RETURN          reduce using rule 18 (code -> code expression EOL .)
    NAME            reduce using rule 18 (code -> code expression EOL .)
    INPUT           reduce using rule 18 (code -> code expression EOL .)
    OUTPUT          reduce using rule 18 (code -> code expression EOL .)
    OPENPAR         reduce using rule 18 (code -> code expression EOL .)
    INT             reduce using rule 18 (code -> code expression EOL .)
    FLOAT           reduce using rule 18 (code -> code expression EOL .)
    FNAME           reduce using rule 18 (code -> code expression EOL .)
    WHILE           reduce using rule 18 (code -> code expression EOL .)
    IF              reduce using rule 18 (code -> code expression EOL .)
    TYPEFLOAT       reduce using rule 18 (code -> code expression EOL .)
    TYPEINT         reduce using rule 18 (code -> code expression EOL .)


state 52

    (26) code -> code expression error .

    error           reduce using rule 26 (code -> code expression error .)
    RETURN          reduce using rule 26 (code -> code expression error .)
    NAME            reduce using rule 26 (code -> code expression error .)
    INPUT           reduce using rule 26 (code -> code expression error .)
    OUTPUT          reduce using rule 26 (code -> code expression error .)
    OPENPAR         reduce using rule 26 (code -> code expression error .)
    INT             reduce using rule 26 (code -> code expression error .)
    FLOAT           reduce using rule 26 (code -> code expression error .)
    FNAME           reduce using rule 26 (code -> code expression error .)
    WHILE           reduce using rule 26 (code -> code expression error .)
    IF              reduce using rule 26 (code -> code expression error .)
    TYPEFLOAT       reduce using rule 26 (code -> code expression error .)
    TYPEINT         reduce using rule 26 (code -> code expression error .)


state 53

    (87) expression -> expression oper . expression
    (89) expression -> expression oper . error
    (87) expression -> . expression oper expression
    (88) expression -> . OPENPAR expression CLOSEPAR
    (89) expression -> . expression oper error
    (90) expression -> . INT
    (91) expression -> . FLOAT
    (92) expression -> . NAME
    (93) expression -> . FNAME OPENPAR varname CLOSEPAR
    (94) expression -> . FNAME error
    (95) expression -> . FNAME OPENPAR varname error

    error           shift and go to state 81
    OPENPAR         shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    NAME            shift and go to state 63
    FNAME           shift and go to state 35

    expression                     shift and go to state 80

state 54

    (96) oper -> EXP .

    error           reduce using rule 96 (oper -> EXP .)
    OPENPAR         reduce using rule 96 (oper -> EXP .)
    INT             reduce using rule 96 (oper -> EXP .)
    FLOAT           reduce using rule 96 (oper -> EXP .)
    NAME            reduce using rule 96 (oper -> EXP .)
    FNAME           reduce using rule 96 (oper -> EXP .)


state 55

    (97) oper -> MODULO .

    error           reduce using rule 97 (oper -> MODULO .)
    OPENPAR         reduce using rule 97 (oper -> MODULO .)
    INT             reduce using rule 97 (oper -> MODULO .)
    FLOAT           reduce using rule 97 (oper -> MODULO .)
    NAME            reduce using rule 97 (oper -> MODULO .)
    FNAME           reduce using rule 97 (oper -> MODULO .)


state 56

    (98) oper -> MULTIPLY .

    error           reduce using rule 98 (oper -> MULTIPLY .)
    OPENPAR         reduce using rule 98 (oper -> MULTIPLY .)
    INT             reduce using rule 98 (oper -> MULTIPLY .)
    FLOAT           reduce using rule 98 (oper -> MULTIPLY .)
    NAME            reduce using rule 98 (oper -> MULTIPLY .)
    FNAME           reduce using rule 98 (oper -> MULTIPLY .)


state 57

    (99) oper -> DIVIDE .

    error           reduce using rule 99 (oper -> DIVIDE .)
    OPENPAR         reduce using rule 99 (oper -> DIVIDE .)
    INT             reduce using rule 99 (oper -> DIVIDE .)
    FLOAT           reduce using rule 99 (oper -> DIVIDE .)
    NAME            reduce using rule 99 (oper -> DIVIDE .)
    FNAME           reduce using rule 99 (oper -> DIVIDE .)


state 58

    (100) oper -> PLUS .

    error           reduce using rule 100 (oper -> PLUS .)
    OPENPAR         reduce using rule 100 (oper -> PLUS .)
    INT             reduce using rule 100 (oper -> PLUS .)
    FLOAT           reduce using rule 100 (oper -> PLUS .)
    NAME            reduce using rule 100 (oper -> PLUS .)
    FNAME           reduce using rule 100 (oper -> PLUS .)


state 59

    (101) oper -> MINUS .

    error           reduce using rule 101 (oper -> MINUS .)
    OPENPAR         reduce using rule 101 (oper -> MINUS .)
    INT             reduce using rule 101 (oper -> MINUS .)
    FLOAT           reduce using rule 101 (oper -> MINUS .)
    NAME            reduce using rule 101 (oper -> MINUS .)
    FNAME           reduce using rule 101 (oper -> MINUS .)


state 60

    (102) oper -> EQUALS .

    error           reduce using rule 102 (oper -> EQUALS .)
    OPENPAR         reduce using rule 102 (oper -> EQUALS .)
    INT             reduce using rule 102 (oper -> EQUALS .)
    FLOAT           reduce using rule 102 (oper -> EQUALS .)
    NAME            reduce using rule 102 (oper -> EQUALS .)
    FNAME           reduce using rule 102 (oper -> EQUALS .)


state 61

    (27) return -> RETURN expression .
    (87) expression -> expression . oper expression
    (89) expression -> expression . oper error
    (96) oper -> . EXP
    (97) oper -> . MODULO
    (98) oper -> . MULTIPLY
    (99) oper -> . DIVIDE
    (100) oper -> . PLUS
    (101) oper -> . MINUS
    (102) oper -> . EQUALS

    EOL             reduce using rule 27 (return -> RETURN expression .)
    error           reduce using rule 27 (return -> RETURN expression .)
    EXP             shift and go to state 54
    MODULO          shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EQUALS          shift and go to state 60

    oper                           shift and go to state 53

state 62

    (28) return -> RETURN error .

    EOL             reduce using rule 28 (return -> RETURN error .)
    error           reduce using rule 28 (return -> RETURN error .)


state 63

    (92) expression -> NAME .

    EXP             reduce using rule 92 (expression -> NAME .)
    MODULO          reduce using rule 92 (expression -> NAME .)
    MULTIPLY        reduce using rule 92 (expression -> NAME .)
    DIVIDE          reduce using rule 92 (expression -> NAME .)
    PLUS            reduce using rule 92 (expression -> NAME .)
    MINUS           reduce using rule 92 (expression -> NAME .)
    EQUALS          reduce using rule 92 (expression -> NAME .)
    EOL             reduce using rule 92 (expression -> NAME .)
    error           reduce using rule 92 (expression -> NAME .)
    CLOSEPAR        reduce using rule 92 (expression -> NAME .)
    EQ              reduce using rule 92 (expression -> NAME .)
    NEQ             reduce using rule 92 (expression -> NAME .)
    LSS             reduce using rule 92 (expression -> NAME .)
    GTR             reduce using rule 92 (expression -> NAME .)
    LEQ             reduce using rule 92 (expression -> NAME .)
    GEQ             reduce using rule 92 (expression -> NAME .)
    AND             reduce using rule 92 (expression -> NAME .)
    OR              reduce using rule 92 (expression -> NAME .)


state 64

    (105) varassign -> NAME EQUALS . expression
    (106) varassign -> NAME EQUALS . error
    (87) expression -> . expression oper expression
    (88) expression -> . OPENPAR expression CLOSEPAR
    (89) expression -> . expression oper error
    (90) expression -> . INT
    (91) expression -> . FLOAT
    (92) expression -> . NAME
    (93) expression -> . FNAME OPENPAR varname CLOSEPAR
    (94) expression -> . FNAME error
    (95) expression -> . FNAME OPENPAR varname error

    error           shift and go to state 83
    OPENPAR         shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    NAME            shift and go to state 63
    FNAME           shift and go to state 35

    expression                     shift and go to state 82

state 65

    (29) io -> INPUT OPENPAR . QUOTEMARK percenttype QUOTEMARK COMMA AMP NAME CLOSEPAR
    (33) io -> INPUT OPENPAR . error
    (35) io -> INPUT OPENPAR . QUOTEMARK error
    (37) io -> INPUT OPENPAR . QUOTEMARK percenttype error
    (39) io -> INPUT OPENPAR . QUOTEMARK percenttype QUOTEMARK error
    (41) io -> INPUT OPENPAR . QUOTEMARK percenttype QUOTEMARK COMMA error

    QUOTEMARK       shift and go to state 84
    error           shift and go to state 85


state 66

    (31) io -> INPUT error .

    EOL             reduce using rule 31 (io -> INPUT error .)
    error           reduce using rule 31 (io -> INPUT error .)


state 67

    (88) expression -> OPENPAR expression . CLOSEPAR
    (87) expression -> expression . oper expression
    (89) expression -> expression . oper error
    (96) oper -> . EXP
    (97) oper -> . MODULO
    (98) oper -> . MULTIPLY
    (99) oper -> . DIVIDE
    (100) oper -> . PLUS
    (101) oper -> . MINUS
    (102) oper -> . EQUALS

    CLOSEPAR        shift and go to state 86
    EXP             shift and go to state 54
    MODULO          shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EQUALS          shift and go to state 60

    oper                           shift and go to state 53

state 68

    (30) io -> OUTPUT OPENPAR . QUOTEMARK percenttype QUOTEMARK COMMA NAME CLOSEPAR
    (34) io -> OUTPUT OPENPAR . error
    (36) io -> OUTPUT OPENPAR . QUOTEMARK error
    (38) io -> OUTPUT OPENPAR . QUOTEMARK percenttype error
    (40) io -> OUTPUT OPENPAR . QUOTEMARK percenttype QUOTEMARK error
    (42) io -> OUTPUT OPENPAR . QUOTEMARK percenttype QUOTEMARK COMMA error

    QUOTEMARK       shift and go to state 87
    error           shift and go to state 88


state 69

    (32) io -> OUTPUT error .

    EOL             reduce using rule 32 (io -> OUTPUT error .)
    error           reduce using rule 32 (io -> OUTPUT error .)


state 70

    (93) expression -> FNAME OPENPAR . varname CLOSEPAR
    (95) expression -> FNAME OPENPAR . varname error
    (107) varname -> . NAME COMMA varname
    (108) varname -> . NAME
    (109) varname -> . empty
    (110) varname -> . error
    (111) empty -> .

  ! shift/reduce conflict for error resolved as shift
    NAME            shift and go to state 91
    error           shift and go to state 90
    CLOSEPAR        reduce using rule 111 (empty -> .)

  ! error           [ reduce using rule 111 (empty -> .) ]

    varname                        shift and go to state 89
    empty                          shift and go to state 92

state 71

    (94) expression -> FNAME error .

    EOL             reduce using rule 94 (expression -> FNAME error .)
    error           reduce using rule 94 (expression -> FNAME error .)
    EXP             reduce using rule 94 (expression -> FNAME error .)
    MODULO          reduce using rule 94 (expression -> FNAME error .)
    MULTIPLY        reduce using rule 94 (expression -> FNAME error .)
    DIVIDE          reduce using rule 94 (expression -> FNAME error .)
    PLUS            reduce using rule 94 (expression -> FNAME error .)
    MINUS           reduce using rule 94 (expression -> FNAME error .)
    EQUALS          reduce using rule 94 (expression -> FNAME error .)
    CLOSEPAR        reduce using rule 94 (expression -> FNAME error .)
    EQ              reduce using rule 94 (expression -> FNAME error .)
    NEQ             reduce using rule 94 (expression -> FNAME error .)
    LSS             reduce using rule 94 (expression -> FNAME error .)
    GTR             reduce using rule 94 (expression -> FNAME error .)
    LEQ             reduce using rule 94 (expression -> FNAME error .)
    GEQ             reduce using rule 94 (expression -> FNAME error .)
    AND             reduce using rule 94 (expression -> FNAME error .)
    OR              reduce using rule 94 (expression -> FNAME error .)


state 72

    (70) while -> WHILE OPENPAR . bool CLOSEPAR block
    (47) bool -> . expression boolop expression
    (48) bool -> . bool boolop bool
    (49) bool -> . expression boolop bool
    (50) bool -> . bool boolop expression
    (51) bool -> . NOT bool
    (52) bool -> . OPENPAR bool CLOSEPAR
    (53) bool -> . expression error
    (54) bool -> . bool error
    (55) bool -> . expression boolop error
    (56) bool -> . bool boolop error
    (57) bool -> . NOT error
    (87) expression -> . expression oper expression
    (88) expression -> . OPENPAR expression CLOSEPAR
    (89) expression -> . expression oper error
    (90) expression -> . INT
    (91) expression -> . FLOAT
    (92) expression -> . NAME
    (93) expression -> . FNAME OPENPAR varname CLOSEPAR
    (94) expression -> . FNAME error
    (95) expression -> . FNAME OPENPAR varname error

    NOT             shift and go to state 96
    OPENPAR         shift and go to state 93
    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    NAME            shift and go to state 63
    FNAME           shift and go to state 35

    bool                           shift and go to state 94
    expression                     shift and go to state 95

state 73

    (71) while -> WHILE error .

    error           reduce using rule 71 (while -> WHILE error .)
    RETURN          reduce using rule 71 (while -> WHILE error .)
    NAME            reduce using rule 71 (while -> WHILE error .)
    INPUT           reduce using rule 71 (while -> WHILE error .)
    OUTPUT          reduce using rule 71 (while -> WHILE error .)
    OPENPAR         reduce using rule 71 (while -> WHILE error .)
    INT             reduce using rule 71 (while -> WHILE error .)
    FLOAT           reduce using rule 71 (while -> WHILE error .)
    FNAME           reduce using rule 71 (while -> WHILE error .)
    WHILE           reduce using rule 71 (while -> WHILE error .)
    IF              reduce using rule 71 (while -> WHILE error .)
    TYPEFLOAT       reduce using rule 71 (while -> WHILE error .)
    TYPEINT         reduce using rule 71 (while -> WHILE error .)
    CLOSECURL       reduce using rule 71 (while -> WHILE error .)
    BREAK           reduce using rule 71 (while -> WHILE error .)


state 74

    (66) if -> IF OPENPAR . bool CLOSEPAR block else
    (67) if -> IF OPENPAR . bool CLOSEPAR block
    (47) bool -> . expression boolop expression
    (48) bool -> . bool boolop bool
    (49) bool -> . expression boolop bool
    (50) bool -> . bool boolop expression
    (51) bool -> . NOT bool
    (52) bool -> . OPENPAR bool CLOSEPAR
    (53) bool -> . expression error
    (54) bool -> . bool error
    (55) bool -> . expression boolop error
    (56) bool -> . bool boolop error
    (57) bool -> . NOT error
    (87) expression -> . expression oper expression
    (88) expression -> . OPENPAR expression CLOSEPAR
    (89) expression -> . expression oper error
    (90) expression -> . INT
    (91) expression -> . FLOAT
    (92) expression -> . NAME
    (93) expression -> . FNAME OPENPAR varname CLOSEPAR
    (94) expression -> . FNAME error
    (95) expression -> . FNAME OPENPAR varname error

    NOT             shift and go to state 96
    OPENPAR         shift and go to state 93
    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    NAME            shift and go to state 63
    FNAME           shift and go to state 35

    bool                           shift and go to state 97
    expression                     shift and go to state 95

state 75

    (68) if -> IF error .

    error           reduce using rule 68 (if -> IF error .)
    RETURN          reduce using rule 68 (if -> IF error .)
    NAME            reduce using rule 68 (if -> IF error .)
    INPUT           reduce using rule 68 (if -> IF error .)
    OUTPUT          reduce using rule 68 (if -> IF error .)
    OPENPAR         reduce using rule 68 (if -> IF error .)
    INT             reduce using rule 68 (if -> IF error .)
    FLOAT           reduce using rule 68 (if -> IF error .)
    FNAME           reduce using rule 68 (if -> IF error .)
    WHILE           reduce using rule 68 (if -> IF error .)
    IF              reduce using rule 68 (if -> IF error .)
    TYPEFLOAT       reduce using rule 68 (if -> IF error .)
    TYPEINT         reduce using rule 68 (if -> IF error .)
    CLOSECURL       reduce using rule 68 (if -> IF error .)
    BREAK           reduce using rule 68 (if -> IF error .)


state 76

    (8) funcname -> datatype FNAME OPENPAR parameters CLOSEPAR .

    OPENCURL        reduce using rule 8 (funcname -> datatype FNAME OPENPAR parameters CLOSEPAR .)
    error           reduce using rule 8 (funcname -> datatype FNAME OPENPAR parameters CLOSEPAR .)


state 77

    (12) parameters -> vardeclare COMMA parameters .

    error           reduce using rule 12 (parameters -> vardeclare COMMA parameters .)
    CLOSEPAR        reduce using rule 12 (parameters -> vardeclare COMMA parameters .)


state 78

    (2) function -> function funcname OPENCURL code return EOL CLOSECURL .

    TYPEFLOAT       reduce using rule 2 (function -> function funcname OPENCURL code return EOL CLOSECURL .)
    TYPEINT         reduce using rule 2 (function -> function funcname OPENCURL code return EOL CLOSECURL .)
    $end            reduce using rule 2 (function -> function funcname OPENCURL code return EOL CLOSECURL .)


state 79

    (7) function -> function funcname OPENCURL code return EOL error .

    TYPEFLOAT       reduce using rule 7 (function -> function funcname OPENCURL code return EOL error .)
    TYPEINT         reduce using rule 7 (function -> function funcname OPENCURL code return EOL error .)
    $end            reduce using rule 7 (function -> function funcname OPENCURL code return EOL error .)


state 80

    (87) expression -> expression oper expression .
    (87) expression -> expression . oper expression
    (89) expression -> expression . oper error
    (96) oper -> . EXP
    (97) oper -> . MODULO
    (98) oper -> . MULTIPLY
    (99) oper -> . DIVIDE
    (100) oper -> . PLUS
    (101) oper -> . MINUS
    (102) oper -> . EQUALS

  ! shift/reduce conflict for EXP resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for EQUALS resolved as shift
    EOL             reduce using rule 87 (expression -> expression oper expression .)
    error           reduce using rule 87 (expression -> expression oper expression .)
    CLOSEPAR        reduce using rule 87 (expression -> expression oper expression .)
    EQ              reduce using rule 87 (expression -> expression oper expression .)
    NEQ             reduce using rule 87 (expression -> expression oper expression .)
    LSS             reduce using rule 87 (expression -> expression oper expression .)
    GTR             reduce using rule 87 (expression -> expression oper expression .)
    LEQ             reduce using rule 87 (expression -> expression oper expression .)
    GEQ             reduce using rule 87 (expression -> expression oper expression .)
    AND             reduce using rule 87 (expression -> expression oper expression .)
    OR              reduce using rule 87 (expression -> expression oper expression .)
    EXP             shift and go to state 54
    MODULO          shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EQUALS          shift and go to state 60

  ! EXP             [ reduce using rule 87 (expression -> expression oper expression .) ]
  ! MODULO          [ reduce using rule 87 (expression -> expression oper expression .) ]
  ! MULTIPLY        [ reduce using rule 87 (expression -> expression oper expression .) ]
  ! DIVIDE          [ reduce using rule 87 (expression -> expression oper expression .) ]
  ! PLUS            [ reduce using rule 87 (expression -> expression oper expression .) ]
  ! MINUS           [ reduce using rule 87 (expression -> expression oper expression .) ]
  ! EQUALS          [ reduce using rule 87 (expression -> expression oper expression .) ]

    oper                           shift and go to state 53

state 81

    (89) expression -> expression oper error .

    EOL             reduce using rule 89 (expression -> expression oper error .)
    error           reduce using rule 89 (expression -> expression oper error .)
    EXP             reduce using rule 89 (expression -> expression oper error .)
    MODULO          reduce using rule 89 (expression -> expression oper error .)
    MULTIPLY        reduce using rule 89 (expression -> expression oper error .)
    DIVIDE          reduce using rule 89 (expression -> expression oper error .)
    PLUS            reduce using rule 89 (expression -> expression oper error .)
    MINUS           reduce using rule 89 (expression -> expression oper error .)
    EQUALS          reduce using rule 89 (expression -> expression oper error .)
    CLOSEPAR        reduce using rule 89 (expression -> expression oper error .)
    EQ              reduce using rule 89 (expression -> expression oper error .)
    NEQ             reduce using rule 89 (expression -> expression oper error .)
    LSS             reduce using rule 89 (expression -> expression oper error .)
    GTR             reduce using rule 89 (expression -> expression oper error .)
    LEQ             reduce using rule 89 (expression -> expression oper error .)
    GEQ             reduce using rule 89 (expression -> expression oper error .)
    AND             reduce using rule 89 (expression -> expression oper error .)
    OR              reduce using rule 89 (expression -> expression oper error .)


state 82

    (105) varassign -> NAME EQUALS expression .
    (87) expression -> expression . oper expression
    (89) expression -> expression . oper error
    (96) oper -> . EXP
    (97) oper -> . MODULO
    (98) oper -> . MULTIPLY
    (99) oper -> . DIVIDE
    (100) oper -> . PLUS
    (101) oper -> . MINUS
    (102) oper -> . EQUALS

    EOL             reduce using rule 105 (varassign -> NAME EQUALS expression .)
    error           reduce using rule 105 (varassign -> NAME EQUALS expression .)
    EXP             shift and go to state 54
    MODULO          shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EQUALS          shift and go to state 60

    oper                           shift and go to state 53

state 83

    (106) varassign -> NAME EQUALS error .

    EOL             reduce using rule 106 (varassign -> NAME EQUALS error .)
    error           reduce using rule 106 (varassign -> NAME EQUALS error .)


state 84

    (29) io -> INPUT OPENPAR QUOTEMARK . percenttype QUOTEMARK COMMA AMP NAME CLOSEPAR
    (35) io -> INPUT OPENPAR QUOTEMARK . error
    (37) io -> INPUT OPENPAR QUOTEMARK . percenttype error
    (39) io -> INPUT OPENPAR QUOTEMARK . percenttype QUOTEMARK error
    (41) io -> INPUT OPENPAR QUOTEMARK . percenttype QUOTEMARK COMMA error
    (43) percenttype -> . PERCENTFLOAT
    (44) percenttype -> . PERCENTINT

    error           shift and go to state 99
    PERCENTFLOAT    shift and go to state 100
    PERCENTINT      shift and go to state 101

    percenttype                    shift and go to state 98

state 85

    (33) io -> INPUT OPENPAR error .

    EOL             reduce using rule 33 (io -> INPUT OPENPAR error .)
    error           reduce using rule 33 (io -> INPUT OPENPAR error .)


state 86

    (88) expression -> OPENPAR expression CLOSEPAR .

    EOL             reduce using rule 88 (expression -> OPENPAR expression CLOSEPAR .)
    error           reduce using rule 88 (expression -> OPENPAR expression CLOSEPAR .)
    EXP             reduce using rule 88 (expression -> OPENPAR expression CLOSEPAR .)
    MODULO          reduce using rule 88 (expression -> OPENPAR expression CLOSEPAR .)
    MULTIPLY        reduce using rule 88 (expression -> OPENPAR expression CLOSEPAR .)
    DIVIDE          reduce using rule 88 (expression -> OPENPAR expression CLOSEPAR .)
    PLUS            reduce using rule 88 (expression -> OPENPAR expression CLOSEPAR .)
    MINUS           reduce using rule 88 (expression -> OPENPAR expression CLOSEPAR .)
    EQUALS          reduce using rule 88 (expression -> OPENPAR expression CLOSEPAR .)
    CLOSEPAR        reduce using rule 88 (expression -> OPENPAR expression CLOSEPAR .)
    EQ              reduce using rule 88 (expression -> OPENPAR expression CLOSEPAR .)
    NEQ             reduce using rule 88 (expression -> OPENPAR expression CLOSEPAR .)
    LSS             reduce using rule 88 (expression -> OPENPAR expression CLOSEPAR .)
    GTR             reduce using rule 88 (expression -> OPENPAR expression CLOSEPAR .)
    LEQ             reduce using rule 88 (expression -> OPENPAR expression CLOSEPAR .)
    GEQ             reduce using rule 88 (expression -> OPENPAR expression CLOSEPAR .)
    AND             reduce using rule 88 (expression -> OPENPAR expression CLOSEPAR .)
    OR              reduce using rule 88 (expression -> OPENPAR expression CLOSEPAR .)


state 87

    (30) io -> OUTPUT OPENPAR QUOTEMARK . percenttype QUOTEMARK COMMA NAME CLOSEPAR
    (36) io -> OUTPUT OPENPAR QUOTEMARK . error
    (38) io -> OUTPUT OPENPAR QUOTEMARK . percenttype error
    (40) io -> OUTPUT OPENPAR QUOTEMARK . percenttype QUOTEMARK error
    (42) io -> OUTPUT OPENPAR QUOTEMARK . percenttype QUOTEMARK COMMA error
    (43) percenttype -> . PERCENTFLOAT
    (44) percenttype -> . PERCENTINT

    error           shift and go to state 103
    PERCENTFLOAT    shift and go to state 100
    PERCENTINT      shift and go to state 101

    percenttype                    shift and go to state 102

state 88

    (34) io -> OUTPUT OPENPAR error .

    EOL             reduce using rule 34 (io -> OUTPUT OPENPAR error .)
    error           reduce using rule 34 (io -> OUTPUT OPENPAR error .)


state 89

    (93) expression -> FNAME OPENPAR varname . CLOSEPAR
    (95) expression -> FNAME OPENPAR varname . error

    CLOSEPAR        shift and go to state 104
    error           shift and go to state 105


state 90

    (110) varname -> error .

    CLOSEPAR        reduce using rule 110 (varname -> error .)
    error           reduce using rule 110 (varname -> error .)


state 91

    (107) varname -> NAME . COMMA varname
    (108) varname -> NAME .

    COMMA           shift and go to state 106
    CLOSEPAR        reduce using rule 108 (varname -> NAME .)
    error           reduce using rule 108 (varname -> NAME .)


state 92

    (109) varname -> empty .

    CLOSEPAR        reduce using rule 109 (varname -> empty .)
    error           reduce using rule 109 (varname -> empty .)


state 93

    (52) bool -> OPENPAR . bool CLOSEPAR
    (88) expression -> OPENPAR . expression CLOSEPAR
    (47) bool -> . expression boolop expression
    (48) bool -> . bool boolop bool
    (49) bool -> . expression boolop bool
    (50) bool -> . bool boolop expression
    (51) bool -> . NOT bool
    (52) bool -> . OPENPAR bool CLOSEPAR
    (53) bool -> . expression error
    (54) bool -> . bool error
    (55) bool -> . expression boolop error
    (56) bool -> . bool boolop error
    (57) bool -> . NOT error
    (87) expression -> . expression oper expression
    (88) expression -> . OPENPAR expression CLOSEPAR
    (89) expression -> . expression oper error
    (90) expression -> . INT
    (91) expression -> . FLOAT
    (92) expression -> . NAME
    (93) expression -> . FNAME OPENPAR varname CLOSEPAR
    (94) expression -> . FNAME error
    (95) expression -> . FNAME OPENPAR varname error

    NOT             shift and go to state 96
    OPENPAR         shift and go to state 93
    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    NAME            shift and go to state 63
    FNAME           shift and go to state 35

    bool                           shift and go to state 107
    expression                     shift and go to state 108

state 94

    (70) while -> WHILE OPENPAR bool . CLOSEPAR block
    (48) bool -> bool . boolop bool
    (50) bool -> bool . boolop expression
    (54) bool -> bool . error
    (56) bool -> bool . boolop error
    (58) boolop -> . EQ
    (59) boolop -> . NEQ
    (60) boolop -> . LSS
    (61) boolop -> . GTR
    (62) boolop -> . LEQ
    (63) boolop -> . GEQ
    (64) boolop -> . AND
    (65) boolop -> . OR

    CLOSEPAR        shift and go to state 109
    error           shift and go to state 111
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LSS             shift and go to state 114
    GTR             shift and go to state 115
    LEQ             shift and go to state 116
    GEQ             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119

    boolop                         shift and go to state 110

state 95

    (47) bool -> expression . boolop expression
    (49) bool -> expression . boolop bool
    (53) bool -> expression . error
    (55) bool -> expression . boolop error
    (87) expression -> expression . oper expression
    (89) expression -> expression . oper error
    (58) boolop -> . EQ
    (59) boolop -> . NEQ
    (60) boolop -> . LSS
    (61) boolop -> . GTR
    (62) boolop -> . LEQ
    (63) boolop -> . GEQ
    (64) boolop -> . AND
    (65) boolop -> . OR
    (96) oper -> . EXP
    (97) oper -> . MODULO
    (98) oper -> . MULTIPLY
    (99) oper -> . DIVIDE
    (100) oper -> . PLUS
    (101) oper -> . MINUS
    (102) oper -> . EQUALS

    error           shift and go to state 121
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LSS             shift and go to state 114
    GTR             shift and go to state 115
    LEQ             shift and go to state 116
    GEQ             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119
    EXP             shift and go to state 54
    MODULO          shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EQUALS          shift and go to state 60

    boolop                         shift and go to state 120
    oper                           shift and go to state 53

state 96

    (51) bool -> NOT . bool
    (57) bool -> NOT . error
    (47) bool -> . expression boolop expression
    (48) bool -> . bool boolop bool
    (49) bool -> . expression boolop bool
    (50) bool -> . bool boolop expression
    (51) bool -> . NOT bool
    (52) bool -> . OPENPAR bool CLOSEPAR
    (53) bool -> . expression error
    (54) bool -> . bool error
    (55) bool -> . expression boolop error
    (56) bool -> . bool boolop error
    (57) bool -> . NOT error
    (87) expression -> . expression oper expression
    (88) expression -> . OPENPAR expression CLOSEPAR
    (89) expression -> . expression oper error
    (90) expression -> . INT
    (91) expression -> . FLOAT
    (92) expression -> . NAME
    (93) expression -> . FNAME OPENPAR varname CLOSEPAR
    (94) expression -> . FNAME error
    (95) expression -> . FNAME OPENPAR varname error

    error           shift and go to state 123
    NOT             shift and go to state 96
    OPENPAR         shift and go to state 93
    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    NAME            shift and go to state 63
    FNAME           shift and go to state 35

    bool                           shift and go to state 122
    expression                     shift and go to state 95

state 97

    (66) if -> IF OPENPAR bool . CLOSEPAR block else
    (67) if -> IF OPENPAR bool . CLOSEPAR block
    (48) bool -> bool . boolop bool
    (50) bool -> bool . boolop expression
    (54) bool -> bool . error
    (56) bool -> bool . boolop error
    (58) boolop -> . EQ
    (59) boolop -> . NEQ
    (60) boolop -> . LSS
    (61) boolop -> . GTR
    (62) boolop -> . LEQ
    (63) boolop -> . GEQ
    (64) boolop -> . AND
    (65) boolop -> . OR

    CLOSEPAR        shift and go to state 124
    error           shift and go to state 111
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LSS             shift and go to state 114
    GTR             shift and go to state 115
    LEQ             shift and go to state 116
    GEQ             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119

    boolop                         shift and go to state 110

state 98

    (29) io -> INPUT OPENPAR QUOTEMARK percenttype . QUOTEMARK COMMA AMP NAME CLOSEPAR
    (37) io -> INPUT OPENPAR QUOTEMARK percenttype . error
    (39) io -> INPUT OPENPAR QUOTEMARK percenttype . QUOTEMARK error
    (41) io -> INPUT OPENPAR QUOTEMARK percenttype . QUOTEMARK COMMA error

    QUOTEMARK       shift and go to state 125
    error           shift and go to state 126


state 99

    (35) io -> INPUT OPENPAR QUOTEMARK error .

    EOL             reduce using rule 35 (io -> INPUT OPENPAR QUOTEMARK error .)
    error           reduce using rule 35 (io -> INPUT OPENPAR QUOTEMARK error .)


state 100

    (43) percenttype -> PERCENTFLOAT .

    QUOTEMARK       reduce using rule 43 (percenttype -> PERCENTFLOAT .)
    error           reduce using rule 43 (percenttype -> PERCENTFLOAT .)


state 101

    (44) percenttype -> PERCENTINT .

    QUOTEMARK       reduce using rule 44 (percenttype -> PERCENTINT .)
    error           reduce using rule 44 (percenttype -> PERCENTINT .)


state 102

    (30) io -> OUTPUT OPENPAR QUOTEMARK percenttype . QUOTEMARK COMMA NAME CLOSEPAR
    (38) io -> OUTPUT OPENPAR QUOTEMARK percenttype . error
    (40) io -> OUTPUT OPENPAR QUOTEMARK percenttype . QUOTEMARK error
    (42) io -> OUTPUT OPENPAR QUOTEMARK percenttype . QUOTEMARK COMMA error

    QUOTEMARK       shift and go to state 127
    error           shift and go to state 128


state 103

    (36) io -> OUTPUT OPENPAR QUOTEMARK error .

    EOL             reduce using rule 36 (io -> OUTPUT OPENPAR QUOTEMARK error .)
    error           reduce using rule 36 (io -> OUTPUT OPENPAR QUOTEMARK error .)


state 104

    (93) expression -> FNAME OPENPAR varname CLOSEPAR .

    EOL             reduce using rule 93 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    error           reduce using rule 93 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    EXP             reduce using rule 93 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    MODULO          reduce using rule 93 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    MULTIPLY        reduce using rule 93 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    DIVIDE          reduce using rule 93 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    PLUS            reduce using rule 93 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    MINUS           reduce using rule 93 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    EQUALS          reduce using rule 93 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    CLOSEPAR        reduce using rule 93 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    EQ              reduce using rule 93 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    NEQ             reduce using rule 93 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    LSS             reduce using rule 93 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    GTR             reduce using rule 93 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    LEQ             reduce using rule 93 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    GEQ             reduce using rule 93 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    AND             reduce using rule 93 (expression -> FNAME OPENPAR varname CLOSEPAR .)
    OR              reduce using rule 93 (expression -> FNAME OPENPAR varname CLOSEPAR .)


state 105

    (95) expression -> FNAME OPENPAR varname error .

    EOL             reduce using rule 95 (expression -> FNAME OPENPAR varname error .)
    error           reduce using rule 95 (expression -> FNAME OPENPAR varname error .)
    EXP             reduce using rule 95 (expression -> FNAME OPENPAR varname error .)
    MODULO          reduce using rule 95 (expression -> FNAME OPENPAR varname error .)
    MULTIPLY        reduce using rule 95 (expression -> FNAME OPENPAR varname error .)
    DIVIDE          reduce using rule 95 (expression -> FNAME OPENPAR varname error .)
    PLUS            reduce using rule 95 (expression -> FNAME OPENPAR varname error .)
    MINUS           reduce using rule 95 (expression -> FNAME OPENPAR varname error .)
    EQUALS          reduce using rule 95 (expression -> FNAME OPENPAR varname error .)
    CLOSEPAR        reduce using rule 95 (expression -> FNAME OPENPAR varname error .)
    EQ              reduce using rule 95 (expression -> FNAME OPENPAR varname error .)
    NEQ             reduce using rule 95 (expression -> FNAME OPENPAR varname error .)
    LSS             reduce using rule 95 (expression -> FNAME OPENPAR varname error .)
    GTR             reduce using rule 95 (expression -> FNAME OPENPAR varname error .)
    LEQ             reduce using rule 95 (expression -> FNAME OPENPAR varname error .)
    GEQ             reduce using rule 95 (expression -> FNAME OPENPAR varname error .)
    AND             reduce using rule 95 (expression -> FNAME OPENPAR varname error .)
    OR              reduce using rule 95 (expression -> FNAME OPENPAR varname error .)


state 106

    (107) varname -> NAME COMMA . varname
    (107) varname -> . NAME COMMA varname
    (108) varname -> . NAME
    (109) varname -> . empty
    (110) varname -> . error
    (111) empty -> .

  ! shift/reduce conflict for error resolved as shift
    NAME            shift and go to state 91
    error           shift and go to state 90
    CLOSEPAR        reduce using rule 111 (empty -> .)

  ! error           [ reduce using rule 111 (empty -> .) ]

    varname                        shift and go to state 129
    empty                          shift and go to state 92

state 107

    (52) bool -> OPENPAR bool . CLOSEPAR
    (48) bool -> bool . boolop bool
    (50) bool -> bool . boolop expression
    (54) bool -> bool . error
    (56) bool -> bool . boolop error
    (58) boolop -> . EQ
    (59) boolop -> . NEQ
    (60) boolop -> . LSS
    (61) boolop -> . GTR
    (62) boolop -> . LEQ
    (63) boolop -> . GEQ
    (64) boolop -> . AND
    (65) boolop -> . OR

    CLOSEPAR        shift and go to state 130
    error           shift and go to state 111
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LSS             shift and go to state 114
    GTR             shift and go to state 115
    LEQ             shift and go to state 116
    GEQ             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119

    boolop                         shift and go to state 110

state 108

    (88) expression -> OPENPAR expression . CLOSEPAR
    (47) bool -> expression . boolop expression
    (49) bool -> expression . boolop bool
    (53) bool -> expression . error
    (55) bool -> expression . boolop error
    (87) expression -> expression . oper expression
    (89) expression -> expression . oper error
    (58) boolop -> . EQ
    (59) boolop -> . NEQ
    (60) boolop -> . LSS
    (61) boolop -> . GTR
    (62) boolop -> . LEQ
    (63) boolop -> . GEQ
    (64) boolop -> . AND
    (65) boolop -> . OR
    (96) oper -> . EXP
    (97) oper -> . MODULO
    (98) oper -> . MULTIPLY
    (99) oper -> . DIVIDE
    (100) oper -> . PLUS
    (101) oper -> . MINUS
    (102) oper -> . EQUALS

    CLOSEPAR        shift and go to state 86
    error           shift and go to state 121
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LSS             shift and go to state 114
    GTR             shift and go to state 115
    LEQ             shift and go to state 116
    GEQ             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119
    EXP             shift and go to state 54
    MODULO          shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EQUALS          shift and go to state 60

    boolop                         shift and go to state 120
    oper                           shift and go to state 53

state 109

    (70) while -> WHILE OPENPAR bool CLOSEPAR . block
    (72) block -> . OPENCURL bcode CLOSECURL
    (73) block -> . error

    OPENCURL        shift and go to state 132
    error           shift and go to state 133

    block                          shift and go to state 131

state 110

    (48) bool -> bool boolop . bool
    (50) bool -> bool boolop . expression
    (56) bool -> bool boolop . error
    (47) bool -> . expression boolop expression
    (48) bool -> . bool boolop bool
    (49) bool -> . expression boolop bool
    (50) bool -> . bool boolop expression
    (51) bool -> . NOT bool
    (52) bool -> . OPENPAR bool CLOSEPAR
    (53) bool -> . expression error
    (54) bool -> . bool error
    (55) bool -> . expression boolop error
    (56) bool -> . bool boolop error
    (57) bool -> . NOT error
    (87) expression -> . expression oper expression
    (88) expression -> . OPENPAR expression CLOSEPAR
    (89) expression -> . expression oper error
    (90) expression -> . INT
    (91) expression -> . FLOAT
    (92) expression -> . NAME
    (93) expression -> . FNAME OPENPAR varname CLOSEPAR
    (94) expression -> . FNAME error
    (95) expression -> . FNAME OPENPAR varname error

    error           shift and go to state 136
    NOT             shift and go to state 96
    OPENPAR         shift and go to state 93
    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    NAME            shift and go to state 63
    FNAME           shift and go to state 35

    bool                           shift and go to state 134
    expression                     shift and go to state 135

state 111

    (54) bool -> bool error .

    CLOSEPAR        reduce using rule 54 (bool -> bool error .)
    error           reduce using rule 54 (bool -> bool error .)
    EQ              reduce using rule 54 (bool -> bool error .)
    NEQ             reduce using rule 54 (bool -> bool error .)
    LSS             reduce using rule 54 (bool -> bool error .)
    GTR             reduce using rule 54 (bool -> bool error .)
    LEQ             reduce using rule 54 (bool -> bool error .)
    GEQ             reduce using rule 54 (bool -> bool error .)
    AND             reduce using rule 54 (bool -> bool error .)
    OR              reduce using rule 54 (bool -> bool error .)


state 112

    (58) boolop -> EQ .

    error           reduce using rule 58 (boolop -> EQ .)
    NOT             reduce using rule 58 (boolop -> EQ .)
    OPENPAR         reduce using rule 58 (boolop -> EQ .)
    INT             reduce using rule 58 (boolop -> EQ .)
    FLOAT           reduce using rule 58 (boolop -> EQ .)
    NAME            reduce using rule 58 (boolop -> EQ .)
    FNAME           reduce using rule 58 (boolop -> EQ .)


state 113

    (59) boolop -> NEQ .

    error           reduce using rule 59 (boolop -> NEQ .)
    NOT             reduce using rule 59 (boolop -> NEQ .)
    OPENPAR         reduce using rule 59 (boolop -> NEQ .)
    INT             reduce using rule 59 (boolop -> NEQ .)
    FLOAT           reduce using rule 59 (boolop -> NEQ .)
    NAME            reduce using rule 59 (boolop -> NEQ .)
    FNAME           reduce using rule 59 (boolop -> NEQ .)


state 114

    (60) boolop -> LSS .

    error           reduce using rule 60 (boolop -> LSS .)
    NOT             reduce using rule 60 (boolop -> LSS .)
    OPENPAR         reduce using rule 60 (boolop -> LSS .)
    INT             reduce using rule 60 (boolop -> LSS .)
    FLOAT           reduce using rule 60 (boolop -> LSS .)
    NAME            reduce using rule 60 (boolop -> LSS .)
    FNAME           reduce using rule 60 (boolop -> LSS .)


state 115

    (61) boolop -> GTR .

    error           reduce using rule 61 (boolop -> GTR .)
    NOT             reduce using rule 61 (boolop -> GTR .)
    OPENPAR         reduce using rule 61 (boolop -> GTR .)
    INT             reduce using rule 61 (boolop -> GTR .)
    FLOAT           reduce using rule 61 (boolop -> GTR .)
    NAME            reduce using rule 61 (boolop -> GTR .)
    FNAME           reduce using rule 61 (boolop -> GTR .)


state 116

    (62) boolop -> LEQ .

    error           reduce using rule 62 (boolop -> LEQ .)
    NOT             reduce using rule 62 (boolop -> LEQ .)
    OPENPAR         reduce using rule 62 (boolop -> LEQ .)
    INT             reduce using rule 62 (boolop -> LEQ .)
    FLOAT           reduce using rule 62 (boolop -> LEQ .)
    NAME            reduce using rule 62 (boolop -> LEQ .)
    FNAME           reduce using rule 62 (boolop -> LEQ .)


state 117

    (63) boolop -> GEQ .

    error           reduce using rule 63 (boolop -> GEQ .)
    NOT             reduce using rule 63 (boolop -> GEQ .)
    OPENPAR         reduce using rule 63 (boolop -> GEQ .)
    INT             reduce using rule 63 (boolop -> GEQ .)
    FLOAT           reduce using rule 63 (boolop -> GEQ .)
    NAME            reduce using rule 63 (boolop -> GEQ .)
    FNAME           reduce using rule 63 (boolop -> GEQ .)


state 118

    (64) boolop -> AND .

    error           reduce using rule 64 (boolop -> AND .)
    NOT             reduce using rule 64 (boolop -> AND .)
    OPENPAR         reduce using rule 64 (boolop -> AND .)
    INT             reduce using rule 64 (boolop -> AND .)
    FLOAT           reduce using rule 64 (boolop -> AND .)
    NAME            reduce using rule 64 (boolop -> AND .)
    FNAME           reduce using rule 64 (boolop -> AND .)


state 119

    (65) boolop -> OR .

    error           reduce using rule 65 (boolop -> OR .)
    NOT             reduce using rule 65 (boolop -> OR .)
    OPENPAR         reduce using rule 65 (boolop -> OR .)
    INT             reduce using rule 65 (boolop -> OR .)
    FLOAT           reduce using rule 65 (boolop -> OR .)
    NAME            reduce using rule 65 (boolop -> OR .)
    FNAME           reduce using rule 65 (boolop -> OR .)


state 120

    (47) bool -> expression boolop . expression
    (49) bool -> expression boolop . bool
    (55) bool -> expression boolop . error
    (87) expression -> . expression oper expression
    (88) expression -> . OPENPAR expression CLOSEPAR
    (89) expression -> . expression oper error
    (90) expression -> . INT
    (91) expression -> . FLOAT
    (92) expression -> . NAME
    (93) expression -> . FNAME OPENPAR varname CLOSEPAR
    (94) expression -> . FNAME error
    (95) expression -> . FNAME OPENPAR varname error
    (47) bool -> . expression boolop expression
    (48) bool -> . bool boolop bool
    (49) bool -> . expression boolop bool
    (50) bool -> . bool boolop expression
    (51) bool -> . NOT bool
    (52) bool -> . OPENPAR bool CLOSEPAR
    (53) bool -> . expression error
    (54) bool -> . bool error
    (55) bool -> . expression boolop error
    (56) bool -> . bool boolop error
    (57) bool -> . NOT error

    error           shift and go to state 139
    OPENPAR         shift and go to state 140
    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    NAME            shift and go to state 63
    FNAME           shift and go to state 35
    NOT             shift and go to state 96

    expression                     shift and go to state 137
    bool                           shift and go to state 138

state 121

    (53) bool -> expression error .

    CLOSEPAR        reduce using rule 53 (bool -> expression error .)
    error           reduce using rule 53 (bool -> expression error .)
    EQ              reduce using rule 53 (bool -> expression error .)
    NEQ             reduce using rule 53 (bool -> expression error .)
    LSS             reduce using rule 53 (bool -> expression error .)
    GTR             reduce using rule 53 (bool -> expression error .)
    LEQ             reduce using rule 53 (bool -> expression error .)
    GEQ             reduce using rule 53 (bool -> expression error .)
    AND             reduce using rule 53 (bool -> expression error .)
    OR              reduce using rule 53 (bool -> expression error .)


state 122

    (51) bool -> NOT bool .
    (48) bool -> bool . boolop bool
    (50) bool -> bool . boolop expression
    (54) bool -> bool . error
    (56) bool -> bool . boolop error
    (58) boolop -> . EQ
    (59) boolop -> . NEQ
    (60) boolop -> . LSS
    (61) boolop -> . GTR
    (62) boolop -> . LEQ
    (63) boolop -> . GEQ
    (64) boolop -> . AND
    (65) boolop -> . OR

    CLOSEPAR        reduce using rule 51 (bool -> NOT bool .)
    error           reduce using rule 51 (bool -> NOT bool .)
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LSS             shift and go to state 114
    GTR             shift and go to state 115
    LEQ             shift and go to state 116
    GEQ             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119

  ! EQ              [ reduce using rule 51 (bool -> NOT bool .) ]
  ! NEQ             [ reduce using rule 51 (bool -> NOT bool .) ]
  ! LSS             [ reduce using rule 51 (bool -> NOT bool .) ]
  ! GTR             [ reduce using rule 51 (bool -> NOT bool .) ]
  ! LEQ             [ reduce using rule 51 (bool -> NOT bool .) ]
  ! GEQ             [ reduce using rule 51 (bool -> NOT bool .) ]
  ! AND             [ reduce using rule 51 (bool -> NOT bool .) ]
  ! OR              [ reduce using rule 51 (bool -> NOT bool .) ]
  ! error           [ shift and go to state 111 ]

    boolop                         shift and go to state 110

state 123

    (57) bool -> NOT error .

    CLOSEPAR        reduce using rule 57 (bool -> NOT error .)
    error           reduce using rule 57 (bool -> NOT error .)
    EQ              reduce using rule 57 (bool -> NOT error .)
    NEQ             reduce using rule 57 (bool -> NOT error .)
    LSS             reduce using rule 57 (bool -> NOT error .)
    GTR             reduce using rule 57 (bool -> NOT error .)
    LEQ             reduce using rule 57 (bool -> NOT error .)
    GEQ             reduce using rule 57 (bool -> NOT error .)
    AND             reduce using rule 57 (bool -> NOT error .)
    OR              reduce using rule 57 (bool -> NOT error .)


state 124

    (66) if -> IF OPENPAR bool CLOSEPAR . block else
    (67) if -> IF OPENPAR bool CLOSEPAR . block
    (72) block -> . OPENCURL bcode CLOSECURL
    (73) block -> . error

    OPENCURL        shift and go to state 132
    error           shift and go to state 133

    block                          shift and go to state 141

state 125

    (29) io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK . COMMA AMP NAME CLOSEPAR
    (39) io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK . error
    (41) io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK . COMMA error

    COMMA           shift and go to state 142
    error           shift and go to state 143


state 126

    (37) io -> INPUT OPENPAR QUOTEMARK percenttype error .

    EOL             reduce using rule 37 (io -> INPUT OPENPAR QUOTEMARK percenttype error .)
    error           reduce using rule 37 (io -> INPUT OPENPAR QUOTEMARK percenttype error .)


state 127

    (30) io -> OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK . COMMA NAME CLOSEPAR
    (40) io -> OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK . error
    (42) io -> OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK . COMMA error

    COMMA           shift and go to state 144
    error           shift and go to state 145


state 128

    (38) io -> OUTPUT OPENPAR QUOTEMARK percenttype error .

    EOL             reduce using rule 38 (io -> OUTPUT OPENPAR QUOTEMARK percenttype error .)
    error           reduce using rule 38 (io -> OUTPUT OPENPAR QUOTEMARK percenttype error .)


state 129

    (107) varname -> NAME COMMA varname .

    CLOSEPAR        reduce using rule 107 (varname -> NAME COMMA varname .)
    error           reduce using rule 107 (varname -> NAME COMMA varname .)


state 130

    (52) bool -> OPENPAR bool CLOSEPAR .

    CLOSEPAR        reduce using rule 52 (bool -> OPENPAR bool CLOSEPAR .)
    error           reduce using rule 52 (bool -> OPENPAR bool CLOSEPAR .)
    EQ              reduce using rule 52 (bool -> OPENPAR bool CLOSEPAR .)
    NEQ             reduce using rule 52 (bool -> OPENPAR bool CLOSEPAR .)
    LSS             reduce using rule 52 (bool -> OPENPAR bool CLOSEPAR .)
    GTR             reduce using rule 52 (bool -> OPENPAR bool CLOSEPAR .)
    LEQ             reduce using rule 52 (bool -> OPENPAR bool CLOSEPAR .)
    GEQ             reduce using rule 52 (bool -> OPENPAR bool CLOSEPAR .)
    AND             reduce using rule 52 (bool -> OPENPAR bool CLOSEPAR .)
    OR              reduce using rule 52 (bool -> OPENPAR bool CLOSEPAR .)


state 131

    (70) while -> WHILE OPENPAR bool CLOSEPAR block .

    error           reduce using rule 70 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    RETURN          reduce using rule 70 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    NAME            reduce using rule 70 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    INPUT           reduce using rule 70 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    OUTPUT          reduce using rule 70 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    OPENPAR         reduce using rule 70 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    INT             reduce using rule 70 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    FLOAT           reduce using rule 70 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    FNAME           reduce using rule 70 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    WHILE           reduce using rule 70 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    IF              reduce using rule 70 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    TYPEFLOAT       reduce using rule 70 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    TYPEINT         reduce using rule 70 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    CLOSECURL       reduce using rule 70 (while -> WHILE OPENPAR bool CLOSEPAR block .)
    BREAK           reduce using rule 70 (while -> WHILE OPENPAR bool CLOSEPAR block .)


state 132

    (72) block -> OPENCURL . bcode CLOSECURL
    (74) bcode -> . bcode io EOL
    (75) bcode -> . bcode varassign EOL
    (76) bcode -> . bcode while
    (77) bcode -> . bcode if
    (78) bcode -> . bcode expression EOL
    (79) bcode -> . bcode BREAK EOL
    (80) bcode -> . bcode return EOL
    (81) bcode -> . empty
    (82) bcode -> . bcode BREAK error
    (83) bcode -> . bcode varassign error
    (84) bcode -> . bcode io error
    (85) bcode -> . bcode expression error
    (86) bcode -> . bcode return error
    (111) empty -> .

    CLOSECURL       reduce using rule 111 (empty -> .)
    BREAK           reduce using rule 111 (empty -> .)
    INPUT           reduce using rule 111 (empty -> .)
    OUTPUT          reduce using rule 111 (empty -> .)
    NAME            reduce using rule 111 (empty -> .)
    WHILE           reduce using rule 111 (empty -> .)
    IF              reduce using rule 111 (empty -> .)
    OPENPAR         reduce using rule 111 (empty -> .)
    INT             reduce using rule 111 (empty -> .)
    FLOAT           reduce using rule 111 (empty -> .)
    FNAME           reduce using rule 111 (empty -> .)
    RETURN          reduce using rule 111 (empty -> .)

    bcode                          shift and go to state 146
    empty                          shift and go to state 147

state 133

    (73) block -> error .

    error           reduce using rule 73 (block -> error .)
    RETURN          reduce using rule 73 (block -> error .)
    NAME            reduce using rule 73 (block -> error .)
    INPUT           reduce using rule 73 (block -> error .)
    OUTPUT          reduce using rule 73 (block -> error .)
    OPENPAR         reduce using rule 73 (block -> error .)
    INT             reduce using rule 73 (block -> error .)
    FLOAT           reduce using rule 73 (block -> error .)
    FNAME           reduce using rule 73 (block -> error .)
    WHILE           reduce using rule 73 (block -> error .)
    IF              reduce using rule 73 (block -> error .)
    TYPEFLOAT       reduce using rule 73 (block -> error .)
    TYPEINT         reduce using rule 73 (block -> error .)
    CLOSECURL       reduce using rule 73 (block -> error .)
    BREAK           reduce using rule 73 (block -> error .)
    ELSE            reduce using rule 73 (block -> error .)


state 134

    (48) bool -> bool boolop bool .
    (48) bool -> bool . boolop bool
    (50) bool -> bool . boolop expression
    (54) bool -> bool . error
    (56) bool -> bool . boolop error
    (58) boolop -> . EQ
    (59) boolop -> . NEQ
    (60) boolop -> . LSS
    (61) boolop -> . GTR
    (62) boolop -> . LEQ
    (63) boolop -> . GEQ
    (64) boolop -> . AND
    (65) boolop -> . OR

  ! shift/reduce conflict for error resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LSS resolved as shift
  ! shift/reduce conflict for GTR resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSEPAR        reduce using rule 48 (bool -> bool boolop bool .)
    error           shift and go to state 111
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LSS             shift and go to state 114
    GTR             shift and go to state 115
    LEQ             shift and go to state 116
    GEQ             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119

  ! error           [ reduce using rule 48 (bool -> bool boolop bool .) ]
  ! EQ              [ reduce using rule 48 (bool -> bool boolop bool .) ]
  ! NEQ             [ reduce using rule 48 (bool -> bool boolop bool .) ]
  ! LSS             [ reduce using rule 48 (bool -> bool boolop bool .) ]
  ! GTR             [ reduce using rule 48 (bool -> bool boolop bool .) ]
  ! LEQ             [ reduce using rule 48 (bool -> bool boolop bool .) ]
  ! GEQ             [ reduce using rule 48 (bool -> bool boolop bool .) ]
  ! AND             [ reduce using rule 48 (bool -> bool boolop bool .) ]
  ! OR              [ reduce using rule 48 (bool -> bool boolop bool .) ]

    boolop                         shift and go to state 110

state 135

    (50) bool -> bool boolop expression .
    (47) bool -> expression . boolop expression
    (49) bool -> expression . boolop bool
    (53) bool -> expression . error
    (55) bool -> expression . boolop error
    (87) expression -> expression . oper expression
    (89) expression -> expression . oper error
    (58) boolop -> . EQ
    (59) boolop -> . NEQ
    (60) boolop -> . LSS
    (61) boolop -> . GTR
    (62) boolop -> . LEQ
    (63) boolop -> . GEQ
    (64) boolop -> . AND
    (65) boolop -> . OR
    (96) oper -> . EXP
    (97) oper -> . MODULO
    (98) oper -> . MULTIPLY
    (99) oper -> . DIVIDE
    (100) oper -> . PLUS
    (101) oper -> . MINUS
    (102) oper -> . EQUALS

  ! shift/reduce conflict for error resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LSS resolved as shift
  ! shift/reduce conflict for GTR resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSEPAR        reduce using rule 50 (bool -> bool boolop expression .)
    error           shift and go to state 121
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LSS             shift and go to state 114
    GTR             shift and go to state 115
    LEQ             shift and go to state 116
    GEQ             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119
    EXP             shift and go to state 54
    MODULO          shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EQUALS          shift and go to state 60

  ! error           [ reduce using rule 50 (bool -> bool boolop expression .) ]
  ! EQ              [ reduce using rule 50 (bool -> bool boolop expression .) ]
  ! NEQ             [ reduce using rule 50 (bool -> bool boolop expression .) ]
  ! LSS             [ reduce using rule 50 (bool -> bool boolop expression .) ]
  ! GTR             [ reduce using rule 50 (bool -> bool boolop expression .) ]
  ! LEQ             [ reduce using rule 50 (bool -> bool boolop expression .) ]
  ! GEQ             [ reduce using rule 50 (bool -> bool boolop expression .) ]
  ! AND             [ reduce using rule 50 (bool -> bool boolop expression .) ]
  ! OR              [ reduce using rule 50 (bool -> bool boolop expression .) ]

    boolop                         shift and go to state 120
    oper                           shift and go to state 53

state 136

    (56) bool -> bool boolop error .

    CLOSEPAR        reduce using rule 56 (bool -> bool boolop error .)
    error           reduce using rule 56 (bool -> bool boolop error .)
    EQ              reduce using rule 56 (bool -> bool boolop error .)
    NEQ             reduce using rule 56 (bool -> bool boolop error .)
    LSS             reduce using rule 56 (bool -> bool boolop error .)
    GTR             reduce using rule 56 (bool -> bool boolop error .)
    LEQ             reduce using rule 56 (bool -> bool boolop error .)
    GEQ             reduce using rule 56 (bool -> bool boolop error .)
    AND             reduce using rule 56 (bool -> bool boolop error .)
    OR              reduce using rule 56 (bool -> bool boolop error .)


state 137

    (47) bool -> expression boolop expression .
    (87) expression -> expression . oper expression
    (89) expression -> expression . oper error
    (47) bool -> expression . boolop expression
    (49) bool -> expression . boolop bool
    (53) bool -> expression . error
    (55) bool -> expression . boolop error
    (96) oper -> . EXP
    (97) oper -> . MODULO
    (98) oper -> . MULTIPLY
    (99) oper -> . DIVIDE
    (100) oper -> . PLUS
    (101) oper -> . MINUS
    (102) oper -> . EQUALS
    (58) boolop -> . EQ
    (59) boolop -> . NEQ
    (60) boolop -> . LSS
    (61) boolop -> . GTR
    (62) boolop -> . LEQ
    (63) boolop -> . GEQ
    (64) boolop -> . AND
    (65) boolop -> . OR

  ! shift/reduce conflict for error resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LSS resolved as shift
  ! shift/reduce conflict for GTR resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSEPAR        reduce using rule 47 (bool -> expression boolop expression .)
    error           shift and go to state 121
    EXP             shift and go to state 54
    MODULO          shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EQUALS          shift and go to state 60
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LSS             shift and go to state 114
    GTR             shift and go to state 115
    LEQ             shift and go to state 116
    GEQ             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119

  ! error           [ reduce using rule 47 (bool -> expression boolop expression .) ]
  ! EQ              [ reduce using rule 47 (bool -> expression boolop expression .) ]
  ! NEQ             [ reduce using rule 47 (bool -> expression boolop expression .) ]
  ! LSS             [ reduce using rule 47 (bool -> expression boolop expression .) ]
  ! GTR             [ reduce using rule 47 (bool -> expression boolop expression .) ]
  ! LEQ             [ reduce using rule 47 (bool -> expression boolop expression .) ]
  ! GEQ             [ reduce using rule 47 (bool -> expression boolop expression .) ]
  ! AND             [ reduce using rule 47 (bool -> expression boolop expression .) ]
  ! OR              [ reduce using rule 47 (bool -> expression boolop expression .) ]

    boolop                         shift and go to state 120
    oper                           shift and go to state 53

state 138

    (49) bool -> expression boolop bool .
    (48) bool -> bool . boolop bool
    (50) bool -> bool . boolop expression
    (54) bool -> bool . error
    (56) bool -> bool . boolop error
    (58) boolop -> . EQ
    (59) boolop -> . NEQ
    (60) boolop -> . LSS
    (61) boolop -> . GTR
    (62) boolop -> . LEQ
    (63) boolop -> . GEQ
    (64) boolop -> . AND
    (65) boolop -> . OR

  ! shift/reduce conflict for error resolved as shift
  ! shift/reduce conflict for EQ resolved as shift
  ! shift/reduce conflict for NEQ resolved as shift
  ! shift/reduce conflict for LSS resolved as shift
  ! shift/reduce conflict for GTR resolved as shift
  ! shift/reduce conflict for LEQ resolved as shift
  ! shift/reduce conflict for GEQ resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    CLOSEPAR        reduce using rule 49 (bool -> expression boolop bool .)
    error           shift and go to state 111
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LSS             shift and go to state 114
    GTR             shift and go to state 115
    LEQ             shift and go to state 116
    GEQ             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119

  ! error           [ reduce using rule 49 (bool -> expression boolop bool .) ]
  ! EQ              [ reduce using rule 49 (bool -> expression boolop bool .) ]
  ! NEQ             [ reduce using rule 49 (bool -> expression boolop bool .) ]
  ! LSS             [ reduce using rule 49 (bool -> expression boolop bool .) ]
  ! GTR             [ reduce using rule 49 (bool -> expression boolop bool .) ]
  ! LEQ             [ reduce using rule 49 (bool -> expression boolop bool .) ]
  ! GEQ             [ reduce using rule 49 (bool -> expression boolop bool .) ]
  ! AND             [ reduce using rule 49 (bool -> expression boolop bool .) ]
  ! OR              [ reduce using rule 49 (bool -> expression boolop bool .) ]

    boolop                         shift and go to state 110

state 139

    (55) bool -> expression boolop error .

    CLOSEPAR        reduce using rule 55 (bool -> expression boolop error .)
    error           reduce using rule 55 (bool -> expression boolop error .)
    EQ              reduce using rule 55 (bool -> expression boolop error .)
    NEQ             reduce using rule 55 (bool -> expression boolop error .)
    LSS             reduce using rule 55 (bool -> expression boolop error .)
    GTR             reduce using rule 55 (bool -> expression boolop error .)
    LEQ             reduce using rule 55 (bool -> expression boolop error .)
    GEQ             reduce using rule 55 (bool -> expression boolop error .)
    AND             reduce using rule 55 (bool -> expression boolop error .)
    OR              reduce using rule 55 (bool -> expression boolop error .)


state 140

    (88) expression -> OPENPAR . expression CLOSEPAR
    (52) bool -> OPENPAR . bool CLOSEPAR
    (87) expression -> . expression oper expression
    (88) expression -> . OPENPAR expression CLOSEPAR
    (89) expression -> . expression oper error
    (90) expression -> . INT
    (91) expression -> . FLOAT
    (92) expression -> . NAME
    (93) expression -> . FNAME OPENPAR varname CLOSEPAR
    (94) expression -> . FNAME error
    (95) expression -> . FNAME OPENPAR varname error
    (47) bool -> . expression boolop expression
    (48) bool -> . bool boolop bool
    (49) bool -> . expression boolop bool
    (50) bool -> . bool boolop expression
    (51) bool -> . NOT bool
    (52) bool -> . OPENPAR bool CLOSEPAR
    (53) bool -> . expression error
    (54) bool -> . bool error
    (55) bool -> . expression boolop error
    (56) bool -> . bool boolop error
    (57) bool -> . NOT error

    OPENPAR         shift and go to state 140
    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    NAME            shift and go to state 63
    FNAME           shift and go to state 35
    NOT             shift and go to state 96

    expression                     shift and go to state 148
    bool                           shift and go to state 107

state 141

    (66) if -> IF OPENPAR bool CLOSEPAR block . else
    (67) if -> IF OPENPAR bool CLOSEPAR block .
    (69) else -> . ELSE block

    error           reduce using rule 67 (if -> IF OPENPAR bool CLOSEPAR block .)
    RETURN          reduce using rule 67 (if -> IF OPENPAR bool CLOSEPAR block .)
    NAME            reduce using rule 67 (if -> IF OPENPAR bool CLOSEPAR block .)
    INPUT           reduce using rule 67 (if -> IF OPENPAR bool CLOSEPAR block .)
    OUTPUT          reduce using rule 67 (if -> IF OPENPAR bool CLOSEPAR block .)
    OPENPAR         reduce using rule 67 (if -> IF OPENPAR bool CLOSEPAR block .)
    INT             reduce using rule 67 (if -> IF OPENPAR bool CLOSEPAR block .)
    FLOAT           reduce using rule 67 (if -> IF OPENPAR bool CLOSEPAR block .)
    FNAME           reduce using rule 67 (if -> IF OPENPAR bool CLOSEPAR block .)
    WHILE           reduce using rule 67 (if -> IF OPENPAR bool CLOSEPAR block .)
    IF              reduce using rule 67 (if -> IF OPENPAR bool CLOSEPAR block .)
    TYPEFLOAT       reduce using rule 67 (if -> IF OPENPAR bool CLOSEPAR block .)
    TYPEINT         reduce using rule 67 (if -> IF OPENPAR bool CLOSEPAR block .)
    CLOSECURL       reduce using rule 67 (if -> IF OPENPAR bool CLOSEPAR block .)
    BREAK           reduce using rule 67 (if -> IF OPENPAR bool CLOSEPAR block .)
    ELSE            shift and go to state 150

    else                           shift and go to state 149

state 142

    (29) io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA . AMP NAME CLOSEPAR
    (41) io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA . error

    AMP             shift and go to state 151
    error           shift and go to state 152


state 143

    (39) io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK error .

    EOL             reduce using rule 39 (io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK error .)
    error           reduce using rule 39 (io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK error .)


state 144

    (30) io -> OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA . NAME CLOSEPAR
    (42) io -> OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA . error

    NAME            shift and go to state 153
    error           shift and go to state 154


state 145

    (40) io -> OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK error .

    EOL             reduce using rule 40 (io -> OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK error .)
    error           reduce using rule 40 (io -> OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK error .)


state 146

    (72) block -> OPENCURL bcode . CLOSECURL
    (74) bcode -> bcode . io EOL
    (75) bcode -> bcode . varassign EOL
    (76) bcode -> bcode . while
    (77) bcode -> bcode . if
    (78) bcode -> bcode . expression EOL
    (79) bcode -> bcode . BREAK EOL
    (80) bcode -> bcode . return EOL
    (82) bcode -> bcode . BREAK error
    (83) bcode -> bcode . varassign error
    (84) bcode -> bcode . io error
    (85) bcode -> bcode . expression error
    (86) bcode -> bcode . return error
    (29) io -> . INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA AMP NAME CLOSEPAR
    (30) io -> . OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA NAME CLOSEPAR
    (31) io -> . INPUT error
    (32) io -> . OUTPUT error
    (33) io -> . INPUT OPENPAR error
    (34) io -> . OUTPUT OPENPAR error
    (35) io -> . INPUT OPENPAR QUOTEMARK error
    (36) io -> . OUTPUT OPENPAR QUOTEMARK error
    (37) io -> . INPUT OPENPAR QUOTEMARK percenttype error
    (38) io -> . OUTPUT OPENPAR QUOTEMARK percenttype error
    (39) io -> . INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK error
    (40) io -> . OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK error
    (41) io -> . INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA error
    (42) io -> . OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA error
    (105) varassign -> . NAME EQUALS expression
    (106) varassign -> . NAME EQUALS error
    (70) while -> . WHILE OPENPAR bool CLOSEPAR block
    (71) while -> . WHILE error
    (66) if -> . IF OPENPAR bool CLOSEPAR block else
    (67) if -> . IF OPENPAR bool CLOSEPAR block
    (68) if -> . IF error
    (87) expression -> . expression oper expression
    (88) expression -> . OPENPAR expression CLOSEPAR
    (89) expression -> . expression oper error
    (90) expression -> . INT
    (91) expression -> . FLOAT
    (92) expression -> . NAME
    (93) expression -> . FNAME OPENPAR varname CLOSEPAR
    (94) expression -> . FNAME error
    (95) expression -> . FNAME OPENPAR varname error
    (27) return -> . RETURN expression
    (28) return -> . RETURN error

    CLOSECURL       shift and go to state 155
    BREAK           shift and go to state 161
    INPUT           shift and go to state 30
    OUTPUT          shift and go to state 32
    NAME            shift and go to state 29
    WHILE           shift and go to state 36
    IF              shift and go to state 37
    OPENPAR         shift and go to state 31
    INT             shift and go to state 33
    FLOAT           shift and go to state 34
    FNAME           shift and go to state 35
    RETURN          shift and go to state 28

    io                             shift and go to state 156
    varassign                      shift and go to state 157
    while                          shift and go to state 158
    if                             shift and go to state 159
    expression                     shift and go to state 160
    return                         shift and go to state 162

state 147

    (81) bcode -> empty .

    CLOSECURL       reduce using rule 81 (bcode -> empty .)
    BREAK           reduce using rule 81 (bcode -> empty .)
    INPUT           reduce using rule 81 (bcode -> empty .)
    OUTPUT          reduce using rule 81 (bcode -> empty .)
    NAME            reduce using rule 81 (bcode -> empty .)
    WHILE           reduce using rule 81 (bcode -> empty .)
    IF              reduce using rule 81 (bcode -> empty .)
    OPENPAR         reduce using rule 81 (bcode -> empty .)
    INT             reduce using rule 81 (bcode -> empty .)
    FLOAT           reduce using rule 81 (bcode -> empty .)
    FNAME           reduce using rule 81 (bcode -> empty .)
    RETURN          reduce using rule 81 (bcode -> empty .)


state 148

    (88) expression -> OPENPAR expression . CLOSEPAR
    (87) expression -> expression . oper expression
    (89) expression -> expression . oper error
    (47) bool -> expression . boolop expression
    (49) bool -> expression . boolop bool
    (53) bool -> expression . error
    (55) bool -> expression . boolop error
    (96) oper -> . EXP
    (97) oper -> . MODULO
    (98) oper -> . MULTIPLY
    (99) oper -> . DIVIDE
    (100) oper -> . PLUS
    (101) oper -> . MINUS
    (102) oper -> . EQUALS
    (58) boolop -> . EQ
    (59) boolop -> . NEQ
    (60) boolop -> . LSS
    (61) boolop -> . GTR
    (62) boolop -> . LEQ
    (63) boolop -> . GEQ
    (64) boolop -> . AND
    (65) boolop -> . OR

    CLOSEPAR        shift and go to state 86
    error           shift and go to state 121
    EXP             shift and go to state 54
    MODULO          shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EQUALS          shift and go to state 60
    EQ              shift and go to state 112
    NEQ             shift and go to state 113
    LSS             shift and go to state 114
    GTR             shift and go to state 115
    LEQ             shift and go to state 116
    GEQ             shift and go to state 117
    AND             shift and go to state 118
    OR              shift and go to state 119

    oper                           shift and go to state 53
    boolop                         shift and go to state 120

state 149

    (66) if -> IF OPENPAR bool CLOSEPAR block else .

    error           reduce using rule 66 (if -> IF OPENPAR bool CLOSEPAR block else .)
    RETURN          reduce using rule 66 (if -> IF OPENPAR bool CLOSEPAR block else .)
    NAME            reduce using rule 66 (if -> IF OPENPAR bool CLOSEPAR block else .)
    INPUT           reduce using rule 66 (if -> IF OPENPAR bool CLOSEPAR block else .)
    OUTPUT          reduce using rule 66 (if -> IF OPENPAR bool CLOSEPAR block else .)
    OPENPAR         reduce using rule 66 (if -> IF OPENPAR bool CLOSEPAR block else .)
    INT             reduce using rule 66 (if -> IF OPENPAR bool CLOSEPAR block else .)
    FLOAT           reduce using rule 66 (if -> IF OPENPAR bool CLOSEPAR block else .)
    FNAME           reduce using rule 66 (if -> IF OPENPAR bool CLOSEPAR block else .)
    WHILE           reduce using rule 66 (if -> IF OPENPAR bool CLOSEPAR block else .)
    IF              reduce using rule 66 (if -> IF OPENPAR bool CLOSEPAR block else .)
    TYPEFLOAT       reduce using rule 66 (if -> IF OPENPAR bool CLOSEPAR block else .)
    TYPEINT         reduce using rule 66 (if -> IF OPENPAR bool CLOSEPAR block else .)
    CLOSECURL       reduce using rule 66 (if -> IF OPENPAR bool CLOSEPAR block else .)
    BREAK           reduce using rule 66 (if -> IF OPENPAR bool CLOSEPAR block else .)


state 150

    (69) else -> ELSE . block
    (72) block -> . OPENCURL bcode CLOSECURL
    (73) block -> . error

    OPENCURL        shift and go to state 132
    error           shift and go to state 133

    block                          shift and go to state 163

state 151

    (29) io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA AMP . NAME CLOSEPAR

    NAME            shift and go to state 164


state 152

    (41) io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA error .

    EOL             reduce using rule 41 (io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA error .)
    error           reduce using rule 41 (io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA error .)


state 153

    (30) io -> OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA NAME . CLOSEPAR

    CLOSEPAR        shift and go to state 165


state 154

    (42) io -> OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA error .

    EOL             reduce using rule 42 (io -> OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA error .)
    error           reduce using rule 42 (io -> OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA error .)


state 155

    (72) block -> OPENCURL bcode CLOSECURL .

    error           reduce using rule 72 (block -> OPENCURL bcode CLOSECURL .)
    RETURN          reduce using rule 72 (block -> OPENCURL bcode CLOSECURL .)
    NAME            reduce using rule 72 (block -> OPENCURL bcode CLOSECURL .)
    INPUT           reduce using rule 72 (block -> OPENCURL bcode CLOSECURL .)
    OUTPUT          reduce using rule 72 (block -> OPENCURL bcode CLOSECURL .)
    OPENPAR         reduce using rule 72 (block -> OPENCURL bcode CLOSECURL .)
    INT             reduce using rule 72 (block -> OPENCURL bcode CLOSECURL .)
    FLOAT           reduce using rule 72 (block -> OPENCURL bcode CLOSECURL .)
    FNAME           reduce using rule 72 (block -> OPENCURL bcode CLOSECURL .)
    WHILE           reduce using rule 72 (block -> OPENCURL bcode CLOSECURL .)
    IF              reduce using rule 72 (block -> OPENCURL bcode CLOSECURL .)
    TYPEFLOAT       reduce using rule 72 (block -> OPENCURL bcode CLOSECURL .)
    TYPEINT         reduce using rule 72 (block -> OPENCURL bcode CLOSECURL .)
    CLOSECURL       reduce using rule 72 (block -> OPENCURL bcode CLOSECURL .)
    BREAK           reduce using rule 72 (block -> OPENCURL bcode CLOSECURL .)
    ELSE            reduce using rule 72 (block -> OPENCURL bcode CLOSECURL .)


state 156

    (74) bcode -> bcode io . EOL
    (84) bcode -> bcode io . error

    EOL             shift and go to state 166
    error           shift and go to state 167


state 157

    (75) bcode -> bcode varassign . EOL
    (83) bcode -> bcode varassign . error

    EOL             shift and go to state 168
    error           shift and go to state 169


state 158

    (76) bcode -> bcode while .

    CLOSECURL       reduce using rule 76 (bcode -> bcode while .)
    BREAK           reduce using rule 76 (bcode -> bcode while .)
    INPUT           reduce using rule 76 (bcode -> bcode while .)
    OUTPUT          reduce using rule 76 (bcode -> bcode while .)
    NAME            reduce using rule 76 (bcode -> bcode while .)
    WHILE           reduce using rule 76 (bcode -> bcode while .)
    IF              reduce using rule 76 (bcode -> bcode while .)
    OPENPAR         reduce using rule 76 (bcode -> bcode while .)
    INT             reduce using rule 76 (bcode -> bcode while .)
    FLOAT           reduce using rule 76 (bcode -> bcode while .)
    FNAME           reduce using rule 76 (bcode -> bcode while .)
    RETURN          reduce using rule 76 (bcode -> bcode while .)


state 159

    (77) bcode -> bcode if .

    CLOSECURL       reduce using rule 77 (bcode -> bcode if .)
    BREAK           reduce using rule 77 (bcode -> bcode if .)
    INPUT           reduce using rule 77 (bcode -> bcode if .)
    OUTPUT          reduce using rule 77 (bcode -> bcode if .)
    NAME            reduce using rule 77 (bcode -> bcode if .)
    WHILE           reduce using rule 77 (bcode -> bcode if .)
    IF              reduce using rule 77 (bcode -> bcode if .)
    OPENPAR         reduce using rule 77 (bcode -> bcode if .)
    INT             reduce using rule 77 (bcode -> bcode if .)
    FLOAT           reduce using rule 77 (bcode -> bcode if .)
    FNAME           reduce using rule 77 (bcode -> bcode if .)
    RETURN          reduce using rule 77 (bcode -> bcode if .)


state 160

    (78) bcode -> bcode expression . EOL
    (85) bcode -> bcode expression . error
    (87) expression -> expression . oper expression
    (89) expression -> expression . oper error
    (96) oper -> . EXP
    (97) oper -> . MODULO
    (98) oper -> . MULTIPLY
    (99) oper -> . DIVIDE
    (100) oper -> . PLUS
    (101) oper -> . MINUS
    (102) oper -> . EQUALS

    EOL             shift and go to state 170
    error           shift and go to state 171
    EXP             shift and go to state 54
    MODULO          shift and go to state 55
    MULTIPLY        shift and go to state 56
    DIVIDE          shift and go to state 57
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    EQUALS          shift and go to state 60

    oper                           shift and go to state 53

state 161

    (79) bcode -> bcode BREAK . EOL
    (82) bcode -> bcode BREAK . error

    EOL             shift and go to state 172
    error           shift and go to state 173


state 162

    (80) bcode -> bcode return . EOL
    (86) bcode -> bcode return . error

    EOL             shift and go to state 174
    error           shift and go to state 175


state 163

    (69) else -> ELSE block .

    error           reduce using rule 69 (else -> ELSE block .)
    RETURN          reduce using rule 69 (else -> ELSE block .)
    NAME            reduce using rule 69 (else -> ELSE block .)
    INPUT           reduce using rule 69 (else -> ELSE block .)
    OUTPUT          reduce using rule 69 (else -> ELSE block .)
    OPENPAR         reduce using rule 69 (else -> ELSE block .)
    INT             reduce using rule 69 (else -> ELSE block .)
    FLOAT           reduce using rule 69 (else -> ELSE block .)
    FNAME           reduce using rule 69 (else -> ELSE block .)
    WHILE           reduce using rule 69 (else -> ELSE block .)
    IF              reduce using rule 69 (else -> ELSE block .)
    TYPEFLOAT       reduce using rule 69 (else -> ELSE block .)
    TYPEINT         reduce using rule 69 (else -> ELSE block .)
    CLOSECURL       reduce using rule 69 (else -> ELSE block .)
    BREAK           reduce using rule 69 (else -> ELSE block .)


state 164

    (29) io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA AMP NAME . CLOSEPAR

    CLOSEPAR        shift and go to state 176


state 165

    (30) io -> OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA NAME CLOSEPAR .

    EOL             reduce using rule 30 (io -> OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA NAME CLOSEPAR .)
    error           reduce using rule 30 (io -> OUTPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA NAME CLOSEPAR .)


state 166

    (74) bcode -> bcode io EOL .

    CLOSECURL       reduce using rule 74 (bcode -> bcode io EOL .)
    BREAK           reduce using rule 74 (bcode -> bcode io EOL .)
    INPUT           reduce using rule 74 (bcode -> bcode io EOL .)
    OUTPUT          reduce using rule 74 (bcode -> bcode io EOL .)
    NAME            reduce using rule 74 (bcode -> bcode io EOL .)
    WHILE           reduce using rule 74 (bcode -> bcode io EOL .)
    IF              reduce using rule 74 (bcode -> bcode io EOL .)
    OPENPAR         reduce using rule 74 (bcode -> bcode io EOL .)
    INT             reduce using rule 74 (bcode -> bcode io EOL .)
    FLOAT           reduce using rule 74 (bcode -> bcode io EOL .)
    FNAME           reduce using rule 74 (bcode -> bcode io EOL .)
    RETURN          reduce using rule 74 (bcode -> bcode io EOL .)


state 167

    (84) bcode -> bcode io error .

    CLOSECURL       reduce using rule 84 (bcode -> bcode io error .)
    BREAK           reduce using rule 84 (bcode -> bcode io error .)
    INPUT           reduce using rule 84 (bcode -> bcode io error .)
    OUTPUT          reduce using rule 84 (bcode -> bcode io error .)
    NAME            reduce using rule 84 (bcode -> bcode io error .)
    WHILE           reduce using rule 84 (bcode -> bcode io error .)
    IF              reduce using rule 84 (bcode -> bcode io error .)
    OPENPAR         reduce using rule 84 (bcode -> bcode io error .)
    INT             reduce using rule 84 (bcode -> bcode io error .)
    FLOAT           reduce using rule 84 (bcode -> bcode io error .)
    FNAME           reduce using rule 84 (bcode -> bcode io error .)
    RETURN          reduce using rule 84 (bcode -> bcode io error .)


state 168

    (75) bcode -> bcode varassign EOL .

    CLOSECURL       reduce using rule 75 (bcode -> bcode varassign EOL .)
    BREAK           reduce using rule 75 (bcode -> bcode varassign EOL .)
    INPUT           reduce using rule 75 (bcode -> bcode varassign EOL .)
    OUTPUT          reduce using rule 75 (bcode -> bcode varassign EOL .)
    NAME            reduce using rule 75 (bcode -> bcode varassign EOL .)
    WHILE           reduce using rule 75 (bcode -> bcode varassign EOL .)
    IF              reduce using rule 75 (bcode -> bcode varassign EOL .)
    OPENPAR         reduce using rule 75 (bcode -> bcode varassign EOL .)
    INT             reduce using rule 75 (bcode -> bcode varassign EOL .)
    FLOAT           reduce using rule 75 (bcode -> bcode varassign EOL .)
    FNAME           reduce using rule 75 (bcode -> bcode varassign EOL .)
    RETURN          reduce using rule 75 (bcode -> bcode varassign EOL .)


state 169

    (83) bcode -> bcode varassign error .

    CLOSECURL       reduce using rule 83 (bcode -> bcode varassign error .)
    BREAK           reduce using rule 83 (bcode -> bcode varassign error .)
    INPUT           reduce using rule 83 (bcode -> bcode varassign error .)
    OUTPUT          reduce using rule 83 (bcode -> bcode varassign error .)
    NAME            reduce using rule 83 (bcode -> bcode varassign error .)
    WHILE           reduce using rule 83 (bcode -> bcode varassign error .)
    IF              reduce using rule 83 (bcode -> bcode varassign error .)
    OPENPAR         reduce using rule 83 (bcode -> bcode varassign error .)
    INT             reduce using rule 83 (bcode -> bcode varassign error .)
    FLOAT           reduce using rule 83 (bcode -> bcode varassign error .)
    FNAME           reduce using rule 83 (bcode -> bcode varassign error .)
    RETURN          reduce using rule 83 (bcode -> bcode varassign error .)


state 170

    (78) bcode -> bcode expression EOL .

    CLOSECURL       reduce using rule 78 (bcode -> bcode expression EOL .)
    BREAK           reduce using rule 78 (bcode -> bcode expression EOL .)
    INPUT           reduce using rule 78 (bcode -> bcode expression EOL .)
    OUTPUT          reduce using rule 78 (bcode -> bcode expression EOL .)
    NAME            reduce using rule 78 (bcode -> bcode expression EOL .)
    WHILE           reduce using rule 78 (bcode -> bcode expression EOL .)
    IF              reduce using rule 78 (bcode -> bcode expression EOL .)
    OPENPAR         reduce using rule 78 (bcode -> bcode expression EOL .)
    INT             reduce using rule 78 (bcode -> bcode expression EOL .)
    FLOAT           reduce using rule 78 (bcode -> bcode expression EOL .)
    FNAME           reduce using rule 78 (bcode -> bcode expression EOL .)
    RETURN          reduce using rule 78 (bcode -> bcode expression EOL .)


state 171

    (85) bcode -> bcode expression error .

    CLOSECURL       reduce using rule 85 (bcode -> bcode expression error .)
    BREAK           reduce using rule 85 (bcode -> bcode expression error .)
    INPUT           reduce using rule 85 (bcode -> bcode expression error .)
    OUTPUT          reduce using rule 85 (bcode -> bcode expression error .)
    NAME            reduce using rule 85 (bcode -> bcode expression error .)
    WHILE           reduce using rule 85 (bcode -> bcode expression error .)
    IF              reduce using rule 85 (bcode -> bcode expression error .)
    OPENPAR         reduce using rule 85 (bcode -> bcode expression error .)
    INT             reduce using rule 85 (bcode -> bcode expression error .)
    FLOAT           reduce using rule 85 (bcode -> bcode expression error .)
    FNAME           reduce using rule 85 (bcode -> bcode expression error .)
    RETURN          reduce using rule 85 (bcode -> bcode expression error .)


state 172

    (79) bcode -> bcode BREAK EOL .

    CLOSECURL       reduce using rule 79 (bcode -> bcode BREAK EOL .)
    BREAK           reduce using rule 79 (bcode -> bcode BREAK EOL .)
    INPUT           reduce using rule 79 (bcode -> bcode BREAK EOL .)
    OUTPUT          reduce using rule 79 (bcode -> bcode BREAK EOL .)
    NAME            reduce using rule 79 (bcode -> bcode BREAK EOL .)
    WHILE           reduce using rule 79 (bcode -> bcode BREAK EOL .)
    IF              reduce using rule 79 (bcode -> bcode BREAK EOL .)
    OPENPAR         reduce using rule 79 (bcode -> bcode BREAK EOL .)
    INT             reduce using rule 79 (bcode -> bcode BREAK EOL .)
    FLOAT           reduce using rule 79 (bcode -> bcode BREAK EOL .)
    FNAME           reduce using rule 79 (bcode -> bcode BREAK EOL .)
    RETURN          reduce using rule 79 (bcode -> bcode BREAK EOL .)


state 173

    (82) bcode -> bcode BREAK error .

    CLOSECURL       reduce using rule 82 (bcode -> bcode BREAK error .)
    BREAK           reduce using rule 82 (bcode -> bcode BREAK error .)
    INPUT           reduce using rule 82 (bcode -> bcode BREAK error .)
    OUTPUT          reduce using rule 82 (bcode -> bcode BREAK error .)
    NAME            reduce using rule 82 (bcode -> bcode BREAK error .)
    WHILE           reduce using rule 82 (bcode -> bcode BREAK error .)
    IF              reduce using rule 82 (bcode -> bcode BREAK error .)
    OPENPAR         reduce using rule 82 (bcode -> bcode BREAK error .)
    INT             reduce using rule 82 (bcode -> bcode BREAK error .)
    FLOAT           reduce using rule 82 (bcode -> bcode BREAK error .)
    FNAME           reduce using rule 82 (bcode -> bcode BREAK error .)
    RETURN          reduce using rule 82 (bcode -> bcode BREAK error .)


state 174

    (80) bcode -> bcode return EOL .

    CLOSECURL       reduce using rule 80 (bcode -> bcode return EOL .)
    BREAK           reduce using rule 80 (bcode -> bcode return EOL .)
    INPUT           reduce using rule 80 (bcode -> bcode return EOL .)
    OUTPUT          reduce using rule 80 (bcode -> bcode return EOL .)
    NAME            reduce using rule 80 (bcode -> bcode return EOL .)
    WHILE           reduce using rule 80 (bcode -> bcode return EOL .)
    IF              reduce using rule 80 (bcode -> bcode return EOL .)
    OPENPAR         reduce using rule 80 (bcode -> bcode return EOL .)
    INT             reduce using rule 80 (bcode -> bcode return EOL .)
    FLOAT           reduce using rule 80 (bcode -> bcode return EOL .)
    FNAME           reduce using rule 80 (bcode -> bcode return EOL .)
    RETURN          reduce using rule 80 (bcode -> bcode return EOL .)


state 175

    (86) bcode -> bcode return error .

    CLOSECURL       reduce using rule 86 (bcode -> bcode return error .)
    BREAK           reduce using rule 86 (bcode -> bcode return error .)
    INPUT           reduce using rule 86 (bcode -> bcode return error .)
    OUTPUT          reduce using rule 86 (bcode -> bcode return error .)
    NAME            reduce using rule 86 (bcode -> bcode return error .)
    WHILE           reduce using rule 86 (bcode -> bcode return error .)
    IF              reduce using rule 86 (bcode -> bcode return error .)
    OPENPAR         reduce using rule 86 (bcode -> bcode return error .)
    INT             reduce using rule 86 (bcode -> bcode return error .)
    FLOAT           reduce using rule 86 (bcode -> bcode return error .)
    FNAME           reduce using rule 86 (bcode -> bcode return error .)
    RETURN          reduce using rule 86 (bcode -> bcode return error .)


state 176

    (29) io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA AMP NAME CLOSEPAR .

    EOL             reduce using rule 29 (io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA AMP NAME CLOSEPAR .)
    error           reduce using rule 29 (io -> INPUT OPENPAR QUOTEMARK percenttype QUOTEMARK COMMA AMP NAME CLOSEPAR .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for error in state 10 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 29 resolved as shift
WARNING: shift/reduce conflict for error in state 43 resolved as shift
WARNING: shift/reduce conflict for error in state 70 resolved as shift
WARNING: shift/reduce conflict for EXP in state 80 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 80 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 80 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 80 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 80 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 80 resolved as shift
WARNING: shift/reduce conflict for EQUALS in state 80 resolved as shift
WARNING: shift/reduce conflict for error in state 106 resolved as shift
WARNING: shift/reduce conflict for error in state 134 resolved as shift
WARNING: shift/reduce conflict for EQ in state 134 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 134 resolved as shift
WARNING: shift/reduce conflict for LSS in state 134 resolved as shift
WARNING: shift/reduce conflict for GTR in state 134 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 134 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 134 resolved as shift
WARNING: shift/reduce conflict for AND in state 134 resolved as shift
WARNING: shift/reduce conflict for OR in state 134 resolved as shift
WARNING: shift/reduce conflict for error in state 135 resolved as shift
WARNING: shift/reduce conflict for EQ in state 135 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 135 resolved as shift
WARNING: shift/reduce conflict for LSS in state 135 resolved as shift
WARNING: shift/reduce conflict for GTR in state 135 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 135 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 135 resolved as shift
WARNING: shift/reduce conflict for AND in state 135 resolved as shift
WARNING: shift/reduce conflict for OR in state 135 resolved as shift
WARNING: shift/reduce conflict for error in state 137 resolved as shift
WARNING: shift/reduce conflict for EQ in state 137 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 137 resolved as shift
WARNING: shift/reduce conflict for LSS in state 137 resolved as shift
WARNING: shift/reduce conflict for GTR in state 137 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 137 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 137 resolved as shift
WARNING: shift/reduce conflict for AND in state 137 resolved as shift
WARNING: shift/reduce conflict for OR in state 137 resolved as shift
WARNING: shift/reduce conflict for error in state 138 resolved as shift
WARNING: shift/reduce conflict for EQ in state 138 resolved as shift
WARNING: shift/reduce conflict for NEQ in state 138 resolved as shift
WARNING: shift/reduce conflict for LSS in state 138 resolved as shift
WARNING: shift/reduce conflict for GTR in state 138 resolved as shift
WARNING: shift/reduce conflict for LEQ in state 138 resolved as shift
WARNING: shift/reduce conflict for GEQ in state 138 resolved as shift
WARNING: shift/reduce conflict for AND in state 138 resolved as shift
WARNING: shift/reduce conflict for OR in state 138 resolved as shift
